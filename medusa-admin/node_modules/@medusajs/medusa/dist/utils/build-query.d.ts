import { FindOperator, FindOptionsRelations, FindOptionsSelect, FindOptionsWhere } from "typeorm";
import { FindOptionsOrder } from "typeorm/find-options/FindOptionsOrder";
import { ExtendedFindConfig, FindConfig } from "../types/common";
/**
 * Used to build TypeORM queries.
 * @param selector The selector
 * @param config The config
 * @return The QueryBuilderConfig
 */
export declare function buildQuery<TWhereKeys extends object, TEntity = unknown>(selector: TWhereKeys, config?: FindConfig<TEntity>): ExtendedFindConfig<TEntity>;
/**
 * Revert new object structure of find options to the legacy structure of previous version
 * @deprecated in favor of import { objectToStringPath } from "@medusajs/utils"
 * @example
 * input: {
 *   test: {
 *     test1: true,
 *     test2: true,
 *     test3: {
 *       test4: true
 *     },
 *   },
 *   test2: true
 * }
 * output: ['test.test1', 'test.test2', 'test.test3.test4', 'test2']
 * @param input
 */
export declare function buildLegacyFieldsListFrom<TEntity>(input?: FindOptionsWhere<TEntity> | FindOptionsSelect<TEntity> | FindOptionsOrder<TEntity> | FindOptionsRelations<TEntity>): (keyof TEntity)[];
export declare function buildSelects<TEntity>(selectCollection: string[]): FindOptionsSelect<TEntity>;
export declare function buildRelations<TEntity>(relationCollection: string[]): FindOptionsRelations<TEntity>;
export declare function addOrderToSelect<TEntity>(order: FindOptionsOrder<TEntity>, select: FindOptionsSelect<TEntity>): void;
/**
 * Convert an collection of dot string into a nested object
 * @example
 * input: [
 *    order,
 *    order.items,
 *    order.swaps,
 *    order.swaps.additional_items,
 *    order.discounts,
 *    order.discounts.rule,
 *    order.claims,
 *    order.claims.additional_items,
 *    additional_items,
 *    additional_items.variant,
 *    return_order,
 *    return_order.items,
 *    return_order.shipping_method,
 *    return_order.shipping_method.tax_lines
 * ]
 * output: {
 *   "order": {
 *     "items": true,
 *     "swaps": {
 *       "additional_items": true
 *     },
 *     "discounts": {
 *       "rule": true
 *     },
 *     "claims": {
 *       "additional_items": true
 *     }
 *   },
 *   "additional_items": {
 *     "variant": true
 *   },
 *   "return_order": {
 *     "items": true,
 *     "shipping_method": {
 *       "tax_lines": true
 *     }
 *   }
 * }
 * @param collection
 */
export declare function buildRelationsOrSelect<TEntity>(collection: string[]): FindOptionsRelations<TEntity> | FindOptionsSelect<TEntity>;
export declare function nullableValue(value: any): FindOperator<any>;
