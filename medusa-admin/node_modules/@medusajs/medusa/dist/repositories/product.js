"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductRepository = void 0;
var typeorm_1 = require("typeorm");
var models_1 = require("../models");
var database_1 = require("../loaders/database");
var utils_1 = require("../utils");
var utils_2 = require("@medusajs/utils");
exports.ProductRepository = database_1.dataSource.getRepository(models_1.Product).extend({
    bulkAddToCollection: function (productIds, collectionId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createQueryBuilder()
                            .update(models_1.Product)
                            .set({ collection_id: collectionId })
                            .where({ id: (0, typeorm_1.In)(productIds) })
                            .execute()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.findByIds(productIds)];
                }
            });
        });
    },
    bulkRemoveFromCollection: function (productIds, collectionId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createQueryBuilder()
                            .update(models_1.Product)
                            .set({ collection_id: null })
                            .where({ id: (0, typeorm_1.In)(productIds), collection_id: collectionId })
                            .execute()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.findByIds(productIds)];
                }
            });
        });
    },
    isProductInSalesChannels: function (id, salesChannelIds) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createQueryBuilder("product")
                            .leftJoin("product.sales_channels", "sales_channels", "sales_channels.id IN (:...salesChannelIds)", { salesChannelIds: salesChannelIds })
                            .getCount()];
                    case 1: return [2 /*return*/, ((_a.sent()) > 0)];
                }
            });
        });
    },
    findAndCount: function (options, q) {
        return __awaiter(this, void 0, void 0, function () {
            var options_, queryBuilder;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options_ = __assign({}, options);
                        options_.relationLoadStrategy = "query";
                        return [4 /*yield*/, this.prepareQueryBuilder_(options_, q)];
                    case 1:
                        queryBuilder = _a.sent();
                        return [4 /*yield*/, queryBuilder.getManyAndCount()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    },
    findOne: function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var queryBuilder;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.prepareQueryBuilder_(options)];
                    case 1:
                        queryBuilder = _a.sent();
                        return [4 /*yield*/, queryBuilder.getOne()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    },
    prepareQueryBuilder_: function (options, q) {
        var _a, _b, _c, _d, _e, _f, _g;
        return __awaiter(this, void 0, void 0, function () {
            var options_, productAlias, queryBuilder, orderFieldsCollectionPointSeparated, isDepth1, priceListId, tags, salesChannelId, categoryId, discountConditionId, categoriesQuery, includeCategoryChildren, priceListIds, joinMethod, tagIds, joinMethod, scIds, joinMethod, categoryIds, categoryRepository, categories, categories_1, categories_1_1, category, categoryChildren, e_1_1, categoryAlias_1, joinScope, joinWhere;
            var e_1, _h;
            return __generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        options_ = __assign({}, options);
                        productAlias = "product";
                        queryBuilder = this.createQueryBuilder(productAlias);
                        orderFieldsCollectionPointSeparated = (0, utils_2.objectToStringPath)((_a = options.order) !== null && _a !== void 0 ? _a : {});
                        isDepth1 = !orderFieldsCollectionPointSeparated.some(function (field) { return field.indexOf(".") !== -1; });
                        options_.relationLoadStrategy = isDepth1
                            ? options_.relationLoadStrategy
                            : "join";
                        options_.relations = (_b = options_.relations) !== null && _b !== void 0 ? _b : {};
                        options_.where = options_.where;
                        priceListId = options_.where.price_list_id;
                        tags = options_.where.tags;
                        salesChannelId = options_.where.sales_channel_id;
                        categoryId = options_.where.category_id;
                        discountConditionId = options_.where.discount_condition_id;
                        categoriesQuery = (options_.where.categories ||
                            {});
                        includeCategoryChildren = (_c = options_.where.include_category_children) !== null && _c !== void 0 ? _c : false;
                        delete options_.where.price_list_id;
                        delete options_.where.tags;
                        delete options_.where.sales_channel_id;
                        delete options_.where.category_id;
                        delete options_.where.discount_condition_id;
                        delete options_.where.include_category_children;
                        delete options_.where.categories;
                        if (q) {
                            options_.relations = (_d = options_.relations) !== null && _d !== void 0 ? _d : {};
                            options_.relations.variants = (_e = options_.relations.variants) !== null && _e !== void 0 ? _e : true;
                            options_.relations.collection = (_f = options_.relations.collection) !== null && _f !== void 0 ? _f : true;
                            options_.where = [
                                __assign(__assign({}, options_.where), { description: (0, typeorm_1.ILike)("%".concat(q, "%")) }),
                                __assign(__assign({}, options_.where), { title: (0, typeorm_1.ILike)("%".concat(q, "%")) }),
                                __assign(__assign({}, options_.where), { variants: {
                                        title: (0, typeorm_1.ILike)("%".concat(q, "%")),
                                    } }),
                                __assign(__assign({}, options_.where), { variants: {
                                        sku: (0, typeorm_1.ILike)("%".concat(q, "%")),
                                    } }),
                                __assign(__assign({}, options_.where), { collection: {
                                        title: (0, typeorm_1.ILike)("%".concat(q, "%")),
                                    } }),
                            ];
                        }
                        // Add explicit ordering for variant ranking on the variants join directly
                        // This constraint is applied if no other order is applied
                        if (options_.relations.variants && !(0, utils_1.isObject)((_g = options_.order) === null || _g === void 0 ? void 0 : _g.variants)) {
                            queryBuilder.leftJoin(function (subQueryBuilder) {
                                return subQueryBuilder
                                    .from(models_1.ProductVariant, "v")
                                    .orderBy("v.variant_rank", "ASC");
                            }, "variants", "product.id = variants.product_id");
                        }
                        if (priceListId) {
                            priceListIds = priceListId.value;
                            queryBuilder
                                .leftJoin("".concat(productAlias, ".variants"), "variants_")
                                .leftJoin("variants_.prices", "ma")
                                .andWhere("ma.price_list_id IN (:...price_list_ids)", {
                                price_list_ids: priceListIds,
                            });
                        }
                        if (tags) {
                            joinMethod = options_.relations.tags
                                ? queryBuilder.leftJoinAndSelect.bind(queryBuilder)
                                : queryBuilder.leftJoin.bind(queryBuilder);
                            tagIds = tags.value;
                            // For an unknown reason, the implementation of the SelectQueryBuilder.setFindOptions -> buildWhere
                            // Only check if it is a find operator MoreThan or LessThan. Otherwise, it has to be a relation of
                            // isManyToOne or isOneToOne in order to be valid. Otherwise, it throws `This relation isn't supported by given find operator`
                            // We might need to wait for an update or open a PR around that subject
                            joinMethod("".concat(productAlias, ".tags"), "tags").andWhere("tags.id IN (:...tag_ids)", {
                                tag_ids: tagIds,
                            });
                        }
                        if (salesChannelId) {
                            joinMethod = options_.relations.sales_channels
                                ? queryBuilder.innerJoinAndSelect.bind(queryBuilder)
                                : queryBuilder.innerJoin.bind(queryBuilder);
                            scIds = salesChannelId.value;
                            joinMethod("".concat(productAlias, ".sales_channels"), "sales_channels", "sales_channels.id IN (:...sales_channels_ids)", {
                                sales_channels_ids: scIds,
                            });
                        }
                        if (!categoryId) return [3 /*break*/, 10];
                        joinMethod = options_.relations.categories
                            ? queryBuilder.innerJoinAndSelect.bind(queryBuilder)
                            : queryBuilder.innerJoin.bind(queryBuilder);
                        categoryIds = categoryId.value;
                        if (!includeCategoryChildren) return [3 /*break*/, 9];
                        categoryRepository = this.manager.getTreeRepository(models_1.ProductCategory);
                        return [4 /*yield*/, categoryRepository.find({
                                where: __assign({ id: (0, typeorm_1.In)(categoryIds) }, categoriesQuery),
                            })];
                    case 1:
                        categories = _j.sent();
                        _j.label = 2;
                    case 2:
                        _j.trys.push([2, 7, 8, 9]);
                        categories_1 = __values(categories), categories_1_1 = categories_1.next();
                        _j.label = 3;
                    case 3:
                        if (!!categories_1_1.done) return [3 /*break*/, 6];
                        category = categories_1_1.value;
                        return [4 /*yield*/, categoryRepository.findDescendantsTree(category)];
                    case 4:
                        categoryChildren = _j.sent();
                        categoryIds = categoryIds.concat((0, utils_1.fetchCategoryDescendantsIds)(categoryChildren, categoriesQuery));
                        _j.label = 5;
                    case 5:
                        categories_1_1 = categories_1.next();
                        return [3 /*break*/, 3];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_1_1 = _j.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (categories_1_1 && !categories_1_1.done && (_h = categories_1.return)) _h.call(categories_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 9:
                        if (categoryIds.length) {
                            categoryAlias_1 = "categories";
                            joinScope = __assign(__assign({}, categoriesQuery), { id: categoryIds });
                            joinWhere = Object.entries(joinScope)
                                .map(function (entry) {
                                if (Array.isArray(entry[1])) {
                                    return "".concat(categoryAlias_1, ".").concat(entry[0], " IN (:...").concat(entry[0], ")");
                                }
                                else {
                                    return "".concat(categoryAlias_1, ".").concat(entry[0], " = :").concat(entry[0]);
                                }
                            })
                                .join(" AND ");
                            joinMethod("".concat(productAlias, ".").concat(categoryAlias_1), categoryAlias_1, joinWhere, joinScope);
                        }
                        _j.label = 10;
                    case 10:
                        if (discountConditionId) {
                            queryBuilder.innerJoin("discount_condition_product", "dc_product", "dc_product.product_id = product.id AND dc_product.condition_id = :dcId", { dcId: discountConditionId });
                        }
                        if (options_.withDeleted) {
                            queryBuilder.withDeleted();
                        }
                        queryBuilder.setFindOptions(options_);
                        return [2 /*return*/, queryBuilder];
                }
            });
        });
    },
    /**
     * Upserts shipping profile for products
     * @param productIds IDs of products to update
     * @param shippingProfileId ID of shipping profile to assign to products
     * @returns updated products
     */
    upsertShippingProfile: function (productIds, shippingProfileId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createQueryBuilder()
                            .update(models_1.Product)
                            .set({ profile_id: shippingProfileId })
                            .where({ id: (0, typeorm_1.In)(productIds) })
                            .execute()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.findByIds(productIds)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    },
});
exports.default = exports.ProductRepository;
//# sourceMappingURL=product.js.map