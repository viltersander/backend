import { SelectQueryBuilder } from "typeorm";
import { Product } from "../models";
import { ExtendedFindConfig } from "../types/common";
import { ProductFilterOptions } from "../types/product";
export declare const ProductRepository: import("typeorm").Repository<Product> & {
    bulkAddToCollection(productIds: string[], collectionId: string): Promise<Product[]>;
    bulkRemoveFromCollection(productIds: string[], collectionId: string): Promise<Product[]>;
    isProductInSalesChannels(id: string, salesChannelIds: string[]): Promise<boolean>;
    findAndCount(options: ExtendedFindConfig<Product & ProductFilterOptions>, q?: string): Promise<[Product[], number]>;
    findOne(options: ExtendedFindConfig<Product & ProductFilterOptions>): Promise<Product | null>;
    prepareQueryBuilder_(options: ExtendedFindConfig<Product & ProductFilterOptions>, q?: string): Promise<SelectQueryBuilder<Product>>;
    /**
     * Upserts shipping profile for products
     * @param productIds IDs of products to update
     * @param shippingProfileId ID of shipping profile to assign to products
     * @returns updated products
     */
    upsertShippingProfile(productIds: string[], shippingProfileId: string): Promise<Product[]>;
};
export default ProductRepository;
