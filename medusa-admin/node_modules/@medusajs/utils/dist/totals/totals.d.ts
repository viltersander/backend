import { LineAllocationsMap, TaxTypes } from "@medusajs/types";
declare type LineItemTotals = {
    unit_price: number;
    quantity: number;
    subtotal: number;
    tax_total: number;
    total: number;
    original_total: number;
    original_tax_total: number;
    tax_lines: any;
    discount_total: number;
    raw_discount_total: number;
};
/**
 * Associates a line item and discount allocation.
 */
export declare type LineDiscount = {
    lineItem: any;
    variant: string;
    amount: number;
};
/**
 * Associates a line item and discount allocation.
 */
export declare type LineDiscountAmount = {
    item: any;
    amount: number;
    customAdjustmentsAmount: number;
};
declare type AllocationMapOptions = {
    exclude_gift_cards?: boolean;
    exclude_discounts?: boolean;
};
declare type GetLineItemTotalsContext = {
    includeTax?: boolean;
    calculationContext: TaxTypes.TaxCalculationContext;
    lineItemsTaxLinesMap: {
        [lineItemId: string]: any;
    };
};
declare type GetShippingMethodTotalsContext = {
    includeTax?: boolean;
    calculationContext: TaxTypes.TaxCalculationContext;
    discounts?: any;
    shippingMethodsTaxLinesMap: {
        [shippingMethodId: string]: any;
    };
};
declare type GiftCardTransaction = {
    tax_rate: number | null;
    is_taxable: boolean | null;
    amount: number;
    gift_card: any;
};
declare type ShippingMethodTotals = {
    price: number;
    tax_total: number;
    total: number;
    subtotal: number;
    original_total: number;
    original_tax_total: number;
    tax_lines: any;
};
export class TotalsService {
    /**
     * Calculate and return the items totals for either the legacy calculation or the new calculation
     * @param items
     * @param includeTax
     * @param calculationContext
     * @param taxRate
     */
    static getLineItemTotals(items: any[], { includeTax, calculationContext, lineItemsTaxLinesMap, }: GetLineItemTotalsContext): Promise<{
        [lineItemId: string]: LineItemTotals;
    }>;
    /**
     * Calculate and return the totals for an item
     * @param item
     * @param includeTax
     * @param lineItemAllocation
     * @param taxLines Only needed to force the usage of the specified tax lines, often in the case where the item does not hold the tax lines
     * @param calculationContext
     */
    protected static getLineItemTotals_(item: any, // LineItem,
    { includeTax, lineItemAllocation, taxLines, calculationContext, }: {
        includeTax?: boolean;
        lineItemAllocation: LineAllocationsMap[number];
        taxLines?: any;
        calculationContext: TaxTypes.TaxCalculationContext;
    }): Promise<LineItemTotals>;
    /**
     * Return the amount that can be refund on a line item
     * @param lineItem
     * @param calculationContext
     * @param taxRate
     */
    static getLineItemRefund(lineItem: {
        id: string;
        unit_price: number;
        includes_tax: boolean;
        quantity: number;
        tax_lines: any;
    }, { calculationContext, taxRate, }: {
        calculationContext: TaxTypes.TaxCalculationContext;
        taxRate?: number | null;
    }): number;
    /**
     * Calculate and return the gift cards totals
     * @param giftCardableAmount
     * @param giftCardTransactions
     * @param region
     * @param giftCards
     */
    static getGiftCardTotals(giftCardableAmount: number, { giftCardTransactions, region, giftCards, }: {
        region: any;
        giftCardTransactions?: GiftCardTransaction[];
        giftCards?: any;
    }): Promise<{
        total: number;
        tax_total: number;
    }>;
    /**
     * Calculate and return the gift cards totals based on their transactions
     * @param gift_card_transactions
     * @param region
     */
    static getGiftCardTransactionsTotals({ giftCardTransactions, region, }: {
        giftCardTransactions: GiftCardTransaction[];
        region: {
            gift_cards_taxable: boolean;
            tax_rate: number;
        };
    }): {
        total: number;
        tax_total: number;
    };
    /**
     * Calculate and return the shipping methods totals for either the legacy calculation or the new calculation
     * @param shippingMethods
     * @param includeTax
     * @param discounts
     * @param taxRate
     * @param calculationContext
     */
    static getShippingMethodTotals(shippingMethods: any, // ShippingMethod | ShippingMethod[],
    { includeTax, discounts, calculationContext, shippingMethodsTaxLinesMap, }: GetShippingMethodTotalsContext): Promise<{
        [shippingMethodId: string]: ShippingMethodTotals;
    }>;
    /**
     * Calculate and return the shipping method totals
     * @param shippingMethod
     * @param includeTax
     * @param calculationContext
     * @param taxLines
     * @param discounts
     */
    protected static getShippingMethodTotals_(shippingMethod: any, // ShippingMethod,
    { includeTax, calculationContext, taxLines, discounts, }: {
        includeTax?: boolean;
        calculationContext: TaxTypes.TaxCalculationContext;
        taxLines?: any;
        discounts?: any;
    }): Promise<ShippingMethodTotals>;
    /**
     * Returns the discount amount allocated to the line items of an order.
     * @param cartOrOrder - the cart or order to get line discount allocations for
     * @param discount - the discount to use as context for the calculation
     * @return the allocations that the discount has on the items in the cart or
     *   order
     */
    static getLineDiscounts(cartOrOrder: {
        items: any;
        swaps?: any;
        claims?: any;
    }, discount?: any): LineDiscountAmount[];
    /**
     * Gets a map of discounts and gift cards that apply to line items in an
     * order. The function calculates the amount of a discount or gift card that
     * applies to a specific line item.
     * @param orderOrCart - the order or cart to get an allocation map for
     * @param options - controls what should be included in allocation map
     * @return the allocation map for the line items in the cart or order.
     */
    static getAllocationMap(orderOrCart: {
        discounts?: any;
        items: any;
        swaps?: any;
        claims?: any;
    }, options?: AllocationMapOptions): Promise<LineAllocationsMap>;
}
export { };

