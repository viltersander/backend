"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var medusa_core_utils_1 = require("medusa-core-utils");
var tax_1 = require("../tax");
var TotalsService = /** @class */ (function () {
    function TotalsService() {
    }
    /**
     * Calculate and return the items totals for either the legacy calculation or the new calculation
     * @param items
     * @param includeTax
     * @param calculationContext
     * @param taxRate
     */
    TotalsService.getLineItemTotals = function (
    // items: LineItem | LineItem[],
    items, _a) {
        var includeTax = _a.includeTax, calculationContext = _a.calculationContext, lineItemsTaxLinesMap = _a.lineItemsTaxLinesMap;
        return __awaiter(this, void 0, void 0, function () {
            var itemsTotals, _i, items_1, item, lineItemAllocation, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        items = Array.isArray(items) ? items : [items];
                        itemsTotals = {};
                        _i = 0, items_1 = items;
                        _d.label = 1;
                    case 1:
                        if (!(_i < items_1.length)) return [3 /*break*/, 4];
                        item = items_1[_i];
                        lineItemAllocation = calculationContext.allocation_map[item.id] || {};
                        _b = itemsTotals;
                        _c = item.id;
                        return [4 /*yield*/, this.getLineItemTotals_(item, {
                                includeTax: includeTax,
                                lineItemAllocation: lineItemAllocation,
                                taxLines: lineItemsTaxLinesMap[item.id],
                                calculationContext: calculationContext,
                            })];
                    case 2:
                        _b[_c] = _d.sent();
                        _d.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, itemsTotals];
                }
            });
        });
    };
    /**
     * Calculate and return the totals for an item
     * @param item
     * @param includeTax
     * @param lineItemAllocation
     * @param taxLines Only needed to force the usage of the specified tax lines, often in the case where the item does not hold the tax lines
     * @param calculationContext
     */
    TotalsService.getLineItemTotals_ = function (item, // LineItem,
    _a) {
        var _b, _c, _d, _e, _f, _g;
        var includeTax = _a.includeTax, lineItemAllocation = _a.lineItemAllocation, taxLines = _a.taxLines, calculationContext = _a.calculationContext;
        return __awaiter(this, void 0, void 0, function () {
            var subtotal, raw_discount_total, discount_total, totals, taxCalculationStrategy, _h, noDiscountContext, _j;
            return __generator(this, function (_k) {
                switch (_k.label) {
                    case 0:
                        subtotal = item.unit_price * item.quantity;
                        if (item.includes_tax) {
                            subtotal = 0; // in that case we need to know the tax rate to compute it later
                        }
                        raw_discount_total = (_c = (_b = lineItemAllocation.discount) === null || _b === void 0 ? void 0 : _b.amount) !== null && _c !== void 0 ? _c : 0;
                        discount_total = Math.round(raw_discount_total);
                        totals = {
                            unit_price: item.unit_price,
                            quantity: item.quantity,
                            subtotal: subtotal,
                            discount_total: discount_total,
                            total: subtotal - discount_total,
                            original_total: subtotal,
                            original_tax_total: 0,
                            tax_total: 0,
                            tax_lines: (_d = item.tax_lines) !== null && _d !== void 0 ? _d : [],
                            raw_discount_total: raw_discount_total,
                        };
                        if (includeTax) {
                            totals.tax_lines = totals.tax_lines.length
                                ? totals.tax_lines
                                // : (taxLines as LineItemTaxLine[])
                                : taxLines;
                            if (!totals.tax_lines && item.variant_id) {
                                throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.UNEXPECTED_STATE, "Tax Lines must be joined to calculate taxes");
                            }
                        }
                        if (item.is_return) {
                            if (!(0, medusa_core_utils_1.isDefined)(item.tax_lines) && item.variant_id) {
                                throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.UNEXPECTED_STATE, "Return Line Items must join tax lines");
                            }
                        }
                        if (!(((_e = totals.tax_lines) === null || _e === void 0 ? void 0 : _e.length) > 0)) return [3 /*break*/, 3];
                        taxCalculationStrategy = calculationContext === null || calculationContext === void 0 ? void 0 : calculationContext.tax_calculation_strategy;
                        _h = totals;
                        return [4 /*yield*/, taxCalculationStrategy.calculate([item], totals.tax_lines, calculationContext)];
                    case 1:
                        _h.tax_total =
                            (_f = (_k.sent())) !== null && _f !== void 0 ? _f : 0;
                        noDiscountContext = __assign(__assign({}, calculationContext), { allocation_map: {} });
                        _j = totals;
                        return [4 /*yield*/, taxCalculationStrategy.calculate([item], totals.tax_lines, noDiscountContext)];
                    case 2:
                        _j.original_tax_total =
                            (_g = (_k.sent())) !== null && _g !== void 0 ? _g : 0;
                        if (item.includes_tax) {
                            totals.subtotal +=
                                totals.unit_price * totals.quantity - totals.original_tax_total;
                            totals.total += totals.subtotal;
                            totals.original_total += totals.subtotal;
                        }
                        totals.total += totals.tax_total;
                        totals.original_total += totals.original_tax_total;
                        _k.label = 3;
                    case 3: return [2 /*return*/, totals];
                }
            });
        });
    };
    /**
     * Return the amount that can be refund on a line item
     * @param lineItem
     * @param calculationContext
     * @param taxRate
     */
    TotalsService.getLineItemRefund = function (lineItem, _a) {
        var _b, _c;
        var calculationContext = _a.calculationContext, taxRate = _a.taxRate;
        var includesTax = lineItem.includes_tax;
        var discountAmount = (((_c = (_b = calculationContext.allocation_map[lineItem.id]) === null || _b === void 0 ? void 0 : _b.discount) === null || _c === void 0 ? void 0 : _c.unit_amount) ||
            0) * lineItem.quantity;
        if (!(0, medusa_core_utils_1.isDefined)(lineItem.tax_lines)) {
            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.UNEXPECTED_STATE, "Cannot compute line item refund amount, tax lines are missing from the line item");
        }
        var totalTaxRate = lineItem.tax_lines.reduce(function (acc, next) {
            return acc + next.rate / 100;
        }, 0);
        var taxAmountIncludedInPrice = !includesTax
            ? 0
            : Math.round((0, tax_1.calculatePriceTaxAmount)({
                price: lineItem.unit_price,
                taxRate: totalTaxRate,
                includesTax: includesTax,
            }));
        var lineSubtotal = (lineItem.unit_price - taxAmountIncludedInPrice) * lineItem.quantity -
            discountAmount;
        var taxTotal = lineItem.tax_lines.reduce(function (acc, next) {
            return acc + Math.round(lineSubtotal * (next.rate / 100));
        }, 0);
        return lineSubtotal + taxTotal;
    };
    /**
     * Calculate and return the gift cards totals
     * @param giftCardableAmount
     * @param giftCardTransactions
     * @param region
     * @param giftCards
     */
    TotalsService.getGiftCardTotals = function (giftCardableAmount, _a) {
        var giftCardTransactions = _a.giftCardTransactions, region = _a.region, giftCards = _a.giftCards;
        return __awaiter(this, void 0, void 0, function () {
            var result, _b, totalGiftCardBalance, totalTaxFromGiftCards;
            return __generator(this, function (_c) {
                if (!giftCards && !giftCardTransactions) {
                    throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.UNEXPECTED_STATE, "Cannot calculate the gift cart totals. Neither the gift cards or gift card transactions have been provided");
                }
                if (giftCardTransactions === null || giftCardTransactions === void 0 ? void 0 : giftCardTransactions.length) {
                    return [2 /*return*/, this.getGiftCardTransactionsTotals({
                            giftCardTransactions: giftCardTransactions,
                            region: region,
                        })];
                }
                result = {
                    total: 0,
                    tax_total: 0,
                };
                if (!(giftCards === null || giftCards === void 0 ? void 0 : giftCards.length)) {
                    return [2 /*return*/, result];
                }
                _b = giftCards.reduce(function (acc, giftCard) {
                    var taxableAmount = 0;
                    acc.totalGiftCardBalance += giftCard.balance;
                    taxableAmount = Math.min(acc.giftCardableBalance, giftCard.balance);
                    // skip tax, if the taxable amount is not a positive number or tax rate is not set
                    if (taxableAmount <= 0 || !giftCard.tax_rate) {
                        return acc;
                    }
                    var taxAmountFromGiftCard = Math.round(taxableAmount * (giftCard.tax_rate / 100));
                    acc.totalTaxFromGiftCards += taxAmountFromGiftCard;
                    // Update the balance, pass it over to the next gift card (if any) for calculating tax on balance.
                    acc.giftCardableBalance -= taxableAmount;
                    return acc;
                }, {
                    totalGiftCardBalance: 0,
                    totalTaxFromGiftCards: 0,
                    giftCardableBalance: giftCardableAmount,
                }), totalGiftCardBalance = _b.totalGiftCardBalance, totalTaxFromGiftCards = _b.totalTaxFromGiftCards;
                result.tax_total = Math.round(totalTaxFromGiftCards);
                result.total = Math.min(giftCardableAmount, totalGiftCardBalance);
                return [2 /*return*/, result];
            });
        });
    };
    /**
     * Calculate and return the gift cards totals based on their transactions
     * @param gift_card_transactions
     * @param region
     */
    TotalsService.getGiftCardTransactionsTotals = function (_a) {
        var giftCardTransactions = _a.giftCardTransactions, region = _a.region;
        return giftCardTransactions.reduce(function (acc, next) {
            var _a, _b, _c;
            var taxMultiplier = (next.tax_rate || 0) / 100;
            // Previously we did not record whether a gift card was taxable or not.
            // All gift cards where is_taxable === null are from the old system,
            // where we defaulted to taxable gift cards.
            //
            // This is a backwards compatability fix for orders that were created
            // before we added the gift card tax rate.
            // We prioritize the giftCard.tax_rate as we create a snapshot of the tax
            // on order creation to create gift cards on the gift card itself.
            // If its created outside of the order, we refer to the region tax
            if (next.is_taxable === null) {
                if ((region === null || region === void 0 ? void 0 : region.gift_cards_taxable) || ((_a = next.gift_card) === null || _a === void 0 ? void 0 : _a.tax_rate)) {
                    taxMultiplier = ((_c = (_b = next.gift_card) === null || _b === void 0 ? void 0 : _b.tax_rate) !== null && _c !== void 0 ? _c : region.tax_rate) / 100;
                }
            }
            return {
                total: acc.total + next.amount,
                tax_total: Math.round(acc.tax_total + next.amount * taxMultiplier),
            };
        }, {
            total: 0,
            tax_total: 0,
        });
    };
    /**
     * Calculate and return the shipping methods totals for either the legacy calculation or the new calculation
     * @param shippingMethods
     * @param includeTax
     * @param discounts
     * @param taxRate
     * @param calculationContext
     */
    TotalsService.getShippingMethodTotals = function (shippingMethods, // ShippingMethod | ShippingMethod[],
    _a) {
        var includeTax = _a.includeTax, discounts = _a.discounts, calculationContext = _a.calculationContext, shippingMethodsTaxLinesMap = _a.shippingMethodsTaxLinesMap;
        return __awaiter(this, void 0, void 0, function () {
            var shippingMethodsTotals, _i, shippingMethods_1, shippingMethod, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        shippingMethods = Array.isArray(shippingMethods)
                            ? shippingMethods
                            : [shippingMethods];
                        shippingMethodsTotals = {};
                        _i = 0, shippingMethods_1 = shippingMethods;
                        _d.label = 1;
                    case 1:
                        if (!(_i < shippingMethods_1.length)) return [3 /*break*/, 4];
                        shippingMethod = shippingMethods_1[_i];
                        _b = shippingMethodsTotals;
                        _c = shippingMethod.id;
                        return [4 /*yield*/, this.getShippingMethodTotals_(shippingMethod, {
                                includeTax: includeTax,
                                calculationContext: calculationContext,
                                taxLines: shippingMethodsTaxLinesMap[shippingMethod.id],
                                discounts: discounts,
                            })];
                    case 2:
                        _b[_c] =
                            _d.sent();
                        _d.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, shippingMethodsTotals];
                }
            });
        });
    };
    /**
     * Calculate and return the shipping method totals
     * @param shippingMethod
     * @param includeTax
     * @param calculationContext
     * @param taxLines
     * @param discounts
     */
    TotalsService.getShippingMethodTotals_ = function (shippingMethod, // ShippingMethod,
    _a) {
        var _b, _c;
        var includeTax = _a.includeTax, calculationContext = _a.calculationContext, taxLines = _a.taxLines, discounts = _a.discounts;
        return __awaiter(this, void 0, void 0, function () {
            var totals, calculationContext_, includesTax, taxCalculationStrategy, _d, hasFreeShipping;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        totals = {
                            price: shippingMethod.price,
                            original_total: shippingMethod.price,
                            total: shippingMethod.price,
                            subtotal: shippingMethod.price,
                            original_tax_total: 0,
                            tax_total: 0,
                            tax_lines: (_b = shippingMethod.tax_lines) !== null && _b !== void 0 ? _b : [],
                        };
                        if (includeTax) {
                            totals.tax_lines = totals.tax_lines.length
                                ? totals.tax_lines
                                // : (taxLines as ShippingMethodTaxLine[])
                                : taxLines;
                            if (!totals.tax_lines) {
                                throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.UNEXPECTED_STATE, "Tax Lines must be joined to calculate taxes");
                            }
                        }
                        calculationContext_ = __assign(__assign({}, calculationContext), { shipping_methods: [shippingMethod] });
                        if (!totals.tax_lines.length) return [3 /*break*/, 2];
                        includesTax = shippingMethod.includes_tax;
                        taxCalculationStrategy = calculationContext === null || calculationContext === void 0 ? void 0 : calculationContext.tax_calculation_strategy;
                        _d = totals;
                        return [4 /*yield*/, taxCalculationStrategy.calculate([], totals.tax_lines, calculationContext_)];
                    case 1:
                        _d.original_tax_total =
                            (_c = (_e.sent())) !== null && _c !== void 0 ? _c : 0;
                        totals.tax_total = totals.original_tax_total;
                        if (includesTax) {
                            totals.subtotal -= totals.tax_total;
                        }
                        else {
                            totals.original_total += totals.original_tax_total;
                            totals.total += totals.tax_total;
                        }
                        _e.label = 2;
                    case 2:
                        hasFreeShipping = discounts === null || discounts === void 0 ? void 0 : discounts.some(
                        // (d) => d.rule.type === DiscountRuleType.FREE_SHIPPING
                        function (d) { return d.rule.type === "free_shipping"; });
                        if (hasFreeShipping) {
                            totals.total = 0;
                            totals.subtotal = 0;
                            totals.tax_total = 0;
                        }
                        return [2 /*return*/, totals];
                }
            });
        });
    };
    /**
     * Returns the discount amount allocated to the line items of an order.
     * @param cartOrOrder - the cart or order to get line discount allocations for
     * @param discount - the discount to use as context for the calculation
     * @return the allocations that the discount has on the items in the cart or
     *   order
     */
    TotalsService.getLineDiscounts = function (cartOrOrder, discount // Discount
    ) {
        var _a, _b, _c;
        // let merged: LineItem[] = [...(cartOrOrder.items ?? [])]
        var merged = __spreadArray([], ((_a = cartOrOrder.items) !== null && _a !== void 0 ? _a : []), true);
        // merge items from order with items from order swaps
        if ("swaps" in cartOrOrder && ((_b = cartOrOrder.swaps) === null || _b === void 0 ? void 0 : _b.length)) {
            for (var _i = 0, _d = cartOrOrder.swaps; _i < _d.length; _i++) {
                var s = _d[_i];
                merged = __spreadArray(__spreadArray([], merged, true), s.additional_items, true);
            }
        }
        if ("claims" in cartOrOrder && ((_c = cartOrOrder.claims) === null || _c === void 0 ? void 0 : _c.length)) {
            for (var _e = 0, _f = cartOrOrder.claims; _e < _f.length; _e++) {
                var c = _f[_e];
                merged = __spreadArray(__spreadArray([], merged, true), c.additional_items, true);
            }
        }
        return merged.map(function (item) {
            var adjustments = (item === null || item === void 0 ? void 0 : item.adjustments) || [];
            var discountAdjustments = discount
                ? adjustments.filter(function (adjustment) { return adjustment.discount_id === discount.id; })
                : [];
            var customAdjustments = adjustments.filter(function (adjustment) { return adjustment.discount_id === null; });
            var sumAdjustments = function (total, adjustment) { return total + adjustment.amount; };
            return {
                item: item,
                amount: item.allow_discounts
                    ? discountAdjustments.reduce(sumAdjustments, 0)
                    : 0,
                customAdjustmentsAmount: customAdjustments.reduce(sumAdjustments, 0),
            };
        });
    };
    /**
     * Gets a map of discounts and gift cards that apply to line items in an
     * order. The function calculates the amount of a discount or gift card that
     * applies to a specific line item.
     * @param orderOrCart - the order or cart to get an allocation map for
     * @param options - controls what should be included in allocation map
     * @return the allocation map for the line items in the cart or order.
     */
    TotalsService.getAllocationMap = function (orderOrCart, options) {
        var _a;
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var allocationMap, discount, lineDiscounts, _i, lineDiscounts_1, ld, adjustmentAmount;
            return __generator(this, function (_b) {
                allocationMap = {};
                if (!options.exclude_discounts) {
                    discount = (_a = orderOrCart.discounts) === null || _a === void 0 ? void 0 : _a.find(
                    // ({ rule }) => rule.type !== DiscountRuleType.FREE_SHIPPING
                    function (_a) {
                        var rule = _a.rule;
                        return rule.type !== "free_shipping";
                    });
                    lineDiscounts = this.getLineDiscounts(orderOrCart, discount);
                    for (_i = 0, lineDiscounts_1 = lineDiscounts; _i < lineDiscounts_1.length; _i++) {
                        ld = lineDiscounts_1[_i];
                        adjustmentAmount = ld.amount + ld.customAdjustmentsAmount;
                        if (allocationMap[ld.item.id]) {
                            allocationMap[ld.item.id].discount = {
                                amount: adjustmentAmount,
                                /**
                                 * Used for the refund computation
                                 */
                                unit_amount: adjustmentAmount / ld.item.quantity,
                            };
                        }
                        else {
                            allocationMap[ld.item.id] = {
                                discount: {
                                    amount: adjustmentAmount,
                                    /**
                                     * Used for the refund computation
                                     */
                                    unit_amount: Math.round(adjustmentAmount / ld.item.quantity),
                                },
                            };
                        }
                    }
                }
                return [2 /*return*/, allocationMap];
            });
        });
    };
    return TotalsService;
}());
exports.default = TotalsService;
//# sourceMappingURL=totals.js.map