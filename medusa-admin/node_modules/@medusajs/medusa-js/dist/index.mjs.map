{"version":3,"sources":["../src/error.ts","../src/key-manager.ts","../src/request.ts","../src/resources/base.ts","../src/resources/addresses.ts","../src/resources/auth.ts","../src/resources/line-items.ts","../src/resources/carts.ts","../src/resources/collections.ts","../src/resources/customers.ts","../src/resources/payment-methods.ts","../src/resources/gift-cards.ts","../src/resources/order-edits.ts","../src/resources/orders.ts","../src/resources/payment-collections.ts","../src/resources/product-categories.ts","../src/resources/product-tags.ts","../src/resources/product-types.ts","../src/resources/products.ts","../src/resources/product-variants.ts","../src/resources/regions.ts","../src/resources/return-reasons.ts","../src/resources/returns.ts","../src/resources/shipping-options.ts","../src/resources/swaps.ts","../src/resources/admin/auth.ts","../src/resources/admin/batch-jobs.ts","../src/utils.ts","../src/resources/admin/collections.ts","../src/resources/admin/currencies.ts","../src/resources/admin/customer-groups.ts","../src/resources/admin/customers.ts","../src/resources/admin/discounts.ts","../src/resources/admin/draft-orders.ts","../src/resources/admin/gift-cards.ts","../src/resources/admin/inventory-item.ts","../src/resources/admin/invites.ts","../src/resources/admin/notes.ts","../src/resources/admin/notifications.ts","../src/resources/admin/order-edits.ts","../src/resources/admin/orders.ts","../src/resources/admin/payment-collections.ts","../src/resources/admin/payments.ts","../src/resources/admin/price-lists.ts","../src/resources/admin/product-categories.ts","../src/resources/admin/product-tags.ts","../src/resources/admin/product-types.ts","../src/resources/admin/products.ts","../src/resources/admin/publishable-api-keys.ts","../src/resources/admin/regions.ts","../src/resources/admin/reservations.ts","../src/resources/admin/return-reasons.ts","../src/resources/admin/returns.ts","../src/resources/admin/sales-channels.ts","../src/resources/admin/shipping-options.ts","../src/resources/admin/shipping-profiles.ts","../src/resources/admin/stock-locations.ts","../src/resources/admin/store.ts","../src/resources/admin/swaps.ts","../src/resources/admin/tax-rates.ts","../src/resources/admin/uploads.ts","../src/resources/admin/users.ts","../src/resources/admin/variants.ts","../src/resources/admin/index.ts","../src/index.ts"],"sourcesContent":["\"use strict\"\n/**\n * MedusaError is the base error for every other MedusaError\n */\nexport default class MedusaError extends Error {\n  constructor() {\n    super()\n  }\n\n  public static factory(type: ErrorType): MedusaError {\n    switch (type) {\n      case ErrorType.INVALID_REQUEST:\n        return new MedusaInvalidRequestError()\n      case ErrorType.AUTHENTICATION:\n        return new MedusaAuthenticationError()\n      case ErrorType.API:\n        return new MedusaAPIError()\n      case ErrorType.PERMISSION:\n        return new MedusaPermissionError()\n      case ErrorType.CONNECTION:\n        return new MedusaConnectionError()\n    }\n  }\n}\n\nenum ErrorType {\n  \"INVALID_REQUEST\",\n  \"API\",\n  \"AUTHENTICATION\",\n  \"PERMISSION\",\n  \"CONNECTION\",\n}\n\n/**\n * MedusaInvalidRequestError is raised when a request as invalid parameters.\n */\nexport class MedusaInvalidRequestError extends MedusaError {}\n\n/**\n * MedusaAPIError is raised in case no other type cover the problem\n */\nexport class MedusaAPIError extends MedusaError {}\n\n/**\n * MedusaAuthenticationError is raised when invalid credentials is used to connect to Medusa\n */\nexport class MedusaAuthenticationError extends MedusaError {}\n\n/**\n * MedusaPermissionError is raised when attempting to access a resource without permissions\n */\nexport class MedusaPermissionError extends MedusaError {}\n\n/**\n * MedusaConnectionError is raised when the Medusa servers can't be reached.\n */\nexport class MedusaConnectionError extends MedusaError {}\n","/**\n * `KeyManager` holds API keys in state.\n */\nclass KeyManager {\n  private publishableApiKey: string | null = null\n\n  /**\n   * Set a publishable api key to be sent with each request.\n   */\n  public registerPublishableApiKey(key: string) {\n    this.publishableApiKey = key\n  }\n\n  /**\n   * Retrieve the publishable api key.\n   */\n  public getPublishableApiKey() {\n    return this.publishableApiKey\n  }\n}\n\n/**\n * Export singleton instance.\n */\nexport default new KeyManager()\n","import axios, { AxiosError, AxiosInstance, AxiosRequestHeaders } from \"axios\"\nimport * as rax from \"retry-axios\"\nimport { v4 as uuidv4 } from \"uuid\"\n\nimport KeyManager from \"./key-manager\"\n\nconst unAuthenticatedAdminEndpoints = {\n  \"/admin/auth\": \"POST\",\n  \"/admin/users/password-token\": \"POST\",\n  \"/admin/users/reset-password\": \"POST\",\n  \"/admin/invites/accept\": \"POST\",\n}\n\nexport interface Config {\n  baseUrl: string\n  maxRetries: number\n  apiKey?: string\n  publishableApiKey?: string\n}\n\nexport interface RequestOptions {\n  timeout?: number\n  numberOfRetries?: number\n}\n\nexport type RequestMethod = \"DELETE\" | \"POST\" | \"GET\"\n\nconst defaultConfig = {\n  maxRetries: 0,\n  baseUrl: \"http://localhost:9000\",\n}\n\nclass Client {\n  private axiosClient: AxiosInstance\n  private config: Config\n\n  constructor(config: Config) {\n    /** @private @constant {AxiosInstance} */\n    this.axiosClient = this.createClient({ ...defaultConfig, ...config })\n\n    /** @private @constant {Config} */\n    this.config = { ...defaultConfig, ...config }\n  }\n\n  shouldRetryCondition(\n    err: AxiosError,\n    numRetries: number,\n    maxRetries: number\n  ): boolean {\n    // Obviously, if we have reached max. retries we stop\n    if (numRetries >= maxRetries) {\n      return false\n    }\n\n    // If no response, we assume a connection error and retry\n    if (!err.response) {\n      return true\n    }\n\n    // Retry on conflicts\n    if (err.response.status === 409) {\n      return true\n    }\n\n    // All 5xx errors are retried\n    // OBS: We are currently not retrying 500 requests, since our core needs proper error handling.\n    //      At the moment, 500 will be returned on all errors, that are not of type MedusaError.\n    if (err.response.status > 500 && err.response.status <= 599) {\n      return true\n    }\n\n    return false\n  }\n\n  // Stolen from https://github.com/stripe/stripe-node/blob/fd0a597064289b8c82f374f4747d634050739043/lib/utils.js#L282\n  normalizeHeaders(obj: object): Record<string, any> {\n    if (!(obj && typeof obj === \"object\")) {\n      return obj\n    }\n\n    return Object.keys(obj).reduce((result, header) => {\n      result[this.normalizeHeader(header)] = obj[header]\n      return result\n    }, {})\n  }\n\n  // Stolen from https://github.com/marten-de-vries/header-case-normalizer/blob/master/index.js#L36-L41\n  normalizeHeader(header: string): string {\n    return header\n      .split(\"-\")\n      .map(\n        (text) => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase()\n      )\n      .join(\"-\")\n  }\n\n  requiresAuthentication(path, method): boolean {\n    return (\n      path.startsWith(\"/admin\") &&\n      unAuthenticatedAdminEndpoints[path] !== method\n    )\n  }\n\n  /**\n   * Creates all the initial headers.\n   * We add the idempotency key, if the request is configured to retry.\n   * @param {object} userHeaders user supplied headers\n   * @param {Types.RequestMethod} method request method\n   * @param {string} path request path\n   * @param {object} customHeaders user supplied headers\n   * @return {object}\n   */\n  setHeaders(\n    userHeaders: RequestOptions,\n    method: RequestMethod,\n    path: string,\n    customHeaders: Record<string, any> = {}\n  ): AxiosRequestHeaders {\n    let defaultHeaders: Record<string, any> = {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    }\n\n    if (this.config.apiKey && this.requiresAuthentication(path, method)) {\n      defaultHeaders = {\n        ...defaultHeaders,\n        Authorization: `Bearer ${this.config.apiKey}`,\n      }\n    }\n\n    const publishableApiKey =\n      this.config.publishableApiKey || KeyManager.getPublishableApiKey()\n\n    if (publishableApiKey) {\n      defaultHeaders[\"x-publishable-api-key\"] = publishableApiKey\n    }\n\n    // only add idempotency key, if we want to retry\n    if (this.config.maxRetries > 0 && method === \"POST\") {\n      defaultHeaders[\"Idempotency-Key\"] = uuidv4()\n    }\n\n    return Object.assign(\n      {},\n      defaultHeaders,\n      this.normalizeHeaders(userHeaders),\n      customHeaders\n    )\n  }\n\n  /**\n   * Creates the axios client used for requests\n   * As part of the creation, we configure the retry conditions\n   * and the exponential backoff approach.\n   * @param {Config} config user supplied configurations\n   * @return {AxiosInstance}\n   */\n  createClient(config: Config): AxiosInstance {\n    const client = axios.create({\n      baseURL: config.baseUrl,\n    })\n\n    rax.attach(client)\n\n    client.defaults.raxConfig = {\n      instance: client,\n      retry: config.maxRetries,\n      backoffType: \"exponential\",\n      shouldRetry: (err: AxiosError): boolean => {\n        const cfg = rax.getConfig(err)\n        if (cfg) {\n          return this.shouldRetryCondition(\n            err,\n            cfg.currentRetryAttempt ?? 1,\n            cfg.retry ?? 3\n          )\n        } else {\n          return false\n        }\n      },\n    }\n\n    return client\n  }\n\n  /**\n   * Axios request\n   * @param method request method\n   * @param path request path\n   * @param payload request payload\n   * @param options axios configuration\n   * @param customHeaders custom request headers\n   * @return\n   */\n  async request(\n    method: RequestMethod,\n    path: string,\n    payload: Record<string, any> = {},\n    options: RequestOptions = {},\n    customHeaders: Record<string, any> = {}\n  ): Promise<any> {\n    const reqOpts = {\n      method,\n      withCredentials: true,\n      url: path,\n      json: true,\n      headers: this.setHeaders(options, method, path, customHeaders),\n    }\n\n    if ([\"POST\", \"DELETE\"].includes(method)) {\n      reqOpts[\"data\"] = payload\n    }\n\n    // e.g. data = { cart: { ... } }, response = { status, headers, ... }\n    const { data, ...response } = await this.axiosClient(reqOpts)\n\n    // e.g. would return an object like of this shape { cart, response }\n    return { ...data, response }\n  }\n}\n\nexport default Client\n","import Client from \"../request\"\n\nexport default class BaseResource {\n  public client: Client\n\n  constructor(client: Client) {\n    this.client = client\n  }\n}\n","import {\n  StoreCustomersRes,\n  StorePostCustomersCustomerAddressesAddressReq,\n  StorePostCustomersCustomerAddressesReq,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass AddressesResource extends BaseResource {\n  /**\n   * Adds an address to a customers saved addresses\n   * @param {StorePostCustomersCustomerAddressesReq} payload contains information to create an address\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCustomersRes>}\n   */\n  addAddress(\n    payload: StorePostCustomersCustomerAddressesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersRes> {\n    const path = `/store/customers/me/addresses`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Deletes an address of a customer\n   * @param {string} address_id id of the address to delete\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCustomersRes>}\n   */\n  deleteAddress(\n    address_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersRes> {\n    const path = `/store/customers/me/addresses/${address_id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Update an address of a customer\n   * @param {string} address_id id of customer\n   * @param {StorePostCustomersCustomerAddressesAddressReq} payload address update\n   * @param customHeaders\n   * @return {StoreCustomersRes}\n   */\n  updateAddress(\n    address_id: string,\n    payload: StorePostCustomersCustomerAddressesAddressReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersRes> {\n    const path = `/store/customers/me/addresses/${address_id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AddressesResource\n","import {\n  StoreGetAuthEmailRes,\n  StorePostAuthReq,\n  StoreAuthRes,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass AuthResource extends BaseResource {\n  /**\n   * @description Authenticates a customer using email and password combination\n   * @param {StorePostAuthReq} payload authentication payload\n   * @param customHeaders\n   * @return {ResponsePromise<StoreAuthRes>}\n   */\n  authenticate(payload: StorePostAuthReq, customHeaders: Record<string, any> = {}): ResponsePromise<StoreAuthRes> {\n    const path = `/store/auth`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Removes authentication session\n   * @return {ResponsePromise<void>}\n   */\n   deleteSession(customHeaders: Record<string, any> = {}): ResponsePromise<void> {\n    const path = `/store/auth`\n    return this.client.request(\"DELETE\", path, {}, {}, customHeaders)\n  }\n\n  /**\n   * @description Retrieves an authenticated session\n   * Usually used to check if authenticated session is alive.\n   * @param customHeaders\n   * @return {ResponsePromise<StoreAuthRes>}\n   */\n  getSession(customHeaders: Record<string, any> = {}): ResponsePromise<StoreAuthRes> {\n    const path = `/store/auth`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Check if email exists\n   * @param {string} email is required\n   * @param customHeaders\n   * @return {ResponsePromise<StoreGetAuthEmailRes>}\n   */\n  exists(email: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreGetAuthEmailRes> {\n    const path = `/store/auth/${email}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AuthResource\n","import {\n  StoreCartsRes,\n  StorePostCartsCartLineItemsItemReq,\n  StorePostCartsCartLineItemsReq,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass LineItemsResource extends BaseResource {\n  /**\n   * Creates a line-item for a cart\n   * @param {string} cart_id id of cart\n   * @param {StorePostCartsCartLineItemsReq} payload details needed to create a line-item\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  create(\n    cart_id: string,\n    payload: StorePostCartsCartLineItemsReq,\n    customHeaders: Record<string, any> = {}): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/line-items`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Updates a line-item.\n   * Only quantity updates are allowed\n   * @param {string} cart_id id of cart\n   * @param {string} line_id id of item to update\n   * @param {StorePostCartsCartLineItemsItemReq} payload details needed to update a line-item\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  update(\n    cart_id: string,\n    line_id: string,\n    payload: StorePostCartsCartLineItemsItemReq,\n    customHeaders: Record<string, any> = {}): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/line-items/${line_id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Remove a line-item from a cart\n   * @param {string} cart_id id of cart\n   * @param {string} line_id id of item to remove\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  delete(cart_id: string, line_id: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/line-items/${line_id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default LineItemsResource\n","import {\n  StoreCartsRes,\n  StoreCompleteCartRes,\n  StorePostCartReq,\n  StorePostCartsCartPaymentSessionReq,\n  StorePostCartsCartPaymentSessionUpdateReq,\n  StorePostCartsCartReq,\n  StorePostCartsCartShippingMethodReq,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\nimport LineItemsResource from \"./line-items\"\n\nclass CartsResource extends BaseResource {\n  public lineItems = new LineItemsResource(this.client)\n\n  /**\n   * Adds a shipping method to cart\n   * @param {string} cart_id Id of cart\n   * @param {StorePostCartsCartShippingMethodReq} payload Containg id of shipping option and optional data\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  addShippingMethod(\n    cart_id: string,\n    payload: StorePostCartsCartShippingMethodReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/shipping-methods`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Completes a cart.\n   * Payment authorization is attempted and if more work is required, we simply return the cart for further updates.\n   * If payment is authorized and order is not yet created, we make sure to do so.\n   * The completion of a cart can be performed idempotently with a provided header Idempotency-Key.\n   * If not provided, we will generate one for the request.\n   * @param {string} cart_id is required\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCompleteCartRes>}\n   */\n  complete(\n    cart_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCompleteCartRes> {\n    const path = `/store/carts/${cart_id}/complete`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Creates a cart\n   * @param {StorePostCartReq} payload is optional and can contain a region_id and items.\n   * The cart will contain the payload, if provided. Otherwise it will be empty\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  create(\n    payload?: StorePostCartReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Creates payment sessions.\n   * Initializes the payment sessions that can be used to pay for the items of the cart.\n   * This is usually called when a customer proceeds to checkout.\n   * @param {string} cart_id is required\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  createPaymentSessions(\n    cart_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/payment-sessions`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Removes a discount from cart.\n   * @param {string} cart_id is required\n   * @param {string} code discount code to remove\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  deleteDiscount(\n    cart_id: string,\n    code: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/discounts/${code}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Removes a payment session from a cart.\n   * Can be useful in case a payment has failed\n   * @param {string} cart_id is required\n   * @param {string} provider_id the provider id of the session e.g. \"stripe\"\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  deletePaymentSession(\n    cart_id: string,\n    provider_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/payment-sessions/${provider_id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Refreshes a payment session.\n   * @param {string} cart_id is required\n   * @param {string} provider_id the provider id of the session e.g. \"stripe\"\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  refreshPaymentSession(\n    cart_id: string,\n    provider_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/payment-sessions/${provider_id}/refresh`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieves a cart\n   * @param {string} cart_id is required\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  retrieve(\n    cart_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Refreshes a payment session.\n   * @param {string} cart_id is required\n   * @param {StorePostCartsCartPaymentSessionReq} payload the provider id of the session e.g. \"stripe\"\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  setPaymentSession(\n    cart_id: string,\n    payload: StorePostCartsCartPaymentSessionReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/payment-session`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Updates a cart\n   * @param {string} cart_id is required\n   * @param {StorePostCartsCartReq} payload is required and can contain region_id, email, billing and shipping address\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  update(\n    cart_id: string,\n    payload: StorePostCartsCartReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Updates the payment method\n   * @param {string} cart_id is required\n   * @param {string} provider_id is required\n   * @param {StorePostCartsCartPaymentSessionUpdateReq} payload is required\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  updatePaymentSession(\n    cart_id: string,\n    provider_id: string,\n    payload: StorePostCartsCartPaymentSessionUpdateReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/payment-sessions/${provider_id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default CartsResource\n","import {\n  StoreCollectionsRes,\n  StoreCollectionsListRes,\n  StoreGetCollectionsParams,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass CollectionsResource extends BaseResource {\n  /**\n   * @description Retrieves a single collection\n   * @param {string} id id of the collection\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCollectionsRes>}\n   */\n  retrieve(id: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreCollectionsRes> {\n    const path = `/store/collections/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Retrieves a list of collections\n   * @param {string} query is optional. Can contain a limit and offset for the returned list\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCollectionsListRes>}\n   */\n  list(\n    query?: StoreGetCollectionsParams,\n    customHeaders: Record<string, any> = {}): ResponsePromise<StoreCollectionsListRes> {\n    let path = `/store/collections`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/store/collections?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default CollectionsResource\n","import {\n  StoreCustomersListOrdersRes,\n  StoreCustomersRes,\n  StoreGetCustomersCustomerOrdersParams,\n  StorePostCustomersCustomerPasswordTokenReq,\n  StorePostCustomersCustomerReq,\n  StorePostCustomersReq,\n  StorePostCustomersResetPasswordReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport AddressesResource from \"./addresses\"\nimport BaseResource from \"./base\"\nimport PaymentMethodsResource from \"./payment-methods\"\n\nclass CustomerResource extends BaseResource {\n  public paymentMethods = new PaymentMethodsResource(this.client)\n  public addresses = new AddressesResource(this.client)\n\n  /**\n   * Creates a customer\n   * @param {StorePostCustomersReq} payload information of customer\n   * @param customHeaders\n   * @return { ResponsePromise<StoreCustomersRes>}\n   */\n  create(\n    payload: StorePostCustomersReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersRes> {\n    const path = `/store/customers`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieves the customer that is currently logged\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCustomersRes>}\n   */\n  retrieve(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersRes> {\n    const path = `/store/customers/me`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Updates a customer\n   * @param {StorePostCustomersCustomerReq} payload information to update customer with\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCustomersRes>}\n   */\n  update(\n    payload: StorePostCustomersCustomerReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersRes> {\n    const path = `/store/customers/me`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve customer orders\n   * @param {StoreGetCustomersCustomerOrdersParams} params optional params to retrieve orders\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCustomersListOrdersRes>}\n   */\n  listOrders(\n    params?: StoreGetCustomersCustomerOrdersParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersListOrdersRes> {\n    let path = `/store/customers/me/orders`\n    if (params) {\n      const query = qs.stringify(params)\n      if (query) {\n        path += `?${query}`\n      }\n    }\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Resets customer password\n   * @param {StorePostCustomersCustomerPasswordTokenReq} payload info used to reset customer password\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCustomersRes>}\n   */\n  resetPassword(\n    payload: StorePostCustomersResetPasswordReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersRes> {\n    const path = `/store/customers/password-reset`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Generates a reset password token, which can be used to reset the password.\n   * The token is not returned but should be sent out to the customer in an email.\n   * @param {StorePostCustomersCustomerPasswordTokenReq} payload info used to generate token\n   * @param customHeaders\n   * @return {ResponsePromise}\n   */\n  generatePasswordToken(\n    payload: StorePostCustomersCustomerPasswordTokenReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise {\n    const path = `/store/customers/password-token`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default CustomerResource\n","import { StoreCustomersListPaymentMethodsRes } from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass PaymentMethodsResource extends BaseResource {\n  /**\n   * Lists customer payment methods\n   * @param {string} id id of cart\n   * @param customHeaders\n   * @return {StoreCustomersListPaymentMethodsRes}\n   */\n  list(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersListPaymentMethodsRes> {\n    const path = `/store/customers/me/payment-methods`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default PaymentMethodsResource\n","import { StoreGiftCardsRes } from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass GiftCardsResource extends BaseResource {\n  /**\n   * @description Retrieves a single GiftCard\n   * @param {string} code code of the gift card\n   * @param customHeaders\n   * @return {ResponsePromise<StoreGiftCardsRes>}\n   */\n  retrieve(code: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreGiftCardsRes> {\n    const path = `/store/gift-cards/${code}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default GiftCardsResource\n","import {\n  StoreOrderEditsRes,\n  StorePostOrderEditsOrderEditDecline,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass OrderEditsResource extends BaseResource {\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreOrderEditsRes> {\n    const path = `/store/order-edits/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  decline(\n    id: string,\n    payload: StorePostOrderEditsOrderEditDecline,\n    customHeaders: Record<string, any> = {}\n  ) {\n    const path = `/store/order-edits/${id}/decline`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  complete(id: string, customHeaders: Record<string, any> = {}) {\n    const path = `/store/order-edits/${id}/complete`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default OrderEditsResource\n","import {\n  StoreGetOrdersParams,\n  StoreOrdersRes,\n  StorePostCustomersCustomerAcceptClaimReq,\n  StorePostCustomersCustomerOrderClaimReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass OrdersResource extends BaseResource {\n  /**\n   * @description Retrieves an order\n   * @param {string} id is required\n   * @param customHeaders\n   * @return {ResponsePromise<StoreOrdersRes>}\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreOrdersRes> {\n    const path = `/store/orders/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Retrieves an order by cart id\n   * @param {string} cart_id is required\n   * @param customHeaders\n   * @return {ResponsePromise<StoreOrdersRes>}\n   */\n  retrieveByCartId(\n    cart_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreOrdersRes> {\n    const path = `/store/orders/cart/${cart_id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Look up an order using order details\n   * @param {StoreGetOrdersParams} payload details used to look up the order\n   * @param customHeaders\n   * @return {ResponsePromise<StoreOrdersRes>}\n   */\n  lookupOrder(\n    payload: StoreGetOrdersParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreOrdersRes> {\n    let path = `/store/orders?`\n\n    const queryString = qs.stringify(payload)\n    path = `/store/orders?${queryString}`\n\n    return this.client.request(\"GET\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Request access to a list of orders\n   * @param {string[]} payload display ids of orders to request\n   * @param customHeaders\n   * @return {ResponsePromise}\n   */\n  requestCustomerOrders(\n    payload: StorePostCustomersCustomerOrderClaimReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise {\n    const path = `/store/orders/batch/customer/token`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Grant access to a list of orders\n   * @param {string} payload signed token to grant access\n   * @param customHeaders\n   * @return {ResponsePromise}\n   */\n  confirmRequest(\n    payload: StorePostCustomersCustomerAcceptClaimReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise {\n    const path = `/store/orders/customer/confirm`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default OrdersResource\n","import {\n  StoreGetPaymentCollectionsParams,\n  StorePaymentCollectionSessionsReq,\n  StorePaymentCollectionsRes,\n  StorePaymentCollectionsSessionRes,\n  StorePostPaymentCollectionsBatchSessionsAuthorizeReq,\n  StorePostPaymentCollectionsBatchSessionsReq,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\nimport qs from \"qs\"\n\nclass PaymentCollectionsResource extends BaseResource {\n  retrieve(\n    id: string,\n    query?: StoreGetPaymentCollectionsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StorePaymentCollectionsRes> {\n    let path = `/store/payment-collections/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  authorizePaymentSession(\n    id: string,\n    session_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StorePaymentCollectionsRes> {\n    const path = `/store/payment-collections/${id}/sessions/${session_id}/authorize`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  authorizePaymentSessionsBatch(\n    id: string,\n    payload: StorePostPaymentCollectionsBatchSessionsAuthorizeReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StorePaymentCollectionsRes> {\n    const path = `/store/payment-collections/${id}/sessions/batch/authorize`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  managePaymentSessionsBatch(\n    id: string,\n    payload: StorePostPaymentCollectionsBatchSessionsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StorePaymentCollectionsRes> {\n    const path = `/store/payment-collections/${id}/sessions/batch`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  managePaymentSession(\n    id: string,\n    payload: StorePaymentCollectionSessionsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StorePaymentCollectionsRes> {\n    const path = `/store/payment-collections/${id}/sessions`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  refreshPaymentSession(\n    id: string,\n    session_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StorePaymentCollectionsSessionRes> {\n    const path = `/store/payment-collections/${id}/sessions/${session_id}`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default PaymentCollectionsResource\n","import {\n  StoreGetProductCategoriesParams,\n  StoreGetProductCategoriesRes,\n  StoreGetProductCategoriesCategoryParams,\n  StoreGetProductCategoriesCategoryRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass ProductCategoriesResource extends BaseResource {\n  /**\n   * @description Retrieves a single product category\n   * @param {string} id - id of the product category\n   * @param {string} query is optional. Can contain a fields or relations for the returned list\n   * @param customHeaders\n   * @return {ResponsePromise<StoreGetProductCategoriesCategoryRes>}\n   */\n  retrieve(\n    id: string,\n    query?: StoreGetProductCategoriesCategoryParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreGetProductCategoriesCategoryRes> {\n    let path = `/store/product-categories/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `${path}?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Retrieves a list of product categories\n   * @param {string} query is optional. Can contain a limit and offset for the returned list\n   * @param customHeaders\n   * @return {ResponsePromise<StoreGetProductCategoriesRes>}\n   */\n  list(\n    query?: StoreGetProductCategoriesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreGetProductCategoriesRes> {\n    let path = `/store/product-categories`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `${path}?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default ProductCategoriesResource\n","import {\n  StoreGetProductTagsParams,\n  StoreProductTagsListRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass ProductTagsResource extends BaseResource {\n  /**\n   * @description Retrieves a list of product tags\n   * @param {StoreGetProductTagsParams} query is optional. Can contain a limit and offset for the returned list\n   * @param customHeaders\n   * @return {ResponsePromise<StoreProductTagsListRes>}\n   */\n  list(\n    query?: StoreGetProductTagsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreProductTagsListRes> {\n    let path = `/store/product-tags`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default ProductTagsResource\n","import {\n  StoreGetProductTypesParams,\n  StoreProductTypesListRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass ProductTypesResource extends BaseResource {\n  /**\n   * @description Retrieves a list of product types\n   * @param {StoreGetProductTypesParams} query is optional. Can contain a limit and offset for the returned list\n   * @param customHeaders\n   * @return {ResponsePromise<StoreProductTypesListRes>}\n   */\n  list(\n    query?: StoreGetProductTypesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreProductTypesListRes> {\n    let path = `/store/product-types`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default ProductTypesResource\n","import {\n  StoreGetProductsParams,\n  StorePostSearchReq,\n  StorePostSearchRes,\n  StoreProductsListRes,\n  StoreProductsRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\nimport ProductVariantsResource from \"./product-variants\"\n\nclass ProductsResource extends BaseResource {\n  public variants = new ProductVariantsResource(this.client)\n\n  /**\n   * @description Retrieves a single Product\n   * @param {string} id is required\n   * @param customHeaders\n   * @return {ResponsePromise<StoreProductsRes>}\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreProductsRes> {\n    const path = `/store/products/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Searches for products\n   * @param {StorePostSearchReq} searchOptions is required\n   * @param customHeaders\n   * @return {ResponsePromise<StorePostSearchRes>}\n   */\n  search(\n    searchOptions: StorePostSearchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StorePostSearchRes> {\n    const path = `/store/products/search`\n    return this.client.request(\"POST\", path, searchOptions, {}, customHeaders)\n  }\n\n  /**\n   * @description Retrieves a list of products\n   * @param {StoreGetProductsParams} query is optional. Can contain a limit and offset for the returned list\n   * @param customHeaders\n   * @return {ResponsePromise<StoreProductsListRes>}\n   */\n  list(\n    query?: StoreGetProductsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreProductsListRes> {\n    let path = `/store/products`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/store/products?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default ProductsResource\n","import {\n  StoreGetVariantsParams,\n  StoreVariantsListRes,\n  StoreVariantsRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass ProductVariantsResource extends BaseResource {\n  /**\n   * @description Retrieves a single product variant\n   * @param {string} id is required\n   * @param customHeaders\n   * @return {ResponsePromise<StoreVariantsRes>}\n   */\n  retrieve(id: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreVariantsRes> {\n    const path = `/store/variants/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Retrieves a list of of Product Variants\n   * @param {StoreGetVariantsParams} query\n   * @param customHeaders\n   * @return {ResponsePromise<StoreVariantsListRes>}\n   */\n  list(query?: StoreGetVariantsParams, customHeaders: Record<string, any> = {}): ResponsePromise<StoreVariantsListRes> {\n    let path = `/store/variants`\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default ProductVariantsResource\n","import { ResponsePromise } from \"../typings\"\nimport { StoreRegionsListRes, StoreRegionsRes } from \"@medusajs/medusa\"\nimport BaseResource from \"./base\"\n\nclass RegionsResource extends BaseResource {\n  /**\n   * @description Retrieves a list of regions\n   * @param customHeaders\n   * @return {ResponsePromise<StoreRegionsListRes>}\n   */\n  list(customHeaders: Record<string, any> = {}): ResponsePromise<StoreRegionsListRes> {\n    const path = `/store/regions`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Retrieves a region\n   * @param {string} id is required\n   * @param customHeaders\n   * @return {ResponsePromise<StoreRegionsRes>}\n   */\n  retrieve(id: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreRegionsRes> {\n    const path = `/store/regions/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default RegionsResource\n","import BaseResource from \"./base\"\nimport {\n  StoreReturnReasonsListRes,\n  StoreReturnReasonsRes,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\n\nclass ReturnReasonsResource extends BaseResource {\n  /**\n   * @description Retrieves a single Return Reason\n   * @param {string} id is required\n   * @param customHeaders\n   * @return {ResponsePromise<StoreReturnReasonsRes>}\n   */\n  retrieve(id: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreReturnReasonsRes> {\n    const path = `/store/return-reasons/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Lists return reasons defined in Medusa Admin\n   * @param customHeaders\n   * @return {ResponsePromise<StoreReturnReasonsListRes>}\n   */\n  list(customHeaders: Record<string, any> = {}): ResponsePromise<StoreReturnReasonsListRes> {\n    const path = `/store/return-reasons`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default ReturnReasonsResource\n","import BaseResource from \"./base\"\nimport { ResponsePromise } from \"../typings\"\nimport { StoreReturnsRes, StorePostReturnsReq } from \"@medusajs/medusa\"\n\nclass ReturnsResource extends BaseResource {\n  /**\n   * Creates a return request\n   * @param {StorePostReturnsReq} payload details needed to create a return\n   * @param customHeaders\n   * @return {ResponsePromise<StoreReturnsRes>}\n   */\n  create(payload: StorePostReturnsReq, customHeaders: Record<string, any> = {}): ResponsePromise<StoreReturnsRes> {\n    const path = `/store/returns`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default ReturnsResource\n","import {\n  StoreGetShippingOptionsParams,\n  StoreShippingOptionsListRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass ShippingOptionsResource extends BaseResource {\n  /**\n   * @description Lists shiping options available for a cart\n   * @param {string} cart_id\n   * @param customHeaders\n   * @return {ResponsePromise<StoreShippingOptionsListRes>}\n   */\n  listCartOptions(cart_id: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreShippingOptionsListRes> {\n    const path = `/store/shipping-options/${cart_id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Lists shiping options available\n   * @param {StoreGetShippingOptionsParams} query\n   * @param customHeaders\n   * @return {ResponsePromise<StoreShippingOptionsListRes>}\n   */\n  list(\n    query?: StoreGetShippingOptionsParams,\n    customHeaders: Record<string, any> = {}): ResponsePromise<StoreShippingOptionsListRes> {\n    let path = `/store/shipping-options`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/store/shipping-options?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default ShippingOptionsResource\n","import { ResponsePromise } from \"../typings\"\nimport { StoreSwapsRes, StorePostSwapsReq } from \"@medusajs/medusa\"\nimport BaseResource from \"./base\"\n\nclass SwapsResource extends BaseResource {\n  /**\n   * @description Creates a swap from a cart\n   * @param {StorePostSwapsReq} payload\n   * @param customHeaders\n   * @return {ResponsePromise<StoreSwapsRes>}\n   */\n  create(payload: StorePostSwapsReq, customHeaders: Record<string, any> = {}): ResponsePromise<StoreSwapsRes> {\n    const path = `/store/swaps`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Retrieves a swap by cart id\n   * @param {string} cart_id id of cart\n   * @param customHeaders\n   * @return {ResponsePromise<StoreSwapsRes>}\n   */\n  retrieveByCartId(cart_id: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreSwapsRes> {\n    const path = `/store/swaps/${cart_id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default SwapsResource\n","import { AdminAuthRes, AdminPostAuthReq } from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminAuthResource extends BaseResource {\n  /**\n   * @description Retrieves an authenticated session\n   * Usually used to check if authenticated session is alive.\n   * @param customHeaders\n   * @return {ResponsePromise<AdminAuthRes>}\n   */\n  getSession(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminAuthRes> {\n    const path = `/admin/auth`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description destroys an authenticated session\n   * @param customHeaders\n   * @return {ResponsePromise<void>}\n   */\n  deleteSession(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<void> {\n    const path = `/admin/auth`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Creates an authenticated session\n   * @param {AdminPostAuthReq} payload\n   * @param customHeaders\n   * @return {ResponsePromise<AdminAuthRes>}\n   */\n  createSession(\n    payload: AdminPostAuthReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminAuthRes> {\n    const path = `/admin/auth`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminAuthResource\n","import {\n  AdminBatchJobListRes,\n  AdminBatchJobRes,\n  AdminGetBatchParams,\n  AdminPostBatchesReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\nimport { stringifyNullProperties } from \"../../utils\"\n\nclass AdminBatchJobsResource extends BaseResource {\n  create(\n    payload: AdminPostBatchesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminBatchJobRes> {\n    const path = `/admin/batch-jobs`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  list(\n    query?: AdminGetBatchParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminBatchJobListRes> {\n    let path = `/admin/batch-jobs`\n\n    if (query) {\n      const queryString = qs.stringify(stringifyNullProperties(query))\n      path = `/admin/batch-jobs?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  cancel(\n    batchJobId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminBatchJobRes> {\n    const path = `/admin/batch-jobs/${batchJobId}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  confirm(\n    batchJobId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminBatchJobRes> {\n    const path = `/admin/batch-jobs/${batchJobId}/confirm`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  retrieve(\n    batchJobId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminBatchJobRes> {\n    const path = `/admin/batch-jobs/${batchJobId}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminBatchJobsResource\n","export function stringifyNullProperties<T extends object>(input: T): T {\n  const convertProperties = (obj: T) => {\n    const res = {} as T\n\n    Object.keys(obj).reduce((acc: T, key: string) => {\n      if (obj[key] === null) {\n        acc[key] = \"null\"\n      } else if (typeof obj[key] === \"object\") {\n        acc[key] = convertProperties(obj[key])\n      } else {\n        acc[key] = obj[key]\n      }\n\n      return acc\n    }, res)\n\n    return res\n  }\n\n  return convertProperties(input)\n}\n","import {\n  AdminPostCollectionsReq,\n  AdminCollectionsRes,\n  AdminPostCollectionsCollectionReq,\n  AdminCollectionsDeleteRes,\n  AdminCollectionsListRes,\n  AdminGetCollectionsParams,\n  AdminPostProductsToCollectionReq,\n  AdminDeleteProductsFromCollectionReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminCollectionsResource extends BaseResource {\n  /**\n   * @description Creates a collection.\n   * @param payload\n   * @param customHeaders\n   * @returns Created collection.\n   */\n  create(\n    payload: AdminPostCollectionsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCollectionsRes> {\n    const path = `/admin/collections`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Updates a collection\n   * @param id id of the collection to update.\n   * @param payload update to apply to collection.\n   * @param customHeaders\n   * @returns the updated collection.\n   */\n  update(\n    id: string,\n    payload: AdminPostCollectionsCollectionReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCollectionsRes> {\n    const path = `/admin/collections/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description deletes a collection\n   * @param id id of collection to delete.\n   * @param customHeaders\n   * @returns Deleted response\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCollectionsDeleteRes> {\n    const path = `/admin/collections/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description get a collection\n   * @param id id of the collection to retrieve.\n   * @param customHeaders\n   * @returns the collection with the given id\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCollectionsRes> {\n    const path = `/admin/collections/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Lists collections matching a query\n   * @param query Query for searching collections\n   * @param customHeaders\n   * @returns a list of collections matching the query.\n   */\n  list(\n    query?: AdminGetCollectionsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCollectionsListRes> {\n    let path = `/admin/collections`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/collections?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Updates products associated with a Product Collection\n   * @param id the id of the Collection\n   * @param payload - an object which contains an array of Product IDs to add to the Product Collection\n   * @param customHeaders\n   */\n  addProducts(\n    id: string,\n    payload: AdminPostProductsToCollectionReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCollectionsRes> {\n    const path = `/admin/collections/${id}/products/batch`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Removes products associated with a Product Collection\n   * @param id - the id of the Collection\n   * @param payload - an object which contains an array of Product IDs to add to the Product Collection\n   * @param customHeaders\n   */\n  removeProducts(\n    id: string,\n    payload: AdminDeleteProductsFromCollectionReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCollectionsDeleteRes> {\n    const path = `/admin/collections/${id}/products/batch`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminCollectionsResource\n","import {\n  AdminCurrenciesListRes,\n  AdminCurrenciesRes,\n  AdminGetCurrenciesParams,\n  AdminPostCurrenciesCurrencyReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminCurrenciesResource extends BaseResource {\n  /**\n   * @description Lists currencies.\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `tax_inclusive_pricing` in your medusa backend project.\n   * @param payload optional\n   * @param customHeaders\n   * @returns the list of currencies as well as the pagination properties.\n   */\n  list(\n    query?: AdminGetCurrenciesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCurrenciesListRes> {\n    let path = `/admin/currencies`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Updates a currency\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `tax_inclusive_pricing` in your medusa backend project.\n   * @param code code of the currency to update.\n   * @param payload update to apply to currency.\n   * @param customHeaders\n   * @returns the updated currency.\n   */\n  update(\n    code: string,\n    payload: AdminPostCurrenciesCurrencyReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCurrenciesRes> {\n    const path = `/admin/currencies/${code}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminCurrenciesResource\n","import {\n  AdminPostCustomerGroupsReq,\n  AdminCustomerGroupsRes,\n  AdminGetCustomerGroupsParams,\n  AdminCustomerGroupsListRes,\n  AdminPostCustomerGroupsGroupReq,\n  AdminCustomerGroupsDeleteRes,\n  AdminPostCustomerGroupsGroupCustomersBatchReq,\n  AdminDeleteCustomerGroupsGroupCustomerBatchReq,\n  AdminGetCustomerGroupsGroupParams,\n  AdminCustomersListRes,\n  AdminGetCustomersParams,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\n\nimport BaseResource from \"../base\"\nimport { ResponsePromise } from \"../..\"\n\nclass AdminCustomerGroupsResource extends BaseResource {\n  /**\n   * Create a customer group.\n   *\n   * @param payload - customer group info\n   * @param customHeaders\n   */\n  create(\n    payload: AdminPostCustomerGroupsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomerGroupsRes> {\n    const path = `/admin/customer-groups`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieves a customer group.\n   *\n   * @param id - customer group id\n   * @param query - pass query options such as \"expand\", \"fields\" etc.\n   * @param customHeaders\n   */\n  retrieve(\n    id: string,\n    query?: AdminGetCustomerGroupsGroupParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomerGroupsRes> {\n    let path = `/admin/customer-groups/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n  /**\n   * Updates a customer group\n   *\n   * @param id - customer group id\n   * @param payload - data to update customer group with\n   * @param customHeaders\n   */\n  update(\n    id: string,\n    payload: AdminPostCustomerGroupsGroupReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomerGroupsRes> {\n    const path = `/admin/customer-groups/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Deletes a customer group.\n   *\n   * @param id - id of the customer group\n   * @param customHeaders\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomerGroupsDeleteRes> {\n    const path = `/admin/customer-groups/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Lists customer groups.\n   *\n   * @param query optional\n   * @param customHeaders\n   */\n  list(\n    query?: AdminGetCustomerGroupsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomerGroupsListRes> {\n    let path = `/admin/customer-groups`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/customer-groups?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Add multiple customers to a customer group.\n   *\n   * @param id - customer group id\n   * @param payload - an object which contains an array of customer ids which will be added to the group\n   * @param customHeaders\n   */\n  addCustomers(\n    id: string,\n    payload: AdminPostCustomerGroupsGroupCustomersBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomerGroupsRes> {\n    const path = `/admin/customer-groups/${id}/customers/batch`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Remove multiple customers from a customer group.\n   *\n   * @param id - customer group id\n   * @param payload - an object which contains an array of customers ids which will be removed from the group\n   * @param customHeaders\n   */\n  removeCustomers(\n    id: string,\n    payload: AdminDeleteCustomerGroupsGroupCustomerBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomerGroupsRes> {\n    const path = `/admin/customer-groups/${id}/customers/batch`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * List and count customers that belong to provided customer groups.\n   *\n   * @param id - customer group id\n   * @param query - params for filtering customers\n   * @param customHeaders\n   */\n  listCustomers(\n    id: string,\n    query?: AdminGetCustomersParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomersListRes> {\n    let path = `/admin/customer-groups/${id}/customers`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminCustomerGroupsResource\n","import {\n  AdminCustomersListRes,\n  AdminCustomersRes,\n  AdminGetCustomersParams,\n  AdminPostCustomersReq,\n  AdminPostCustomersCustomerReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../..\"\nimport BaseResource from \"../base\"\n\nclass AdminCustomersResource extends BaseResource {\n  /**\n   * Creates a customer\n   * @param payload information of customer\n   * @param customHeaders\n   */\n  create(\n    payload: AdminPostCustomersReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomersRes> {\n    const path = `/admin/customers`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Updates a customer\n   * @param id customer id\n   * @param payload data to update customer with\n   * @param customHeaders\n   */\n  update(\n    id: string,\n    payload: AdminPostCustomersCustomerReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomersRes> {\n    const path = `/admin/customers/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieves a customer\n   * @param id customer id\n   * @param customHeaders\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomersRes> {\n    const path = `/admin/customers/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Lists customers\n   * @param query optional\n   * @param customHeaders\n   */\n  list(\n    query?: AdminGetCustomersParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomersListRes> {\n    let path = `/admin/customers`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/customers?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminCustomersResource\n","import {\n  AdminDeleteDiscountsDiscountConditionsConditionBatchReq,\n  AdminDiscountConditionsRes,\n  AdminDiscountsDeleteRes,\n  AdminDiscountsListRes,\n  AdminDiscountsRes,\n  AdminGetDiscountsDiscountConditionsConditionParams,\n  AdminGetDiscountsParams,\n  AdminPostDiscountsDiscountConditions,\n  AdminPostDiscountsDiscountConditionsCondition,\n  AdminPostDiscountsDiscountConditionsConditionBatchParams,\n  AdminPostDiscountsDiscountConditionsConditionBatchReq,\n  AdminPostDiscountsDiscountConditionsConditionParams,\n  AdminPostDiscountsDiscountConditionsParams,\n  AdminPostDiscountsDiscountDynamicCodesReq,\n  AdminPostDiscountsDiscountReq,\n  AdminPostDiscountsReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminDiscountsResource extends BaseResource {\n  /**\n   * @description Adds region to discount\n   */\n  addRegion(\n    id: string,\n    regionId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts/${id}/regions/${regionId}`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Creates discounts\n   */\n  create(\n    payload: AdminPostDiscountsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Updates discount\n   */\n  update(\n    id: string,\n    payload: AdminPostDiscountsDiscountReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Creates a dynamic discount code\n   */\n  createDynamicCode(\n    id: string,\n    payload: AdminPostDiscountsDiscountDynamicCodesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts/${id}/dynamic-codes`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Deletes a discount\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsDeleteRes> {\n    const path = `/admin/discounts/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Deletes a dynamic discount\n   */\n  deleteDynamicCode(\n    id: string,\n    code: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts/${id}/dynamic-codes/${code}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Retrieves a discount\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Retrieves a discount by code\n   */\n  retrieveByCode(\n    code: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts/code/${code}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Lists discounts\n   */\n  list(\n    query?: AdminGetDiscountsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsListRes> {\n    let path = `/admin/discounts`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Removes a region from a discount\n   */\n  removeRegion(\n    id: string,\n    regionId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts/${id}/regions/${regionId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description creates a discount condition\n   */\n  createCondition(\n    discountId: string,\n    payload: AdminPostDiscountsDiscountConditions,\n    query: AdminPostDiscountsDiscountConditionsParams = {},\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    let path = `/admin/discounts/${discountId}/conditions`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Updates a discount condition\n   */\n  updateCondition(\n    discountId: string,\n    conditionId: string,\n    payload: AdminPostDiscountsDiscountConditionsCondition,\n    query: AdminPostDiscountsDiscountConditionsConditionParams = {},\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    let path = `/admin/discounts/${discountId}/conditions/${conditionId}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Removes a condition from a discount\n   */\n  deleteCondition(\n    discountId: string,\n    conditionId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsDeleteRes> {\n    const path = `/admin/discounts/${discountId}/conditions/${conditionId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Gets a condition from a discount\n   */\n  getCondition(\n    discountId: string,\n    conditionId: string,\n    query?: AdminGetDiscountsDiscountConditionsConditionParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountConditionsRes> {\n    let path = `/admin/discounts/${discountId}/conditions/${conditionId}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Add a batch of items to a discount condition\n   */\n  addConditionResourceBatch(\n    discountId: string,\n    conditionId: string,\n    payload: AdminPostDiscountsDiscountConditionsConditionBatchReq,\n    query?: AdminPostDiscountsDiscountConditionsConditionBatchParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    let path = `/admin/discounts/${discountId}/conditions/${conditionId}/batch`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Delete a batch of items from a discount condition\n   */\n  deleteConditionResourceBatch(\n    discountId: string,\n    conditionId: string,\n    payload: AdminDeleteDiscountsDiscountConditionsConditionBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts/${discountId}/conditions/${conditionId}/batch`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminDiscountsResource\n","import {\n  AdminDraftOrdersDeleteRes,\n  AdminDraftOrdersListRes,\n  AdminDraftOrdersRes,\n  AdminGetDraftOrdersParams,\n  AdminPostDraftOrdersDraftOrderLineItemsItemReq,\n  AdminPostDraftOrdersDraftOrderLineItemsReq,\n  AdminPostDraftOrdersDraftOrderRegisterPaymentRes,\n  AdminPostDraftOrdersDraftOrderReq,\n  AdminPostDraftOrdersReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminDraftOrdersResource extends BaseResource {\n  /**\n   * @description Creates a draft order\n   */\n  create(\n    payload: AdminPostDraftOrdersReq,\n    customHeaders: Record<string, any> = {}): ResponsePromise<AdminDraftOrdersRes> {\n    const path = `/admin/draft-orders`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Add line item to draft order\n   */\n  addLineItem(\n    id: string,\n    payload: AdminPostDraftOrdersDraftOrderLineItemsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDraftOrdersRes> {\n    const path = `/admin/draft-orders/${id}/line-items`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Delete draft order\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDraftOrdersDeleteRes> {\n    const path = `/admin/draft-orders/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Remove line item\n   */\n  removeLineItem(\n    id: string,\n    itemId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDraftOrdersRes> {\n    const path = `/admin/draft-orders/${id}/line-items/${itemId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Retrieves a draft order\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDraftOrdersRes> {\n    const path = `/admin/draft-orders/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Lists draft orders\n   */\n  list(\n    query?: AdminGetDraftOrdersParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDraftOrdersListRes> {\n    let path = `/admin/draft-orders`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/draft-orders?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Mark a draft order as paid\n   */\n  markPaid(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPostDraftOrdersDraftOrderRegisterPaymentRes> {\n    const path = `/admin/draft-orders/${id}/pay`\n    return this.client.request(\"POST\", path, {}, customHeaders)\n  }\n\n  /**\n   * @description Update draft order\n   */\n  update(\n    id: string,\n    payload: AdminPostDraftOrdersDraftOrderReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDraftOrdersRes> {\n    const path = `/admin/draft-orders/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Update draft order line item\n   */\n  updateLineItem(\n    id: string,\n    itemId: string,\n    payload: AdminPostDraftOrdersDraftOrderLineItemsItemReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDraftOrdersRes> {\n    const path = `/admin/draft-orders/${id}/line-items/${itemId}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminDraftOrdersResource\n","import {\n  AdminGetGiftCardsParams,\n  AdminGiftCardsDeleteRes,\n  AdminGiftCardsListRes,\n  AdminGiftCardsRes,\n  AdminPostGiftCardsGiftCardReq,\n  AdminPostGiftCardsReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminGiftCardsResource extends BaseResource {\n  /**\n   * @description Creates a gift card\n   */\n  create(\n    payload: AdminPostGiftCardsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminGiftCardsRes> {\n    const path = `/admin/gift-cards`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Updates a gift card\n   */\n  update(\n    id: string,\n    payload: AdminPostGiftCardsGiftCardReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminGiftCardsRes> {\n    const path = `/admin/gift-cards/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Deletes a gift card\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminGiftCardsDeleteRes> {\n    const path = `/admin/gift-cards/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Deletes a gift card\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminGiftCardsRes> {\n    const path = `/admin/gift-cards/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Lists gift cards\n   */\n  list(\n    query?: AdminGetGiftCardsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminGiftCardsListRes> {\n    let path = `/admin/gift-cards/`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/gift-cards?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminGiftCardsResource\n","import {\n  AdminGetInventoryItemsParams,\n  AdminInventoryItemsRes,\n  AdminPostInventoryItemsInventoryItemReq,\n  AdminGetInventoryItemsItemLocationLevelsParams,\n  AdminPostInventoryItemsItemLocationLevelsLevelReq,\n  AdminInventoryItemsDeleteRes,\n  AdminGetInventoryItemsItemParams,\n  AdminInventoryItemsListWithVariantsAndLocationLevelsRes,\n  AdminInventoryItemsLocationLevelsRes,\n  AdminPostInventoryItemsItemLocationLevelsReq,\n  AdminPostInventoryItemsReq,\n  AdminPostInventoryItemsParams,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\nimport qs from \"qs\"\n\nclass AdminInventoryItemsResource extends BaseResource {\n  /**\n   * Retrieve an Inventory Item\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @description gets an Inventory Item\n   * @returns an Inventory Item\n   */\n  retrieve(\n    inventoryItemId: string,\n    query?: AdminGetInventoryItemsItemParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsRes> {\n    let path = `/admin/inventory-items/${inventoryItemId}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Update an Inventory Item\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @description updates an Inventory Item\n   * @returns the updated Inventory Item\n   */\n  update(\n    inventoryItemId: string,\n    payload: AdminPostInventoryItemsInventoryItemReq,\n    query?: AdminGetInventoryItemsItemParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsRes> {\n    let path = `/admin/inventory-items/${inventoryItemId}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete an Inventory Item\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @description deletes an Inventory Item\n   * @returns the deleted Inventory Item\n   */\n  delete(\n    inventoryItemId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsDeleteRes> {\n    const path = `/admin/inventory-items/${inventoryItemId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Create an Inventory Item\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @description creates an Inventory Item\n   * @returns the created Inventory Item\n   */\n  create(\n    payload: AdminPostInventoryItemsReq,\n    query?: AdminPostInventoryItemsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsRes> {\n    let path = `/admin/inventory-items`\n    \n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of Inventory Items\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @description Retrieve a list of Inventory Items\n   * @returns the list of Inventory Items as well as the pagination properties\n   */\n  list(\n    query?: AdminGetInventoryItemsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsListWithVariantsAndLocationLevelsRes> {\n    let path = `/admin/inventory-items`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Update an Inventory Item's stock level at a Stock Location\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @description updates an Inventory Item\n   * @returns the updated Inventory Item\n   */\n  updateLocationLevel(\n    inventoryItemId: string,\n    locationId: string,\n    payload: AdminPostInventoryItemsItemLocationLevelsLevelReq,\n    query?: AdminGetInventoryItemsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsRes> {\n    let path = `/admin/inventory-items/${inventoryItemId}/location-levels/${locationId}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Create stock for an Inventory Item at a Stock Location\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @description creates stock levle for an Inventory Item\n   * @returns the Inventory Item\n   */\n  createLocationLevel(\n    inventoryItemId: string,\n    payload: AdminPostInventoryItemsItemLocationLevelsReq,\n    query?: AdminGetInventoryItemsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsRes> {\n    let path = `/admin/inventory-items/${inventoryItemId}/location-levels`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Removes an Inventory Item from a Stock Location. This erases trace of any quantity currently at the location.\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @description deletes a location level of an Inventory Item\n   * @returns the Inventory Item\n   */\n  deleteLocationLevel(\n    inventoryItemId: string,\n    locationId: string,\n    query?: AdminGetInventoryItemsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsRes> {\n    let path = `/admin/inventory-items/${inventoryItemId}/location-levels/${locationId}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of Inventory Levels related to an Inventory Item across Stock Locations\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @description Retrieve a list of location levels related to an Inventory Item\n   * @returns the list of inventory levels related to an Inventory Item as well as the pagination properties\n   */\n  listLocationLevels(\n    inventoryItemId: string,\n    query?: AdminGetInventoryItemsItemLocationLevelsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsLocationLevelsRes> {\n    let path = `/admin/inventory-items/${inventoryItemId}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminInventoryItemsResource\n","import {\n  AdminInviteDeleteRes,\n  AdminListInvitesRes,\n  AdminPostInvitesInviteAcceptReq,\n} from \"@medusajs/medusa\"\nimport { AdminPostInvitesPayload, ResponsePromise } from \"../..\"\nimport BaseResource from \"../base\"\n\nclass AdminInvitesResource extends BaseResource {\n  accept(\n    payload: AdminPostInvitesInviteAcceptReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise {\n    const path = `/admin/invites/accept`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  create(\n    payload: AdminPostInvitesPayload,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise {\n    const path = `/admin/invites`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInviteDeleteRes> {\n    const path = `/admin/invites/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  list(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminListInvitesRes> {\n    const path = `/admin/invites`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  resend(id: string, customHeaders: Record<string, any> = {}): ResponsePromise {\n    const path = `/admin/invites/${id}`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminInvitesResource\n","import {\n  AdminGetNotesParams,\n  AdminNotesDeleteRes,\n  AdminNotesListRes,\n  AdminNotesRes,\n  AdminPostNotesNoteReq,\n  AdminPostNotesReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminNotesResource extends BaseResource {\n  create(\n    payload: AdminPostNotesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminNotesRes> {\n    const path = `/admin/notes`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  update(\n    id: string,\n    payload: AdminPostNotesNoteReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminNotesRes> {\n    const path = `/admin/notes/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminNotesDeleteRes> {\n    const path = `/admin/notes/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminNotesRes> {\n    const path = `/admin/notes/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  list(\n    query?: AdminGetNotesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminNotesListRes> {\n    let path = `/admin/notes/`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/notes?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminNotesResource\n","import {\n  AdminGetNotificationsParams,\n  AdminNotificationsListRes,\n  AdminNotificationsRes,\n  AdminPostNotificationsNotificationResendReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../..\"\nimport BaseResource from \"../base\"\n\nclass AdminNotificationsResource extends BaseResource {\n  list(\n    query?: AdminGetNotificationsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminNotificationsListRes> {\n    let path = `/admin/notifications`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/notifications?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  resend(\n    id: string,\n    payload: AdminPostNotificationsNotificationResendReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminNotificationsRes> {\n    const path = `/admin/notifications/${id}/resend`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminNotificationsResource\n","import {\n  AdminOrderEditDeleteRes,\n  AdminOrderEditItemChangeDeleteRes,\n  AdminOrderEditsListRes,\n  AdminOrderEditsRes,\n  AdminPostOrderEditsEditLineItemsLineItemReq,\n  AdminPostOrderEditsEditLineItemsReq,\n  AdminPostOrderEditsOrderEditReq,\n  AdminPostOrderEditsReq,\n  GetOrderEditsOrderEditParams,\n  GetOrderEditsParams,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\nimport qs from \"qs\"\n\nclass AdminOrderEditsResource extends BaseResource {\n  retrieve(\n    id: string,\n    query?: GetOrderEditsOrderEditParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    let path = `/admin/order-edits/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  list(\n    query?: GetOrderEditsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsListRes> {\n    let path = `/admin/order-edits`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  create(\n    payload: AdminPostOrderEditsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    const path = `/admin/order-edits`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  update(\n    id: string,\n    payload: AdminPostOrderEditsOrderEditReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    const path = `/admin/order-edits/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditDeleteRes> {\n    const path = `/admin/order-edits/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  addLineItem(\n    id: string,\n    payload: AdminPostOrderEditsEditLineItemsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    const path = `/admin/order-edits/${id}/items`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  deleteItemChange(\n    orderEditId: string,\n    itemChangeId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditItemChangeDeleteRes> {\n    const path = `/admin/order-edits/${orderEditId}/changes/${itemChangeId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  requestConfirmation(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    const path = `/admin/order-edits/${id}/request`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  cancel(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    const path = `/admin/order-edits/${id}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  confirm(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    const path = `/admin/order-edits/${id}/confirm`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  updateLineItem(\n    orderEditId: string,\n    itemId: string,\n    payload: AdminPostOrderEditsEditLineItemsLineItemReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    const path = `/admin/order-edits/${orderEditId}/items/${itemId}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  removeLineItem(\n    orderEditId: string,\n    itemId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    const path = `/admin/order-edits/${orderEditId}/items/${itemId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminOrderEditsResource\n","import {\n  AdminGetOrdersParams,\n  AdminOrdersListRes,\n  AdminOrdersRes,\n  AdminPostOrdersOrderClaimsClaimFulfillmentsReq,\n  AdminPostOrdersOrderClaimsClaimReq,\n  AdminPostOrdersOrderClaimsClaimShipmentsReq,\n  AdminPostOrdersOrderClaimsReq,\n  AdminPostOrdersOrderFulfillmentsReq,\n  AdminPostOrdersOrderRefundsReq,\n  AdminPostOrdersOrderReq,\n  AdminPostOrdersOrderReturnsReq,\n  AdminPostOrdersOrderShipmentReq,\n  AdminPostOrdersOrderShippingMethodsReq,\n  AdminPostOrdersOrderSwapsReq,\n  AdminPostOrdersOrderSwapsSwapFulfillmentsReq,\n  AdminPostOrdersOrderSwapsSwapShipmentsReq,\n} from \"@medusajs/medusa\"\nimport { FindParams } from \"@medusajs/medusa/dist/types/common\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminOrdersResource extends BaseResource {\n  update(\n    id: string,\n    payload: AdminPostOrdersOrderReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  retrieve(\n    id: string,\n    query?: FindParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    let path = `/admin/orders/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/orders/${id}?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  list(\n    query?: AdminGetOrdersParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersListRes> {\n    let path = `/admin/orders`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/orders?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  complete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/complete`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  capturePayment(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/capture`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  refundPayment(\n    id: string,\n    payload: AdminPostOrdersOrderRefundsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/refund`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  createFulfillment(\n    id: string,\n    payload: AdminPostOrdersOrderFulfillmentsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/fulfillment`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  cancelFulfillment(\n    id: string,\n    fulfillmentId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/fulfillments/${fulfillmentId}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  cancelSwapFulfillment(\n    id: string,\n    swapId: string,\n    fulfillmentId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/swaps/${swapId}/fulfillments/${fulfillmentId}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  cancelClaimFulfillment(\n    id: string,\n    claimId: string,\n    fulfillmentId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/claims/${claimId}/fulfillments/${fulfillmentId}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  createShipment(\n    id: string,\n    payload: AdminPostOrdersOrderShipmentReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/shipment`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  requestReturn(\n    id: string,\n    payload: AdminPostOrdersOrderReturnsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/return`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  cancel(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  addShippingMethod(\n    id: string,\n    payload: AdminPostOrdersOrderShippingMethodsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/shipping-methods`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  archive(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/archive`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  createSwap(\n    id: string,\n    payload: AdminPostOrdersOrderSwapsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/swaps`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  cancelSwap(\n    id: string,\n    swapId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/swaps/${swapId}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  fulfillSwap(\n    id: string,\n    swapId: string,\n    payload: AdminPostOrdersOrderSwapsSwapFulfillmentsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/swaps/${swapId}/fulfillments`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  createSwapShipment(\n    id: string,\n    swapId: string,\n    payload: AdminPostOrdersOrderSwapsSwapShipmentsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/swaps/${swapId}/shipments`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  processSwapPayment(\n    id: string,\n    swapId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/swaps/${swapId}/process-payment`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  createClaim(\n    id: string,\n    payload: AdminPostOrdersOrderClaimsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/claims`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  cancelClaim(\n    id: string,\n    claimId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/claims/${claimId}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  updateClaim(\n    id: string,\n    claimId: string,\n    payload: AdminPostOrdersOrderClaimsClaimReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/claims/${claimId}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  fulfillClaim(\n    id: string,\n    claimId: string,\n    payload: AdminPostOrdersOrderClaimsClaimFulfillmentsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/claims/${claimId}/fulfillments`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  createClaimShipment(\n    id: string,\n    claimId: string,\n    payload: AdminPostOrdersOrderClaimsClaimShipmentsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/claims/${claimId}/shipments`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminOrdersResource\n","import {\n  AdminGetPaymentCollectionsParams,\n  AdminPaymentCollectionDeleteRes,\n  AdminPaymentCollectionsRes,\n  AdminUpdatePaymentCollectionsReq,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\nimport qs from \"qs\"\n\nclass AdminPaymentCollectionsResource extends BaseResource {\n  retrieve(\n    id: string,\n    query?: AdminGetPaymentCollectionsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPaymentCollectionsRes> {\n    let path = `/admin/payment-collections/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  update(\n    id: string,\n    payload: AdminUpdatePaymentCollectionsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPaymentCollectionsRes> {\n    const path = `/admin/payment-collections/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPaymentCollectionDeleteRes> {\n    const path = `/admin/payment-collections/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  markAsAuthorized(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPaymentCollectionsRes> {\n    const path = `/admin/payment-collections/${id}/authorize`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminPaymentCollectionsResource\n","import {\n  AdminPaymentRes,\n  AdminPostPaymentRefundsReq,\n  AdminRefundRes,\n  GetPaymentsParams,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminPaymentsResource extends BaseResource {\n  retrieve(\n    id: string,\n    query?: GetPaymentsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPaymentRes> {\n    let path = `/admin/payments/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/payments/${id}?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  capturePayment(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPaymentRes> {\n    const path = `/admin/payments/${id}/capture`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  refundPayment(\n    id: string,\n    payload: AdminPostPaymentRefundsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRefundRes> {\n    const path = `/admin/payments/${id}/refund`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminPaymentsResource\n","import {\n  AdminPostPriceListPricesPricesReq,\n  AdminPostPriceListsPriceListPriceListReq,\n  AdminPostPriceListsPriceListReq,\n  AdminPriceListDeleteRes,\n  AdminPriceListRes,\n  AdminGetPriceListPaginationParams,\n  AdminPriceListsListRes,\n  AdminDeletePriceListPricesPricesReq,\n  AdminPriceListDeleteBatchRes,\n  AdminGetPriceListsPriceListProductsParams,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminPriceListResource extends BaseResource {\n  create(\n    payload: AdminPostPriceListsPriceListReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListRes> {\n    const path = `/admin/price-lists`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  update(\n    id: string,\n    payload: AdminPostPriceListsPriceListPriceListReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListRes> {\n    const path = `/admin/price-lists/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListDeleteRes> {\n    const path = `/admin/price-lists/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListRes> {\n    const path = `/admin/price-lists/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  list(\n    query?: AdminGetPriceListPaginationParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListsListRes> {\n    let path = `/admin/price-lists/`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/price-lists?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  listProducts(\n    id: string,\n    query?: AdminGetPriceListsPriceListProductsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<any> {\n    let path = `/admin/price-lists/${id}/products`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/price-lists/${id}/products?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  addPrices(\n    id: string,\n    payload: AdminPostPriceListPricesPricesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListRes> {\n    const path = `/admin/price-lists/${id}/prices/batch`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  deletePrices(\n    id: string,\n    payload: AdminDeletePriceListPricesPricesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListDeleteBatchRes> {\n    const path = `/admin/price-lists/${id}/prices/batch`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  deleteProductPrices(\n    priceListId: string,\n    productId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListDeleteBatchRes> {\n    const path = `/admin/price-lists/${priceListId}/products/${productId}/prices`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  deleteVariantPrices(\n    priceListId: string,\n    variantId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListDeleteBatchRes> {\n    const path = `/admin/price-lists/${priceListId}/variants/${variantId}/prices`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminPriceListResource\n","import {\n  AdminDeleteProductCategoriesCategoryProductsBatchReq,\n  AdminGetProductCategoriesParams,\n  AdminPostProductCategoriesCategoryProductsBatchReq,\n  AdminPostProductCategoriesReq,\n  AdminPostProductCategoriesCategoryParams,\n  AdminProductCategoriesCategoryDeleteRes,\n  AdminProductCategoriesListRes,\n  AdminProductCategoriesCategoryRes,\n  AdminGetProductCategoryParams,\n  AdminPostProductCategoriesCategoryReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\n\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminProductCategoriesResource extends BaseResource {\n  /** retrieve a product category\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `product_categories` in your medusa backend project.\n   * @description gets a product category\n   * @returns a medusa product category\n   */\n  retrieve(\n    productCategoryId: string,\n    query?: AdminGetProductCategoryParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductCategoriesCategoryRes> {\n    let path = `/admin/product-categories/${productCategoryId}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `${path}?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /* *\n   * Create a medusa product category\n   * @returns the created product category\n   */\n  create(\n    payload: AdminPostProductCategoriesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductCategoriesCategoryRes> {\n    const path = `/admin/product-categories`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /** update a product category\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `product_categories` in your medusa backend project.\n   * @description updates a product category\n   * @returns the updated medusa product category\n   */\n  update(\n    productCategoryId: string,\n    payload: AdminPostProductCategoriesCategoryReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductCategoriesCategoryRes> {\n    const path = `/admin/product-categories/${productCategoryId}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of product categories\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `product_categories` in your medusa backend project.\n   * @description Retrieve a list of product categories\n   * @returns the list of product category as well as the pagination properties\n   */\n  list(\n    query?: AdminGetProductCategoriesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductCategoriesListRes> {\n    let path = `/admin/product-categories`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Delete a product category\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `product_categories` in your medusa backend project.\n   * @description gets a product category\n   * @returns an deletion result\n   */\n  delete(\n    productCategoryId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductCategoriesCategoryDeleteRes> {\n    const path = `/admin/product-categories/${productCategoryId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Remove products from a product category\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `product_categories` in your medusa backend project.\n   * @description Remove products from a product category\n   * @returns a medusa product category\n   */\n  removeProducts(\n    productCategoryId: string,\n    payload: AdminDeleteProductCategoriesCategoryProductsBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductCategoriesCategoryRes> {\n    const path = `/admin/product-categories/${productCategoryId}/products/batch`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Add products to a product category\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `product_categories` in your medusa backend project.\n   * @description Add products to a product category\n   * @returns a medusa product category\n   */\n  addProducts(\n    productCategoryId: string,\n    payload: AdminPostProductCategoriesCategoryProductsBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductCategoriesCategoryRes> {\n    const path = `/admin/product-categories/${productCategoryId}/products/batch`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminProductCategoriesResource\n","import {\n  AdminGetProductTagsParams,\n  AdminProductTagsListRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminProductTagsResource extends BaseResource {\n  list(\n    query?: AdminGetProductTagsParams\n  ): ResponsePromise<AdminProductTagsListRes> {\n    let path = `/admin/product-tags`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/product-tags?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path)\n  }\n}\n\nexport default AdminProductTagsResource\n","import {\n  AdminGetProductTypesParams,\n  AdminProductTypesListRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminProductTypesResource extends BaseResource {\n  list(\n    query?: AdminGetProductTypesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductTypesListRes> {\n    let path = `/admin/product-types`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminProductTypesResource\n","import {\n  AdminGetProductsParams,\n  AdminPostProductsProductMetadataReq,\n  AdminPostProductsProductOptionsOption,\n  AdminPostProductsProductOptionsReq,\n  AdminPostProductsProductReq,\n  AdminPostProductsProductVariantsReq,\n  AdminPostProductsProductVariantsVariantReq,\n  AdminPostProductsReq,\n  AdminProductsDeleteOptionRes,\n  AdminProductsDeleteRes,\n  AdminProductsDeleteVariantRes,\n  AdminProductsListRes,\n  AdminProductsListTagsRes,\n  AdminProductsListTypesRes,\n  AdminProductsRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminProductsResource extends BaseResource {\n  create(\n    payload: AdminPostProductsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsRes> {\n    const path = `/admin/products/`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsRes> {\n    const path = `/admin/products/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  update(\n    id: string,\n    payload: AdminPostProductsProductReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsRes> {\n    const path = `/admin/products/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsDeleteRes> {\n    const path = `/admin/products/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  list(\n    query?: AdminGetProductsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsListRes> {\n    let path = `/admin/products`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/products?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @deprecated Use {@link AdminProductTypesResource.list} instead.\n   */\n  listTypes(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsListTypesRes> {\n    const path = `/admin/products/types`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  listTags(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsListTagsRes> {\n    const path = `/admin/products/tag-usage`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  setMetadata(\n    id: string,\n    payload: AdminPostProductsProductMetadataReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsRes> {\n    const path = `/admin/products/${id}/metadata`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  createVariant(\n    id: string,\n    payload: AdminPostProductsProductVariantsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsRes> {\n    const path = `/admin/products/${id}/variants`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  updateVariant(\n    id: string,\n    variantId: string,\n    payload: AdminPostProductsProductVariantsVariantReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsRes> {\n    const path = `/admin/products/${id}/variants/${variantId}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  deleteVariant(\n    id: string,\n    variantId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsDeleteVariantRes> {\n    const path = `/admin/products/${id}/variants/${variantId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  addOption(\n    id: string,\n    payload: AdminPostProductsProductOptionsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsRes> {\n    const path = `/admin/products/${id}/options`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  updateOption(\n    id: string,\n    optionId: string,\n    payload: AdminPostProductsProductOptionsOption,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsRes> {\n    const path = `/admin/products/${id}/options/${optionId}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  deleteOption(\n    id: string,\n    optionId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsDeleteOptionRes> {\n    const path = `/admin/products/${id}/options/${optionId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminProductsResource\n","import qs from \"qs\"\n\nimport {\n  AdminPublishableApiKeyDeleteRes,\n  AdminPublishableApiKeysRes,\n  GetPublishableApiKeysParams,\n  AdminPublishableApiKeysListRes,\n  AdminPostPublishableApiKeysReq,\n  AdminPostPublishableApiKeysPublishableApiKeyReq,\n  AdminPostPublishableApiKeySalesChannelsBatchReq,\n  AdminDeletePublishableApiKeySalesChannelsBatchReq,\n  GetPublishableApiKeySalesChannelsParams,\n  AdminSalesChannelsListRes,\n} from \"@medusajs/medusa\"\n\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminPublishableApiKeyResource extends BaseResource {\n  retrieve(\n    id: string,\n    query?: {},\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPublishableApiKeysRes> {\n    let path = `/admin/publishable-api-keys/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  list(\n    query?: GetPublishableApiKeysParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPublishableApiKeysListRes> {\n    let path = `/admin/publishable-api-keys`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  create(\n    payload: AdminPostPublishableApiKeysReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPublishableApiKeysRes> {\n    const path = `/admin/publishable-api-keys`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  update(\n    id: string,\n    payload: AdminPostPublishableApiKeysPublishableApiKeyReq,\n    customHeaders: Record<string, any> = {}\n  ) {\n    const path = `/admin/publishable-api-keys/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPublishableApiKeyDeleteRes> {\n    const path = `/admin/publishable-api-keys/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  revoke(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPublishableApiKeysRes> {\n    const path = `/admin/publishable-api-keys/${id}/revoke`\n    return this.client.request(\"POST\", path, {}, {}, customHeaders)\n  }\n\n  addSalesChannelsBatch(\n    id: string,\n    payload: AdminPostPublishableApiKeySalesChannelsBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPublishableApiKeysRes> {\n    const path = `/admin/publishable-api-keys/${id}/sales-channels/batch`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  deleteSalesChannelsBatch(\n    id: string,\n    payload: AdminDeletePublishableApiKeySalesChannelsBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPublishableApiKeysRes> {\n    const path = `/admin/publishable-api-keys/${id}/sales-channels/batch`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  listSalesChannels(\n    id: string,\n    query?: GetPublishableApiKeySalesChannelsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsListRes> {\n    let path = `/admin/publishable-api-keys/${id}/sales-channels`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminPublishableApiKeyResource\n","import {\n  AdminPostRegionsReq,\n  AdminRegionsRes,\n  AdminPostRegionsRegionReq,\n  AdminRegionsDeleteRes,\n  AdminRegionsListRes,\n  AdminGetRegionsParams,\n  AdminPostRegionsRegionCountriesReq,\n  AdminPostRegionsRegionFulfillmentProvidersReq,\n  AdminPostRegionsRegionPaymentProvidersReq,\n  AdminGetRegionsRegionFulfillmentOptionsRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminRegionsResource extends BaseResource {\n  /**\n   * @description creates a region.\n   * @param payload\n   * @param customHeaders\n   * @returns created region.\n   */\n  create(\n    payload: AdminPostRegionsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description updates a region\n   * @param id id of the region to update.\n   * @param payload update to apply to region.\n   * @param customHeaders\n   * @returns the updated region.\n   */\n  update(\n    id: string,\n    payload: AdminPostRegionsRegionReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description deletes a region\n   * @param id id of region to delete.\n   * @param customHeaders\n   * @returns Deleted response\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsDeleteRes> {\n    const path = `/admin/regions/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description get a region\n   * @param id id of the region to retrieve.\n   * @param customHeaders\n   * @returns the region with the given id\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description lists regions matching a query\n   * @param query query for searching regions\n   * @param customHeaders\n   * @returns a list of regions matching the query.\n   */\n  list(\n    query?: AdminGetRegionsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsListRes> {\n    let path = `/admin/regions`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/regions?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description adds a country to the list of countries in a region\n   * @param id region id\n   * @param payload country data\n   * @param customHeaders\n   * @returns updated region\n   */\n  addCountry(\n    id: string,\n    payload: AdminPostRegionsRegionCountriesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions/${id}/countries`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description remove a country from a region's list of coutnries\n   * @param id region id\n   * @param country_code the 2 character ISO code for the Country.\n   * @param customHeaders\n   * @returns updated region\n   */\n  deleteCountry(\n    id: string,\n    country_code: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions/${id}/countries/${country_code}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description adds a fulfillment provider to a region\n   * @param id region id\n   * @param payload fulfillment provider data\n   * @param customHeaders\n   * @returns updated region\n   */\n  addFulfillmentProvider(\n    id: string,\n    payload: AdminPostRegionsRegionFulfillmentProvidersReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions/${id}/fulfillment-providers`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description remove a fulfillment provider from a region\n   * @param id region id\n   * @param provider_id the if of the fulfillment provider\n   * @param customHeaders\n   * @returns updated region\n   */\n  deleteFulfillmentProvider(\n    id: string,\n    provider_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions/${id}/fulfillment-providers/${provider_id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description retrieves the list of fulfillment options available in a region\n   * @param id region id\n   * @param customHeaders\n   * @returns list of fulfillment options\n   */\n  retrieveFulfillmentOptions(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminGetRegionsRegionFulfillmentOptionsRes> {\n    const path = `/admin/regions/${id}/fulfillment-options`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description adds a payment provider to a region\n   * @param id region id\n   * @param payload payment provider data\n   * @param customHeaders\n   * @returns updated region\n   */\n  addPaymentProvider(\n    id: string,\n    payload: AdminPostRegionsRegionPaymentProvidersReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions/${id}/payment-providers`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description removes a payment provider from a region\n   * @param id region id\n   * @param provider_id the id of the payment provider\n   * @param customHeaders\n   * @returns updated region\n   */\n  deletePaymentProvider(\n    id: string,\n    provider_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions/${id}/payment-providers/${provider_id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminRegionsResource\n","import {\n  AdminPostReservationsReq,\n  AdminPostReservationsReservationReq,\n  AdminReservationsDeleteRes,\n  AdminReservationsRes,\n  AdminGetReservationsParams,\n  AdminReservationsListRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminReservationsResource extends BaseResource {\n  /**\n   * Get a reservation\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @description gets a reservation\n   * @returns The reservation with the provided id\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, unknown> = {}\n  ): ResponsePromise<AdminReservationsRes> {\n    const path = `/admin/reservations/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * List reservations\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @description Lists reservations\n   * @returns A list of reservations matching the provided query\n   */\n  list(\n    query?: AdminGetReservationsParams,\n    customHeaders: Record<string, unknown> = {}\n  ): ResponsePromise<AdminReservationsListRes> {\n    let path = `/admin/reservations`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * create a reservation\n   * @description create a reservation\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @returns the created reservation\n   */\n  create(\n    payload: AdminPostReservationsReq,\n    customHeaders: Record<string, unknown> = {}\n  ): ResponsePromise<AdminReservationsRes> {\n    const path = `/admin/reservations`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * update a reservation\n   * @description update a reservation\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @returns The updated reservation\n   */\n  update(\n    id: string,\n    payload: AdminPostReservationsReservationReq,\n    customHeaders: Record<string, unknown> = {}\n  ): ResponsePromise<AdminReservationsRes> {\n    const path = `/admin/reservations/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * remove a reservation\n   * @description remove a reservation\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @returns reservation removal confirmation\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, unknown> = {}\n  ): ResponsePromise<AdminReservationsDeleteRes> {\n    const path = `/admin/reservations/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminReservationsResource\n","import {\n  AdminPostReturnReasonsReq,\n  AdminReturnReasonsRes,\n  AdminReturnReasonsDeleteRes,\n  AdminReturnReasonsListRes,\n  AdminPostReturnReasonsReasonReq,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminReturnReasonsResource extends BaseResource {\n  /**\n   * @description Creates a return reason.\n   * @param payload\n   * @param customHeaders\n   * @returns Created return reason.\n   */\n  create(\n    payload: AdminPostReturnReasonsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminReturnReasonsRes> {\n    const path = `/admin/return-reasons`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Updates a return reason\n   * @param id id of the return reason to update.\n   * @param payload update to apply to return reason.\n   * @param customHeaders\n   * @returns the updated return reason.\n   */\n  update(\n    id: string,\n    payload: AdminPostReturnReasonsReasonReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminReturnReasonsRes> {\n    const path = `/admin/return-reasons/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description deletes a return reason\n   * @param id id of return reason to delete.\n   * @param customHeaders\n   * @returns Deleted response\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminReturnReasonsDeleteRes> {\n    const path = `/admin/return-reasons/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description retrieves a return reason\n   * @param id id of the return reason to retrieve.\n   * @param customHeaders\n   * @returns the return reason with the given id\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminReturnReasonsRes> {\n    const path = `/admin/return-reasons/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Lists return reasons matching a query\n   * @returns a list of return reasons matching the query.\n   * @param customHeaders\n   */\n  list(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminReturnReasonsListRes> {\n    const path = `/admin/return-reasons`\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminReturnReasonsResource\n","import {\n  AdminGetReturnsParams,\n  AdminPostReturnsReturnReceiveReq,\n  AdminReturnsCancelRes,\n  AdminReturnsListRes,\n  AdminReturnsRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminReturnsResource extends BaseResource {\n  /**\n   * @description cancels a return\n   * @param id id of return to cancel\n   * @param customHeaders\n   * @returns the order for which the return was canceled\n   */\n  cancel(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminReturnsCancelRes> {\n    const path = `/admin/returns/${id}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description receive a return\n   * @param id id of the return to receive.\n   * @param payload items to receive and an optional refund amount\n   * @param customHeaders\n   * @returns the return\n   */\n  receive(\n    id: string,\n    payload: AdminPostReturnsReturnReceiveReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminReturnsRes> {\n    const path = `/admin/returns/${id}/receive`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description lists returns matching a query\n   * @param query query for searching returns\n   * @param customHeaders\n   * @returns a list of returns matching the query\n   */\n  list(\n    query?: AdminGetReturnsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminReturnsListRes> {\n    let path = `/admin/returns/`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/returns?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminReturnsResource\n","import {\n  AdminDeleteSalesChannelsChannelProductsBatchReq,\n  AdminDeleteSalesChannelsChannelStockLocationsReq,\n  AdminGetSalesChannelsParams,\n  AdminPostSalesChannelsChannelProductsBatchReq,\n  AdminPostSalesChannelsChannelStockLocationsReq,\n  AdminPostSalesChannelsReq,\n  AdminPostSalesChannelsSalesChannelReq,\n  AdminSalesChannelsDeleteRes,\n  AdminSalesChannelsListRes,\n  AdminSalesChannelsRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminSalesChannelsResource extends BaseResource {\n  /** retrieve a sales channel\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n   * @description gets a sales channel\n   * @returns a medusa sales channel\n   */\n  retrieve(\n    salesChannelId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsRes> {\n    const path = `/admin/sales-channels/${salesChannelId}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /* *\n   * Create a medusa sales channel\n   * @returns the created channel\n   */\n  create(\n    payload: AdminPostSalesChannelsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsRes> {\n    const path = `/admin/sales-channels`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /** update a sales channel\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n   * @description updates a sales channel\n   * @returns the updated medusa sales channel\n   */\n  update(\n    salesChannelId: string,\n    payload: AdminPostSalesChannelsSalesChannelReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsRes> {\n    const path = `/admin/sales-channels/${salesChannelId}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of sales channels\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n   * @description Retrieve a list of sales channels\n   * @returns the list of sales channel as well as the pagination properties\n   */\n  list(\n    query?: AdminGetSalesChannelsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsListRes> {\n    let path = `/admin/sales-channels`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Delete a sales channel\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n   * @description gets a sales channel\n   * @returns an deletion result\n   */\n  delete(\n    salesChannelId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsDeleteRes> {\n    const path = `/admin/sales-channels/${salesChannelId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Remove products from a sales channel\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n   * @description Remove products from a sales channel\n   * @returns a medusa sales channel\n   */\n  removeProducts(\n    salesChannelId: string,\n    payload: AdminDeleteSalesChannelsChannelProductsBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsRes> {\n    const path = `/admin/sales-channels/${salesChannelId}/products/batch`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Add products to a sales channel\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n   * @description Add products to a sales channel\n   * @returns a medusa sales channel\n   */\n  addProducts(\n    salesChannelId: string,\n    payload: AdminPostSalesChannelsChannelProductsBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsRes> {\n    const path = `/admin/sales-channels/${salesChannelId}/products/batch`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Add a location to a sales channel\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n   * @description Add a stock location to a SalesChannel\n   * @returns the Medusa SalesChannel\n   */\n  addLocation(\n    salesChannelId: string,\n    payload: AdminPostSalesChannelsChannelStockLocationsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsRes> {\n    const path = `/admin/sales-channels/${salesChannelId}/stock-locations`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * remove a location from a sales channel\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n   * @description Remove a stock location from a SalesChannel\n   * @returns an deletion result\n   */\n  removeLocation(\n    salesChannelId: string,\n    payload: AdminDeleteSalesChannelsChannelStockLocationsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsRes> {\n    const path = `/admin/sales-channels/${salesChannelId}/stock-locations`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminSalesChannelsResource\n","import {\n  AdminPostShippingOptionsReq,\n  AdminShippingOptionsRes,\n  AdminPostShippingOptionsOptionReq,\n  AdminShippingOptionsDeleteRes,\n  AdminShippingOptionsListRes,\n  AdminGetShippingOptionsParams,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminShippingOptionsResource extends BaseResource {\n  /**\n   * @description creates a shipping option.\n   * @param payload\n   * @param customHeaders\n   * @returns created shipping option.\n   */\n  create(\n    payload: AdminPostShippingOptionsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingOptionsRes> {\n    const path = `/admin/shipping-options`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description updates a shipping option\n   * @param id id of the shipping option to update.\n   * @param payload update to apply to shipping option.\n   * @param customHeaders\n   * @returns the updated shipping option.\n   */\n  update(\n    id: string,\n    payload: AdminPostShippingOptionsOptionReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingOptionsRes> {\n    const path = `/admin/shipping-options/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description deletes a shipping option\n   * @param id id of shipping option to delete.\n   * @param customHeaders\n   * @returns deleted response\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingOptionsDeleteRes> {\n    const path = `/admin/shipping-options/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description get a shipping option\n   * @param id id of the shipping option to retrieve.\n   * @param customHeaders\n   * @returns the shipping option with the given id\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingOptionsRes> {\n    const path = `/admin/shipping-options/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description lists shipping options matching a query\n   * @param query query for searching shipping options\n   * @param customHeaders\n   * @returns a list of shipping options matching the query.\n   */\n  list(\n    query?: AdminGetShippingOptionsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingOptionsListRes> {\n    let path = `/admin/shipping-options`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/shipping-options?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminShippingOptionsResource\n","import {\n  AdminDeleteShippingProfileRes,\n  AdminPostShippingProfilesProfileReq,\n  AdminPostShippingProfilesReq,\n  AdminShippingProfilesListRes,\n  AdminShippingProfilesRes,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminShippingProfilesResource extends BaseResource {\n  create(\n    payload: AdminPostShippingProfilesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingProfilesRes> {\n    const path = `/admin/shipping-profiles/`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  update(\n    id: string,\n    payload: AdminPostShippingProfilesProfileReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingProfilesRes> {\n    const path = `/admin/shipping-profiles/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDeleteShippingProfileRes> {\n    const path = `/admin/shipping-profiles/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingProfilesRes> {\n    const path = `/admin/shipping-profiles/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  list(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingProfilesListRes> {\n    const path = `/admin/shipping-profiles/`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminShippingProfilesResource\n","import {\n  AdminGetStockLocationsParams,\n  AdminStockLocationsRes,\n  AdminPostStockLocationsLocationReq,\n  AdminPostStockLocationsReq,\n  AdminStockLocationsListRes,\n  AdminStockLocationsDeleteRes,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\nimport qs from \"qs\"\n\nclass AdminStockLocationsResource extends BaseResource {\n  /**\n   * Create a Stock Location\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/stock-location\n   * @description gets a medusa Stock Location\n   * @returns a medusa Stock Location\n   */\n  create(\n    payload: AdminPostStockLocationsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminStockLocationsRes> {\n    const path = `/admin/stock-locations`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a Stock Location\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/stock-location\n   * @description gets a medusa Stock Location\n   * @returns a medusa Stock Location\n   */\n  retrieve(\n    itemId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminStockLocationsRes> {\n    const path = `/admin/stock-locations/${itemId}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Update a Stock Location\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/stock-location\n   * @description updates a Stock Location\n   * @returns the updated medusa Stock Location\n   */\n  update(\n    stockLocationId: string,\n    payload: AdminPostStockLocationsLocationReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminStockLocationsRes> {\n    const path = `/admin/stock-locations/${stockLocationId}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a Stock Location\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/stock-location\n   * @description deletes a Stock Location\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminStockLocationsDeleteRes> {\n    const path = `/admin/stock-locations/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of Stock Locations\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/stock-location\n   * @description Retrieve a list of Stock Locations\n   * @returns the list of Stock Locations as well as the pagination properties\n   */\n  list(\n    query?: AdminGetStockLocationsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminStockLocationsListRes> {\n    let path = `/admin/stock-locations`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminStockLocationsResource\n","import {\n  AdminExtendedStoresRes,\n  AdminPaymentProvidersList,\n  AdminPostStoreReq,\n  AdminStoresRes,\n  AdminTaxProvidersList,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminStoresResource extends BaseResource {\n  /**\n   * @description Updates the store\n   * @param payload update to apply to the store.\n   * @param customHeaders\n   * @returns the updated store.\n   */\n  update(\n    payload: AdminPostStoreReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminStoresRes> {\n    const path = `/admin/store/`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description adds a currency to the store.\n   * @param currency_code code of the currency to add\n   * @param customHeaders\n   * @returns updated store.\n   */\n  addCurrency(\n    currency_code: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminStoresRes> {\n    const path = `/admin/store/${currency_code}`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description deletes a currency from the available store currencies\n   * @param currency_code currency code of the currency to delete from the store.\n   * @param customHeaders\n   * @returns updated store\n   */\n  deleteCurrency(\n    currency_code: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminStoresRes> {\n    const path = `/admin/store/currencies/${currency_code}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description gets a medusa store\n   * @returns a medusa store\n   */\n  retrieve(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminExtendedStoresRes> {\n    const path = `/admin/store/`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Lists the store's payment providers\n   * @returns a list of payment providers configured on the store\n   */\n  listPaymentProviders(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPaymentProvidersList> {\n    const path = `/admin/store/payment-providers`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Lists the store's payment providers\n   * @returns a list of payment providers configured on the store\n   */\n  listTaxProviders(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxProvidersList> {\n    const path = `/admin/store/tax-providers`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminStoresResource\n","import {\n  AdminSwapsRes,\n  AdminSwapsListRes,\n  AdminGetSwapsParams,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminSwapsResource extends BaseResource {\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSwapsRes> {\n    const path = `/admin/swaps/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  list(\n    query?: AdminGetSwapsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSwapsListRes> {\n    let path = `/admin/swaps/`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/swaps?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminSwapsResource\n","import {\n  AdminTaxRatesRes,\n  AdminTaxRatesListRes,\n  AdminTaxRatesDeleteRes,\n  AdminGetTaxRatesParams,\n  AdminGetTaxRatesTaxRateParams,\n  AdminDeleteTaxRatesTaxRateProductsReq,\n  AdminDeleteTaxRatesTaxRateProductsParams,\n  AdminDeleteTaxRatesTaxRateProductTypesReq,\n  AdminDeleteTaxRatesTaxRateProductTypesParams,\n  AdminDeleteTaxRatesTaxRateShippingOptionsReq,\n  AdminDeleteTaxRatesTaxRateShippingOptionsParams,\n  AdminPostTaxRatesReq,\n  AdminPostTaxRatesTaxRateReq,\n  AdminPostTaxRatesTaxRateProductsReq,\n  AdminPostTaxRatesTaxRateProductTypesReq,\n  AdminPostTaxRatesTaxRateShippingOptionsReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminTaxRatesResource extends BaseResource {\n  retrieve(\n    id: string,\n    query?: AdminGetTaxRatesTaxRateParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates/${id}?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  list(\n    query?: AdminGetTaxRatesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesListRes> {\n    let path = `/admin/tax-rates`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  create(\n    payload: AdminPostTaxRatesReq,\n    query?: AdminGetTaxRatesTaxRateParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  update(\n    id: string,\n    payload: AdminPostTaxRatesTaxRateReq,\n    query?: AdminGetTaxRatesTaxRateParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates/${id}?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  addProducts(\n    id: string,\n    payload: AdminPostTaxRatesTaxRateProductsReq,\n    query?: AdminGetTaxRatesTaxRateParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates/${id}/products/batch`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates/${id}/products/batch?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  addProductTypes(\n    id: string,\n    payload: AdminPostTaxRatesTaxRateProductTypesReq,\n    query?: AdminGetTaxRatesTaxRateParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates/${id}/product-types/batch`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates/${id}/product-types/batch?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  addShippingOptions(\n    id: string,\n    payload: AdminPostTaxRatesTaxRateShippingOptionsReq,\n    query?: AdminGetTaxRatesTaxRateParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates/${id}/shipping-options/batch`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates/${id}/shipping-options/batch?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  removeProducts(\n    id: string,\n    payload: AdminDeleteTaxRatesTaxRateProductsReq,\n    query?: AdminDeleteTaxRatesTaxRateProductsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates/${id}/products/batch`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates/${id}/products/batch?${queryString}`\n    }\n\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  removeProductTypes(\n    id: string,\n    payload: AdminDeleteTaxRatesTaxRateProductTypesReq,\n    query?: AdminDeleteTaxRatesTaxRateProductTypesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates/${id}/product-types/batch`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates/${id}/product-types/batch?${queryString}`\n    }\n\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  removeShippingOptions(\n    id: string,\n    payload: AdminDeleteTaxRatesTaxRateShippingOptionsReq,\n    query?: AdminDeleteTaxRatesTaxRateShippingOptionsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates/${id}/shipping-options/batch`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates/${id}/shipping-options/batch?${queryString}`\n    }\n\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesDeleteRes> {\n    const path = `/admin/tax-rates/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminTaxRatesResource\n","import {\n  AdminDeleteUploadsReq,\n  AdminDeleteUploadsRes,\n  AdminPostUploadsDownloadUrlReq,\n  AdminUploadsDownloadUrlRes,\n  AdminUploadsRes,\n} from \"@medusajs/medusa\"\nimport { AdminCreateUploadPayload, ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminUploadsResource extends BaseResource {\n  private headers = {\n    \"Content-Type\": \"multipart/form-data\",\n  }\n\n  /**\n   * @description Uploads at least one file to the specific fileservice that is installed in Medusa.\n   * @param file File or array of files to upload.\n   * @returns Uploaded file or files.\n   */\n  create(file: AdminCreateUploadPayload): ResponsePromise<AdminUploadsRes> {\n    const path = `/admin/uploads`\n\n    const payload = this._createPayload(file)\n\n    return this.client.request(\"POST\", path, payload, {}, this.headers)\n  }\n\n  /**\n   * @description Uploads at least one file with ACL or a non-public bucket to the specific fileservice that is installed in Medusa.\n   * @param file File or array of files to upload.\n   * @returns Uploaded file or files.\n   */\n  createProtected(\n    file: AdminCreateUploadPayload\n  ): ResponsePromise<AdminUploadsRes> {\n    const path = `/admin/uploads/protected`\n\n    const payload = this._createPayload(file)\n\n    return this.client.request(\"POST\", path, payload, {}, this.headers)\n  }\n\n  delete(\n    payload: AdminDeleteUploadsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDeleteUploadsRes> {\n    const path = `/admin/uploads`\n\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  getPresignedDownloadUrl(\n    payload: AdminPostUploadsDownloadUrlReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminUploadsDownloadUrlRes> {\n    const path = `/admin/uploads/download-url`\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  private _createPayload(file: AdminCreateUploadPayload) {\n    const payload = new FormData()\n\n    if (Array.isArray(file)) {\n      file.forEach((f) => payload.append(\"files\", f))\n    } else {\n      payload.append(\"files\", file)\n    }\n\n    return payload\n  }\n}\n\nexport default AdminUploadsResource\n","import {\n  AdminDeleteUserRes,\n  AdminResetPasswordRequest,\n  AdminResetPasswordTokenRequest,\n  AdminUserRes,\n  AdminUsersListRes,\n} from \"@medusajs/medusa\"\nimport {\n  ResponsePromise,\n  AdminCreateUserPayload,\n  AdminUpdateUserPayload,\n} from \"../..\"\nimport BaseResource from \"../base\"\n\nclass AdminUsersResource extends BaseResource {\n  /**\n   * @description resets password by re-sending password token.\n   * @param payload payload for generating reset-password token.\n   * @param customHeaders\n   * @returns\n   */\n  sendResetPasswordToken(\n    payload: AdminResetPasswordTokenRequest,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<void> {\n    const path = `/admin/users/password-token`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description resets the users password given the correct token.\n   * @param payload reset password information.\n   * @param customHeaders\n   * @returns\n   */\n  resetPassword(\n    payload: AdminResetPasswordRequest,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminUserRes> {\n    const path = `admin/users/reset-password`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieves a given user\n   * @param id id of the user\n   * @param customHeaders\n   * @returns the user\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminUserRes> {\n    const path = `/admin/users/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description creates a user with the provided information\n   * @param payload user creation request body\n   * @param customHeaders\n   * @returns created user\n   */\n  create(\n    payload: AdminCreateUserPayload,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminUserRes> {\n    const path = `/admin/users`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description updates a given user\n   * @param id id of the user to update\n   * @param payload user update request body\n   * @param customHeaders\n   * @returns the updated user\n   */\n  update(\n    id: string,\n    payload: AdminUpdateUserPayload,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminUserRes> {\n    const path = `/admin/users/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description deletes a user\n   * @param id id of the user to be deleted\n   * @param customHeaders\n   * @returns delete response\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDeleteUserRes> {\n    const path = `/admin/users/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description lists all users\n   * @returns a list of all users\n   */\n  list(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminUsersListRes> {\n    const path = `/admin/users`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminUsersResource\n","import {\n  AdminGetVariantParams,\n  AdminGetVariantsParams,\n  AdminGetVariantsVariantInventoryRes,\n  AdminVariantsListRes,\n  AdminVariantsRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../..\"\nimport BaseResource from \"../base\"\n\nclass AdminVariantsResource extends BaseResource {\n  /**\n   * List product variants\n   * @param query Query to filter variants by\n   * @param customHeaders custom headers\n   * @returns A list of variants satisfying the criteria of the query\n   */\n  list(\n    query?: AdminGetVariantsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminVariantsListRes> {\n    let path = `/admin/variants`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/variants?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Get a product variant\n   * @param id Query to filter variants by\n   * @param customHeaders custom headers\n   * @returns A list of variants satisfying the criteria of the query\n   */\n  retrieve(\n    id: string,\n    query?: AdminGetVariantParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminVariantsRes> {\n    let path = `/admin/variants/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/variants?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   *\n   * @param variantId id of the variant to fetch inventory for\n   * @param customHeaders custom headers\n   * @returns\n   */\n  getInventory(\n    variantId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminGetVariantsVariantInventoryRes> {\n    const path = `/admin/variants/${variantId}/inventory`\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminVariantsResource\n","import BaseResource from \"../base\"\nimport AdminAuthResource from \"./auth\"\nimport AdminBatchJobsResource from \"./batch-jobs\"\nimport AdminCollectionsResource from \"./collections\"\nimport AdminCurrenciesResource from \"./currencies\"\nimport AdminCustomerGroupsResource from \"./customer-groups\"\nimport AdminCustomersResource from \"./customers\"\nimport AdminDiscountsResource from \"./discounts\"\nimport AdminDraftOrdersResource from \"./draft-orders\"\nimport AdminGiftCardsResource from \"./gift-cards\"\nimport AdminInventoryItemsResource from \"./inventory-item\"\nimport AdminInvitesResource from \"./invites\"\nimport AdminNotesResource from \"./notes\"\nimport AdminNotificationsResource from \"./notifications\"\nimport AdminOrderEditsResource from \"./order-edits\"\nimport AdminOrdersResource from \"./orders\"\nimport AdminPaymentCollectionsResource from \"./payment-collections\"\nimport AdminPaymentsResource from \"./payments\"\nimport AdminPriceListResource from \"./price-lists\"\nimport AdminProductCategoriesResource from \"./product-categories\"\nimport AdminProductTagsResource from \"./product-tags\"\nimport AdminProductTypesResource from \"./product-types\"\nimport AdminProductsResource from \"./products\"\nimport AdminPublishableApiKeyResource from \"./publishable-api-keys\"\nimport AdminRegionsResource from \"./regions\"\nimport AdminReservationsResource from \"./reservations\"\nimport AdminReturnReasonsResource from \"./return-reasons\"\nimport AdminReturnsResource from \"./returns\"\nimport AdminSalesChannelsResource from \"./sales-channels\"\nimport AdminShippingOptionsResource from \"./shipping-options\"\nimport AdminShippingProfilesResource from \"./shipping-profiles\"\nimport AdminStockLocationsResource from \"./stock-locations\"\nimport AdminStoresResource from \"./store\"\nimport AdminSwapsResource from \"./swaps\"\nimport AdminTaxRatesResource from \"./tax-rates\"\nimport AdminUploadsResource from \"./uploads\"\nimport AdminUsersResource from \"./users\"\nimport AdminVariantsResource from \"./variants\"\n\nclass Admin extends BaseResource {\n  public auth = new AdminAuthResource(this.client)\n  public batchJobs = new AdminBatchJobsResource(this.client)\n  public customers = new AdminCustomersResource(this.client)\n  public customerGroups = new AdminCustomerGroupsResource(this.client)\n  public discounts = new AdminDiscountsResource(this.client)\n  public currencies = new AdminCurrenciesResource(this.client)\n  public collections = new AdminCollectionsResource(this.client)\n  public draftOrders = new AdminDraftOrdersResource(this.client)\n  public giftCards = new AdminGiftCardsResource(this.client)\n  public invites = new AdminInvitesResource(this.client)\n  public inventoryItems = new AdminInventoryItemsResource(this.client)\n  public notes = new AdminNotesResource(this.client)\n  public priceLists = new AdminPriceListResource(this.client)\n  public products = new AdminProductsResource(this.client)\n  public productTags = new AdminProductTagsResource(this.client)\n  public productTypes = new AdminProductTypesResource(this.client)\n  public users = new AdminUsersResource(this.client)\n  public returns = new AdminReturnsResource(this.client)\n  public orders = new AdminOrdersResource(this.client)\n  public orderEdits = new AdminOrderEditsResource(this.client)\n  public publishableApiKeys = new AdminPublishableApiKeyResource(this.client)\n  public returnReasons = new AdminReturnReasonsResource(this.client)\n  public variants = new AdminVariantsResource(this.client)\n  public salesChannels = new AdminSalesChannelsResource(this.client)\n  public swaps = new AdminSwapsResource(this.client)\n  public shippingProfiles = new AdminShippingProfilesResource(this.client)\n  public stockLocations = new AdminStockLocationsResource(this.client)\n  public store = new AdminStoresResource(this.client)\n  public shippingOptions = new AdminShippingOptionsResource(this.client)\n  public regions = new AdminRegionsResource(this.client)\n  public reservations = new AdminReservationsResource(this.client)\n  public notifications = new AdminNotificationsResource(this.client)\n  public taxRates = new AdminTaxRatesResource(this.client)\n  public uploads = new AdminUploadsResource(this.client)\n  public paymentCollections = new AdminPaymentCollectionsResource(this.client)\n  public payments = new AdminPaymentsResource(this.client)\n  public productCategories = new AdminProductCategoriesResource(this.client)\n}\n\nexport {\n  Admin,\n  AdminAuthResource,\n  AdminBatchJobsResource,\n  AdminCollectionsResource,\n  AdminCurrenciesResource,\n  AdminCustomerGroupsResource,\n  AdminCustomersResource,\n  AdminDiscountsResource,\n  AdminDraftOrdersResource,\n  AdminGiftCardsResource,\n  AdminInvitesResource,\n  AdminNotesResource,\n  AdminNotificationsResource,\n  AdminOrdersResource,\n  AdminOrderEditsResource,\n  AdminPriceListResource,\n  AdminProductTagsResource,\n  AdminProductTypesResource,\n  AdminProductsResource,\n  AdminPublishableApiKeyResource,\n  AdminRegionsResource,\n  AdminReturnReasonsResource,\n  AdminReturnsResource,\n  AdminSalesChannelsResource,\n  AdminShippingOptionsResource,\n  AdminShippingProfilesResource,\n  AdminStockLocationsResource,\n  AdminStoresResource,\n  AdminSwapsResource,\n  AdminTaxRatesResource,\n  AdminUploadsResource,\n  AdminUsersResource,\n  AdminVariantsResource,\n  AdminPaymentCollectionsResource,\n  AdminPaymentsResource,\n  AdminProductCategoriesResource,\n}\n","import MedusaError from \"./error\"\nimport KeyManager from \"./key-manager\"\nimport Client, { Config } from \"./request\"\nimport {\n  Admin,\n  AuthResource,\n  CartsResource,\n  CollectionsResource,\n  CustomersResource,\n  GiftCardsResource,\n  OrderEditsResource,\n  OrdersResource,\n  PaymentCollectionsResource,\n  PaymentMethodsResource,\n  ProductCategoriesResource,\n  ProductsResource,\n  ProductTagsResource,\n  ProductTypesResource,\n  RegionsResource,\n  ReturnReasonsResource,\n  ReturnsResource,\n  ShippingOptionsResource,\n  SwapsResource,\n} from \"./resources\"\n\nclass Medusa {\n  public client: Client\n  public admin: Admin\n\n  public auth: AuthResource\n  public carts: CartsResource\n  public customers: CustomersResource\n  public errors: MedusaError\n  public orders: OrdersResource\n  public orderEdits: OrderEditsResource\n  public products: ProductsResource\n  public productTypes: ProductTypesResource\n  public regions: RegionsResource\n  public returnReasons: ReturnReasonsResource\n  public returns: ReturnsResource\n  public shippingOptions: ShippingOptionsResource\n  public swaps: SwapsResource\n  public collections: CollectionsResource\n  public giftCards: GiftCardsResource\n  public paymentMethods: PaymentMethodsResource\n  public paymentCollections: PaymentCollectionsResource\n  public productTags: ProductTagsResource\n  public productCategories: ProductCategoriesResource\n\n  constructor(config: Config) {\n    this.client = new Client(config)\n\n    this.admin = new Admin(this.client)\n\n    this.auth = new AuthResource(this.client)\n    this.carts = new CartsResource(this.client)\n    this.customers = new CustomersResource(this.client)\n    this.errors = new MedusaError()\n    this.orders = new OrdersResource(this.client)\n    this.orderEdits = new OrderEditsResource(this.client)\n    this.products = new ProductsResource(this.client)\n    this.productTypes = new ProductTypesResource(this.client)\n    this.regions = new RegionsResource(this.client)\n    this.returnReasons = new ReturnReasonsResource(this.client)\n    this.returns = new ReturnsResource(this.client)\n    this.shippingOptions = new ShippingOptionsResource(this.client)\n    this.swaps = new SwapsResource(this.client)\n    this.collections = new CollectionsResource(this.client)\n    this.giftCards = new GiftCardsResource(this.client)\n    this.paymentMethods = new PaymentMethodsResource(this.client)\n    this.paymentCollections = new PaymentCollectionsResource(this.client)\n    this.productTags = new ProductTagsResource(this.client)\n    this.productCategories = new ProductCategoriesResource(this.client)\n  }\n\n  /**\n   * Set a PublishableApiKey that will be sent with each request\n   * to define the scope of available resources.\n   *\n   * @param key - PublishableApiKey identifier\n   */\n  setPublishableKey(key: string) {\n    KeyManager.registerPublishableApiKey(key)\n  }\n}\n\nexport default Medusa\nexport { default as MedusaError } from \"./error\"\nexport { default as KeyManager } from \"./key-manager\"\nexport { Config, default as Client } from \"./request\"\nexport * from \"./resources\"\nexport * from \"./typings\"\n"],"mappings":"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","names":["MedusaError","type","ErrorType","MedusaInvalidRequestError","MedusaAuthenticationError","MedusaAPIError","MedusaPermissionError","MedusaConnectionError","KeyManager","key","key_manager_default","axios","rax","uuidv4","unAuthenticatedAdminEndpoints","defaultConfig","Client","config","err","numRetries","maxRetries","obj","result","header","text","path","method","userHeaders","customHeaders","defaultHeaders","publishableApiKey","key_manager_default","uuidv4","client","axios","cfg","payload","options","reqOpts","data","response","request_default","BaseResource","client","AddressesResource","BaseResource","payload","customHeaders","path","address_id","addresses_default","AuthResource","BaseResource","payload","customHeaders","path","email","auth_default","LineItemsResource","BaseResource","cart_id","payload","customHeaders","path","line_id","line_items_default","CartsResource","BaseResource","line_items_default","cart_id","payload","customHeaders","path","code","provider_id","carts_default","qs","CollectionsResource","BaseResource","id","customHeaders","path","query","qs","collections_default","qs","PaymentMethodsResource","BaseResource","customHeaders","path","payment_methods_default","CustomerResource","BaseResource","payment_methods_default","addresses_default","payload","customHeaders","path","params","query","qs","customers_default","GiftCardsResource","BaseResource","code","customHeaders","path","gift_cards_default","OrderEditsResource","BaseResource","id","customHeaders","path","payload","order_edits_default","qs","OrdersResource","BaseResource","id","customHeaders","path","cart_id","payload","qs","orders_default","qs","PaymentCollectionsResource","BaseResource","id","query","customHeaders","path","queryString","session_id","payload","payment_collections_default","qs","ProductCategoriesResource","BaseResource","id","query","customHeaders","path","queryString","qs","product_categories_default","qs","ProductTagsResource","BaseResource","query","customHeaders","path","queryString","qs","product_tags_default","qs","ProductTypesResource","BaseResource","query","customHeaders","path","queryString","qs","product_types_default","qs","qs","ProductVariantsResource","BaseResource","id","customHeaders","path","query","queryString","qs","product_variants_default","ProductsResource","BaseResource","product_variants_default","id","customHeaders","path","searchOptions","query","qs","products_default","RegionsResource","BaseResource","customHeaders","path","id","regions_default","ReturnReasonsResource","BaseResource","id","customHeaders","path","return_reasons_default","ReturnsResource","BaseResource","payload","customHeaders","path","returns_default","qs","ShippingOptionsResource","BaseResource","cart_id","customHeaders","path","query","qs","shipping_options_default","SwapsResource","BaseResource","payload","customHeaders","path","cart_id","swaps_default","AdminAuthResource","BaseResource","customHeaders","path","payload","auth_default","qs","stringifyNullProperties","input","convertProperties","obj","res","acc","key","AdminBatchJobsResource","BaseResource","payload","customHeaders","path","query","qs","stringifyNullProperties","batchJobId","batch_jobs_default","qs","AdminCollectionsResource","BaseResource","payload","customHeaders","path","id","query","qs","collections_default","qs","AdminCurrenciesResource","BaseResource","query","customHeaders","path","queryString","qs","code","payload","currencies_default","qs","AdminCustomerGroupsResource","BaseResource","payload","customHeaders","path","id","query","queryString","qs","customer_groups_default","qs","AdminCustomersResource","BaseResource","payload","customHeaders","path","id","query","qs","customers_default","qs","AdminDiscountsResource","BaseResource","id","regionId","customHeaders","path","payload","code","query","queryString","qs","discountId","conditionId","discounts_default","qs","AdminDraftOrdersResource","BaseResource","payload","customHeaders","path","id","itemId","query","qs","draft_orders_default","qs","AdminGiftCardsResource","BaseResource","payload","customHeaders","path","id","query","qs","gift_cards_default","qs","AdminInventoryItemsResource","BaseResource","inventoryItemId","query","customHeaders","path","queryString","payload","locationId","inventory_item_default","AdminInvitesResource","BaseResource","payload","customHeaders","path","id","invites_default","qs","AdminNotesResource","BaseResource","payload","customHeaders","path","id","query","qs","notes_default","qs","AdminNotificationsResource","BaseResource","query","customHeaders","path","qs","id","payload","notifications_default","qs","AdminOrderEditsResource","BaseResource","id","query","customHeaders","path","queryString","payload","orderEditId","itemChangeId","itemId","order_edits_default","qs","AdminOrdersResource","BaseResource","id","payload","customHeaders","path","query","queryString","qs","fulfillmentId","swapId","claimId","orders_default","qs","AdminPaymentCollectionsResource","BaseResource","id","query","customHeaders","path","queryString","payload","payment_collections_default","qs","AdminPaymentsResource","BaseResource","id","query","customHeaders","path","queryString","qs","payload","payments_default","AdminPriceListResource","BaseResource","payload","customHeaders","path","id","query","queryString","priceListId","productId","variantId","price_lists_default","qs","AdminProductCategoriesResource","BaseResource","productCategoryId","query","customHeaders","path","queryString","qs","payload","product_categories_default","qs","AdminProductTagsResource","BaseResource","query","path","qs","product_tags_default","qs","AdminProductTypesResource","BaseResource","query","customHeaders","path","queryString","qs","product_types_default","qs","AdminProductsResource","BaseResource","payload","customHeaders","path","id","query","qs","variantId","optionId","products_default","qs","AdminPublishableApiKeyResource","BaseResource","id","query","customHeaders","path","queryString","qs","payload","publishable_api_keys_default","qs","AdminRegionsResource","BaseResource","payload","customHeaders","path","id","query","qs","country_code","provider_id","regions_default","qs","AdminReservationsResource","BaseResource","id","customHeaders","path","query","queryString","qs","payload","reservations_default","AdminReturnReasonsResource","BaseResource","payload","customHeaders","path","id","return_reasons_default","qs","AdminReturnsResource","BaseResource","id","customHeaders","path","payload","query","qs","returns_default","qs","AdminSalesChannelsResource","BaseResource","salesChannelId","customHeaders","path","payload","query","queryString","qs","sales_channels_default","qs","AdminShippingOptionsResource","BaseResource","payload","customHeaders","path","id","query","qs","shipping_options_default","AdminShippingProfilesResource","BaseResource","payload","customHeaders","path","id","shipping_profiles_default","qs","AdminStockLocationsResource","BaseResource","payload","customHeaders","path","itemId","stockLocationId","id","query","queryString","stock_locations_default","AdminStoresResource","BaseResource","payload","customHeaders","path","currency_code","store_default","qs","AdminSwapsResource","BaseResource","id","customHeaders","path","query","qs","swaps_default","qs","AdminTaxRatesResource","BaseResource","id","query","customHeaders","path","queryString","qs","payload","tax_rates_default","AdminUploadsResource","BaseResource","file","path","payload","customHeaders","f","uploads_default","AdminUsersResource","BaseResource","payload","customHeaders","path","id","users_default","qs","AdminVariantsResource","BaseResource","query","customHeaders","path","qs","id","variantId","variants_default","Admin","BaseResource","auth_default","batch_jobs_default","customers_default","customer_groups_default","discounts_default","currencies_default","collections_default","draft_orders_default","gift_cards_default","invites_default","inventory_item_default","notes_default","price_lists_default","products_default","product_tags_default","product_types_default","users_default","returns_default","orders_default","order_edits_default","publishable_api_keys_default","return_reasons_default","variants_default","sales_channels_default","swaps_default","shipping_profiles_default","stock_locations_default","store_default","shipping_options_default","regions_default","reservations_default","notifications_default","tax_rates_default","uploads_default","payment_collections_default","payments_default","product_categories_default","Medusa","config","request_default","Admin","auth_default","carts_default","customers_default","MedusaError","orders_default","order_edits_default","products_default","product_types_default","regions_default","return_reasons_default","returns_default","shipping_options_default","swaps_default","collections_default","gift_cards_default","payment_methods_default","payment_collections_default","product_tags_default","product_categories_default","key","key_manager_default","src_default"]}