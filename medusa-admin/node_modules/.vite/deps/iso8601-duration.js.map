{
  "version": 3,
  "sources": ["../../iso8601-duration/src/index.js"],
  "sourcesContent": ["/**\n * @description A module for parsing ISO8601 durations\n */\n\n/**\n * The pattern used for parsing ISO8601 duration (PnYnMnDTnHnMnS).\n * This does not cover the week format PnW.\n */\n\n// PnYnMnDTnHnMnS\nconst numbers = '\\\\d+(?:[\\\\.,]\\\\d+)?'\nconst weekPattern = `(${numbers}W)`\nconst datePattern = `(${numbers}Y)?(${numbers}M)?(${numbers}D)?`\nconst timePattern = `T(${numbers}H)?(${numbers}M)?(${numbers}S)?`\n\nconst iso8601 = `P(?:${weekPattern}|${datePattern}(?:${timePattern})?)`\nconst objMap = ['weeks', 'years', 'months', 'days', 'hours', 'minutes', 'seconds']\n\nconst defaultDuration = Object.freeze({\n  years: 0,\n  months: 0,\n  weeks: 0,\n  days: 0,\n  hours: 0,\n  minutes: 0,\n  seconds: 0\n})\n\n/**\n * The ISO8601 regex for matching / testing durations\n */\nexport const pattern = new RegExp(iso8601)\n\n/** Parse PnYnMnDTnHnMnS format to object\n * @param {string} durationString - PnYnMnDTnHnMnS formatted string\n * @return {Object} - With a property for each part of the pattern\n */\nexport const parse = durationString => {\n  // Slice away first entry in match-array\n  return durationString.match(pattern).slice(1).reduce((prev, next, idx) => {\n    prev[objMap[idx]] = parseFloat(next) || 0\n    return prev\n  }, {})\n}\n\n/**\n * Convert ISO8601 duration object to an end Date.\n *\n * @param {Object} duration - The duration object\n * @param {Date} startDate - The starting Date for calculating the duration\n * @return {Date} - The resulting end Date\n */\nexport const end = (duration, startDate) => {\n  duration = Object.assign({}, defaultDuration, duration)\n\n  // Create two equal timestamps, add duration to 'then' and return time difference\n  const timestamp = (startDate ? startDate.getTime() : Date.now())\n  const then = new Date(timestamp)\n\n  then.setFullYear(then.getFullYear() + duration.years)\n  then.setMonth(then.getMonth() + duration.months)\n  then.setDate(then.getDate() + duration.days)\n  then.setHours(then.getHours() + duration.hours)\n  then.setMinutes(then.getMinutes() + duration.minutes)\n  // Then.setSeconds(then.getSeconds() + duration.seconds);\n  then.setMilliseconds(then.getMilliseconds() + (duration.seconds * 1000))\n  // Special case weeks\n  then.setDate(then.getDate() + (duration.weeks * 7))\n\n  return then\n}\n\n/**\n * Convert ISO8601 duration object to seconds\n *\n * @param {Object} duration - The duration object\n * @param {Date} startDate - The starting point for calculating the duration\n * @return {Number}\n */\nexport const toSeconds = (duration, startDate) => {\n  duration = Object.assign({}, defaultDuration, duration)\n\n  const timestamp = (startDate ? startDate.getTime() : Date.now())\n  const now = new Date(timestamp)\n  const then = end(duration, now)\n\n  const seconds = (then.getTime() - now.getTime()) / 1000\n  return seconds\n}\n\nexport default {\n  end,\n  toSeconds,\n  pattern,\n  parse\n}\n"],
  "mappings": ";;;AAUA,IAAM,UAAU;AAChB,IAAM,cAAc,IAAI;AACxB,IAAM,cAAc,IAAI,cAAc,cAAc;AACpD,IAAM,cAAc,KAAK,cAAc,cAAc;AAErD,IAAM,UAAU,OAAO,eAAe,iBAAiB;AACvD,IAAM,SAAS,CAAC,SAAS,SAAS,UAAU,QAAQ,SAAS,WAAW,SAAS;AAEjF,IAAM,kBAAkB,OAAO,OAAO;AAAA,EACpC,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,MAAM;AAAA,EACN,OAAO;AAAA,EACP,SAAS;AAAA,EACT,SAAS;AACX,CAAC;AAKM,IAAM,UAAU,IAAI,OAAO,OAAO;AAMlC,IAAM,QAAQ,oBAAkB;AAErC,SAAO,eAAe,MAAM,OAAO,EAAE,MAAM,CAAC,EAAE,OAAO,CAAC,MAAM,MAAM,QAAQ;AACxE,SAAK,OAAO,GAAG,CAAC,IAAI,WAAW,IAAI,KAAK;AACxC,WAAO;AAAA,EACT,GAAG,CAAC,CAAC;AACP;AASO,IAAM,MAAM,CAAC,UAAU,cAAc;AAC1C,aAAW,OAAO,OAAO,CAAC,GAAG,iBAAiB,QAAQ;AAGtD,QAAM,YAAa,YAAY,UAAU,QAAQ,IAAI,KAAK,IAAI;AAC9D,QAAM,OAAO,IAAI,KAAK,SAAS;AAE/B,OAAK,YAAY,KAAK,YAAY,IAAI,SAAS,KAAK;AACpD,OAAK,SAAS,KAAK,SAAS,IAAI,SAAS,MAAM;AAC/C,OAAK,QAAQ,KAAK,QAAQ,IAAI,SAAS,IAAI;AAC3C,OAAK,SAAS,KAAK,SAAS,IAAI,SAAS,KAAK;AAC9C,OAAK,WAAW,KAAK,WAAW,IAAI,SAAS,OAAO;AAEpD,OAAK,gBAAgB,KAAK,gBAAgB,IAAK,SAAS,UAAU,GAAK;AAEvE,OAAK,QAAQ,KAAK,QAAQ,IAAK,SAAS,QAAQ,CAAE;AAElD,SAAO;AACT;AASO,IAAM,YAAY,CAAC,UAAU,cAAc;AAChD,aAAW,OAAO,OAAO,CAAC,GAAG,iBAAiB,QAAQ;AAEtD,QAAM,YAAa,YAAY,UAAU,QAAQ,IAAI,KAAK,IAAI;AAC9D,QAAM,MAAM,IAAI,KAAK,SAAS;AAC9B,QAAM,OAAO,IAAI,UAAU,GAAG;AAE9B,QAAM,WAAW,KAAK,QAAQ,IAAI,IAAI,QAAQ,KAAK;AACnD,SAAO;AACT;AAEA,IAAO,cAAQ;AAAA,EACb;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;",
  "names": []
}
