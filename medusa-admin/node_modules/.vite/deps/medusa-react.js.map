{
  "version": 3,
  "sources": ["../../@medusajs/medusa-js/node_modules/axios/lib/helpers/bind.js", "../../@medusajs/medusa-js/node_modules/axios/lib/utils.js", "../../@medusajs/medusa-js/node_modules/axios/lib/helpers/buildURL.js", "../../@medusajs/medusa-js/node_modules/axios/lib/core/InterceptorManager.js", "../../@medusajs/medusa-js/node_modules/axios/lib/helpers/normalizeHeaderName.js", "../../@medusajs/medusa-js/node_modules/axios/lib/core/enhanceError.js", "../../@medusajs/medusa-js/node_modules/axios/lib/core/createError.js", "../../@medusajs/medusa-js/node_modules/axios/lib/core/settle.js", "../../@medusajs/medusa-js/node_modules/axios/lib/helpers/cookies.js", "../../@medusajs/medusa-js/node_modules/axios/lib/helpers/isAbsoluteURL.js", "../../@medusajs/medusa-js/node_modules/axios/lib/helpers/combineURLs.js", "../../@medusajs/medusa-js/node_modules/axios/lib/core/buildFullPath.js", "../../@medusajs/medusa-js/node_modules/axios/lib/helpers/parseHeaders.js", "../../@medusajs/medusa-js/node_modules/axios/lib/helpers/isURLSameOrigin.js", "../../@medusajs/medusa-js/node_modules/axios/lib/cancel/Cancel.js", "../../@medusajs/medusa-js/node_modules/axios/lib/adapters/xhr.js", "../../@medusajs/medusa-js/node_modules/axios/lib/defaults.js", "../../@medusajs/medusa-js/node_modules/axios/lib/core/transformData.js", "../../@medusajs/medusa-js/node_modules/axios/lib/cancel/isCancel.js", "../../@medusajs/medusa-js/node_modules/axios/lib/core/dispatchRequest.js", "../../@medusajs/medusa-js/node_modules/axios/lib/core/mergeConfig.js", "../../@medusajs/medusa-js/node_modules/axios/lib/env/data.js", "../../@medusajs/medusa-js/node_modules/axios/lib/helpers/validator.js", "../../@medusajs/medusa-js/node_modules/axios/lib/core/Axios.js", "../../@medusajs/medusa-js/node_modules/axios/lib/cancel/CancelToken.js", "../../@medusajs/medusa-js/node_modules/axios/lib/helpers/spread.js", "../../@medusajs/medusa-js/node_modules/axios/lib/helpers/isAxiosError.js", "../../@medusajs/medusa-js/node_modules/axios/lib/axios.js", "../../@medusajs/medusa-js/node_modules/axios/index.js", "../../@medusajs/medusa-js/src/error.ts", "../../@medusajs/medusa-js/src/key-manager.ts", "../../@medusajs/medusa-js/src/request.ts", "../../@medusajs/medusa-js/src/resources/base.ts", "../../@medusajs/medusa-js/src/resources/addresses.ts", "../../@medusajs/medusa-js/src/resources/auth.ts", "../../@medusajs/medusa-js/src/resources/line-items.ts", "../../@medusajs/medusa-js/src/resources/carts.ts", "../../@medusajs/medusa-js/src/resources/collections.ts", "../../@medusajs/medusa-js/src/resources/customers.ts", "../../@medusajs/medusa-js/src/resources/payment-methods.ts", "../../@medusajs/medusa-js/src/resources/gift-cards.ts", "../../@medusajs/medusa-js/src/resources/order-edits.ts", "../../@medusajs/medusa-js/src/resources/orders.ts", "../../@medusajs/medusa-js/src/resources/payment-collections.ts", "../../@medusajs/medusa-js/src/resources/product-categories.ts", "../../@medusajs/medusa-js/src/resources/product-tags.ts", "../../@medusajs/medusa-js/src/resources/product-types.ts", "../../@medusajs/medusa-js/src/resources/products.ts", "../../@medusajs/medusa-js/src/resources/product-variants.ts", "../../@medusajs/medusa-js/src/resources/regions.ts", "../../@medusajs/medusa-js/src/resources/return-reasons.ts", "../../@medusajs/medusa-js/src/resources/returns.ts", "../../@medusajs/medusa-js/src/resources/shipping-options.ts", "../../@medusajs/medusa-js/src/resources/swaps.ts", "../../@medusajs/medusa-js/src/resources/admin/auth.ts", "../../@medusajs/medusa-js/src/resources/admin/batch-jobs.ts", "../../@medusajs/medusa-js/src/utils.ts", "../../@medusajs/medusa-js/src/resources/admin/collections.ts", "../../@medusajs/medusa-js/src/resources/admin/currencies.ts", "../../@medusajs/medusa-js/src/resources/admin/customer-groups.ts", "../../@medusajs/medusa-js/src/resources/admin/customers.ts", "../../@medusajs/medusa-js/src/resources/admin/discounts.ts", "../../@medusajs/medusa-js/src/resources/admin/draft-orders.ts", "../../@medusajs/medusa-js/src/resources/admin/gift-cards.ts", "../../@medusajs/medusa-js/src/resources/admin/inventory-item.ts", "../../@medusajs/medusa-js/src/resources/admin/invites.ts", "../../@medusajs/medusa-js/src/resources/admin/notes.ts", "../../@medusajs/medusa-js/src/resources/admin/notifications.ts", "../../@medusajs/medusa-js/src/resources/admin/order-edits.ts", "../../@medusajs/medusa-js/src/resources/admin/orders.ts", "../../@medusajs/medusa-js/src/resources/admin/payment-collections.ts", "../../@medusajs/medusa-js/src/resources/admin/payments.ts", "../../@medusajs/medusa-js/src/resources/admin/price-lists.ts", "../../@medusajs/medusa-js/src/resources/admin/product-categories.ts", "../../@medusajs/medusa-js/src/resources/admin/product-tags.ts", "../../@medusajs/medusa-js/src/resources/admin/product-types.ts", "../../@medusajs/medusa-js/src/resources/admin/products.ts", "../../@medusajs/medusa-js/src/resources/admin/publishable-api-keys.ts", "../../@medusajs/medusa-js/src/resources/admin/regions.ts", "../../@medusajs/medusa-js/src/resources/admin/reservations.ts", "../../@medusajs/medusa-js/src/resources/admin/return-reasons.ts", "../../@medusajs/medusa-js/src/resources/admin/returns.ts", "../../@medusajs/medusa-js/src/resources/admin/sales-channels.ts", "../../@medusajs/medusa-js/src/resources/admin/shipping-options.ts", "../../@medusajs/medusa-js/src/resources/admin/shipping-profiles.ts", "../../@medusajs/medusa-js/src/resources/admin/stock-locations.ts", "../../@medusajs/medusa-js/src/resources/admin/store.ts", "../../@medusajs/medusa-js/src/resources/admin/swaps.ts", "../../@medusajs/medusa-js/src/resources/admin/tax-rates.ts", "../../@medusajs/medusa-js/src/resources/admin/uploads.ts", "../../@medusajs/medusa-js/src/resources/admin/users.ts", "../../@medusajs/medusa-js/src/resources/admin/variants.ts", "../../@medusajs/medusa-js/src/resources/admin/index.ts", "../../@medusajs/medusa-js/src/index.ts", "../../retry-axios/src/index.ts", "../../medusa-react/src/contexts/medusa.tsx", "../../medusa-react/src/contexts/session-cart.tsx", "../../medusa-react/src/utils/index.ts", "../../medusa-react/src/helpers/index.ts", "../../medusa-react/src/hooks/utils/queryKeysFactory.ts", "../../medusa-react/src/hooks/utils/useLocalStorage.ts", "../../medusa-react/src/contexts/cart.tsx", "../../medusa-react/src/hooks/store/carts/queries.ts", "../../medusa-react/src/hooks/store/carts/mutations.ts", "../../medusa-react/src/hooks/store/collections/queries.ts", "../../medusa-react/src/hooks/store/customers/queries.ts", "../../medusa-react/src/hooks/store/customers/mutations.ts", "../../medusa-react/src/hooks/store/gift-cards/queries.ts", "../../medusa-react/src/hooks/store/line-items/mutations.ts", "../../medusa-react/src/hooks/store/order-edits/queries.ts", "../../medusa-react/src/hooks/store/order-edits/mutations.ts", "../../medusa-react/src/hooks/utils/buildOptions.ts", "../../medusa-react/src/hooks/store/orders/queries.ts", "../../medusa-react/src/hooks/store/orders/mutations.ts", "../../medusa-react/src/hooks/store/payment-collections/queries.ts", "../../medusa-react/src/hooks/store/payment-collections/mutations.ts", "../../medusa-react/src/hooks/store/product-categories/queries.ts", "../../medusa-react/src/hooks/store/product-tags/queries.ts", "../../medusa-react/src/hooks/store/product-types/queries.ts", "../../medusa-react/src/hooks/store/products/queries.ts", "../../medusa-react/src/hooks/store/regions/queries.ts", "../../medusa-react/src/hooks/store/return-reasons/queries.ts", "../../medusa-react/src/hooks/store/returns/mutations.ts", "../../medusa-react/src/hooks/store/shipping-options/queries.ts", "../../medusa-react/src/hooks/store/swaps/queries.ts", "../../medusa-react/src/hooks/store/swaps/mutations.ts", "../../medusa-react/src/hooks/admin/auth/queries.ts", "../../medusa-react/src/hooks/admin/auth/mutations.ts", "../../medusa-react/src/hooks/admin/batch-jobs/queries.ts", "../../medusa-react/src/hooks/admin/batch-jobs/mutations.ts", "../../medusa-react/src/hooks/admin/claims/mutations.ts", "../../medusa-react/src/hooks/admin/products/queries.ts", "../../medusa-react/src/hooks/admin/products/mutations.ts", "../../medusa-react/src/hooks/admin/variants/queries.ts", "../../medusa-react/src/hooks/admin/orders/queries.ts", "../../medusa-react/src/hooks/admin/collections/queries.ts", "../../medusa-react/src/hooks/admin/collections/mutations.ts", "../../medusa-react/src/hooks/admin/currencies/mutations.ts", "../../medusa-react/src/hooks/admin/currencies/queries.ts", "../../medusa-react/src/hooks/admin/customer-groups/queries.ts", "../../medusa-react/src/hooks/admin/customer-groups/mutations.ts", "../../medusa-react/src/hooks/admin/customers/queries.ts", "../../medusa-react/src/hooks/admin/customers/mutations.ts", "../../medusa-react/src/hooks/admin/discounts/queries.ts", "../../medusa-react/src/hooks/admin/discounts/mutations.ts", "../../medusa-react/src/hooks/admin/draft-orders/queries.ts", "../../medusa-react/src/hooks/admin/draft-orders/mutations.ts", "../../medusa-react/src/hooks/admin/gift-cards/queries.ts", "../../medusa-react/src/hooks/admin/gift-cards/mutations.ts", "../../medusa-react/src/hooks/admin/inventory-item/queries.ts", "../../medusa-react/src/hooks/admin/inventory-item/mutations.ts", "../../medusa-react/src/hooks/admin/invites/queries.ts", "../../medusa-react/src/hooks/admin/invites/mutations.ts", "../../medusa-react/src/hooks/admin/notes/queries.ts", "../../medusa-react/src/hooks/admin/notes/mutations.ts", "../../medusa-react/src/hooks/admin/notifications/queries.ts", "../../medusa-react/src/hooks/admin/notifications/mutations.ts", "../../medusa-react/src/hooks/admin/orders/mutations.ts", "../../medusa-react/src/hooks/admin/order-edits/queries.ts", "../../medusa-react/src/hooks/admin/order-edits/mutations.ts", "../../medusa-react/src/hooks/admin/price-lists/queries.ts", "../../medusa-react/src/hooks/admin/price-lists/mutations.ts", "../../medusa-react/src/hooks/admin/product-tags/queries.ts", "../../medusa-react/src/hooks/admin/product-types/queries.ts", "../../medusa-react/src/hooks/admin/product-categories/queries.ts", "../../medusa-react/src/hooks/admin/product-categories/mutations.ts", "../../medusa-react/src/hooks/admin/publishable-api-keys/queries.ts", "../../medusa-react/src/hooks/admin/publishable-api-keys/mutations.ts", "../../medusa-react/src/hooks/admin/regions/queries.ts", "../../medusa-react/src/hooks/admin/regions/mutations.ts", "../../medusa-react/src/hooks/admin/return-reasons/queries.ts", "../../medusa-react/src/hooks/admin/return-reasons/mutations.ts", "../../medusa-react/src/hooks/admin/returns/queries.ts", "../../medusa-react/src/hooks/admin/returns/mutations.ts", "../../medusa-react/src/hooks/admin/reservations/mutations.ts", "../../medusa-react/src/hooks/admin/reservations/queries.ts", "../../medusa-react/src/hooks/admin/sales-channels/queries.ts", "../../medusa-react/src/hooks/admin/sales-channels/mutations.ts", "../../medusa-react/src/hooks/admin/stock-locations/queries.ts", "../../medusa-react/src/hooks/admin/stock-locations/mutations.ts", "../../medusa-react/src/hooks/admin/shipping-options/queries.ts", "../../medusa-react/src/hooks/admin/shipping-options/mutations.ts", "../../medusa-react/src/hooks/admin/shipping-profiles/queries.ts", "../../medusa-react/src/hooks/admin/shipping-profiles/mutations.ts", "../../medusa-react/src/hooks/admin/store/queries.ts", "../../medusa-react/src/hooks/admin/store/mutations.ts", "../../medusa-react/src/hooks/admin/swaps/queries.ts", "../../medusa-react/src/hooks/admin/swaps/mutations.ts", "../../medusa-react/src/hooks/admin/tax-rates/queries.ts", "../../medusa-react/src/hooks/admin/tax-rates/mutations.ts", "../../medusa-react/src/hooks/admin/uploads/mutations.ts", "../../medusa-react/src/hooks/admin/users/queries.ts", "../../medusa-react/src/hooks/admin/users/mutations.ts", "../../medusa-react/src/hooks/admin/payment-collections/queries.ts", "../../medusa-react/src/hooks/admin/payment-collections/mutations.ts", "../../medusa-react/src/hooks/admin/payments/queries.ts", "../../medusa-react/src/hooks/admin/payments/mutations.ts"],
  "sourcesContent": ["'use strict';\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n", "'use strict';\n\nvar bind = require('./helpers/bind');\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {Object} val The value to test\n * @return {boolean} True if value is a plain Object, otherwise false\n */\nfunction isPlainObject(val) {\n  if (toString.call(val) !== '[object Object]') {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.trim ? str.trim() : str.replace(/^\\s+|\\s+$/g, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\n      result[key] = merge(result[key], val);\n    } else if (isPlainObject(val)) {\n      result[key] = merge({}, val);\n    } else if (isArray(val)) {\n      result[key] = val.slice();\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n * @return {string} content value without BOM\n */\nfunction stripBOM(content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim,\n  stripBOM: stripBOM\n};\n", "'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n", "'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected, options) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected,\n    synchronous: options ? options.synchronous : false,\n    runWhen: options ? options.runWhen : null\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n", "'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n", "'use strict';\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  };\n  return error;\n};\n", "'use strict';\n\nvar enhanceError = require('./enhanceError');\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n", "'use strict';\n\nvar createError = require('./createError');\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n", "'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n", "'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n", "'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n", "'use strict';\n\nvar isAbsoluteURL = require('../helpers/isAbsoluteURL');\nvar combineURLs = require('../helpers/combineURLs');\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n", "'use strict';\n\nvar utils = require('./../utils');\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n", "'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n", "'use strict';\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n", "'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar cookies = require('./../helpers/cookies');\nvar buildURL = require('./../helpers/buildURL');\nvar buildFullPath = require('../core/buildFullPath');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\nvar defaults = require('../defaults');\nvar Cancel = require('../cancel/Cancel');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n    var responseType = config.responseType;\n    var onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?\n        request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n      var transitional = config.transitional || defaults.transitional;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(\n        timeoutErrorMessage,\n        config,\n        transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = function(cancel) {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);\n        request.abort();\n        request = null;\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    if (!requestData) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n", "'use strict';\n\nvar utils = require('./utils');\nvar normalizeHeaderName = require('./helpers/normalizeHeaderName');\nvar enhanceError = require('./core/enhanceError');\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('./adapters/xhr');\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = require('./adapters/http');\n  }\n  return adapter;\n}\n\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nvar defaults = {\n\n  transitional: {\n    silentJSONParsing: true,\n    forcedJSONParsing: true,\n    clarifyTimeoutError: false\n  },\n\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {\n      setContentTypeIfUnset(headers, 'application/json');\n      return stringifySafely(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    var transitional = this.transitional || defaults.transitional;\n    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n\n    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw enhanceError(e, this, 'E_JSON_PARSE');\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n", "'use strict';\n\nvar utils = require('./../utils');\nvar defaults = require('./../defaults');\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  var context = this || defaults;\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(context, data, headers);\n  });\n\n  return data;\n};\n", "'use strict';\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n", "'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\nvar Cancel = require('../cancel/Cancel');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new Cancel('canceled');\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n", "'use strict';\n\nvar utils = require('../utils');\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  function getMergedValue(target, source) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge(target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(prop) {\n    if (prop in config2) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  var mergeMap = {\n    'url': valueFromConfig2,\n    'method': valueFromConfig2,\n    'data': valueFromConfig2,\n    'baseURL': defaultToConfig2,\n    'transformRequest': defaultToConfig2,\n    'transformResponse': defaultToConfig2,\n    'paramsSerializer': defaultToConfig2,\n    'timeout': defaultToConfig2,\n    'timeoutMessage': defaultToConfig2,\n    'withCredentials': defaultToConfig2,\n    'adapter': defaultToConfig2,\n    'responseType': defaultToConfig2,\n    'xsrfCookieName': defaultToConfig2,\n    'xsrfHeaderName': defaultToConfig2,\n    'onUploadProgress': defaultToConfig2,\n    'onDownloadProgress': defaultToConfig2,\n    'decompress': defaultToConfig2,\n    'maxContentLength': defaultToConfig2,\n    'maxBodyLength': defaultToConfig2,\n    'transport': defaultToConfig2,\n    'httpAgent': defaultToConfig2,\n    'httpsAgent': defaultToConfig2,\n    'cancelToken': defaultToConfig2,\n    'socketPath': defaultToConfig2,\n    'responseEncoding': defaultToConfig2,\n    'validateStatus': mergeDirectKeys\n  };\n\n  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {\n    var merge = mergeMap[prop] || mergeDeepProperties;\n    var configValue = merge(prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n};\n", "module.exports = {\n  \"version\": \"0.24.0\"\n};", "'use strict';\n\nvar VERSION = require('../env/data').version;\n\nvar validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nvar deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return function(value, opt, opts) {\n    if (validator === false) {\n      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new TypeError('options must be an object');\n  }\n  var keys = Object.keys(options);\n  var i = keys.length;\n  while (i-- > 0) {\n    var opt = keys[i];\n    var validator = schema[opt];\n    if (validator) {\n      var value = options[opt];\n      var result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new TypeError('option ' + opt + ' must be ' + result);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw Error('Unknown option ' + opt);\n    }\n  }\n}\n\nmodule.exports = {\n  assertOptions: assertOptions,\n  validators: validators\n};\n", "'use strict';\n\nvar utils = require('./../utils');\nvar buildURL = require('../helpers/buildURL');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\nvar mergeConfig = require('./mergeConfig');\nvar validator = require('../helpers/validator');\n\nvar validators = validator.validators;\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = arguments[1] || {};\n    config.url = arguments[0];\n  } else {\n    config = config || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  var transitional = config.transitional;\n\n  if (transitional !== undefined) {\n    validator.assertOptions(transitional, {\n      silentJSONParsing: validators.transitional(validators.boolean),\n      forcedJSONParsing: validators.transitional(validators.boolean),\n      clarifyTimeoutError: validators.transitional(validators.boolean)\n    }, false);\n  }\n\n  // filter out skipped interceptors\n  var requestInterceptorChain = [];\n  var synchronousRequestInterceptors = true;\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n      return;\n    }\n\n    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var responseInterceptorChain = [];\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var promise;\n\n  if (!synchronousRequestInterceptors) {\n    var chain = [dispatchRequest, undefined];\n\n    Array.prototype.unshift.apply(chain, requestInterceptorChain);\n    chain = chain.concat(responseInterceptorChain);\n\n    promise = Promise.resolve(config);\n    while (chain.length) {\n      promise = promise.then(chain.shift(), chain.shift());\n    }\n\n    return promise;\n  }\n\n\n  var newConfig = config;\n  while (requestInterceptorChain.length) {\n    var onFulfilled = requestInterceptorChain.shift();\n    var onRejected = requestInterceptorChain.shift();\n    try {\n      newConfig = onFulfilled(newConfig);\n    } catch (error) {\n      onRejected(error);\n      break;\n    }\n  }\n\n  try {\n    promise = dispatchRequest(newConfig);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n\n  while (responseInterceptorChain.length) {\n    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n", "'use strict';\n\nvar Cancel = require('./Cancel');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n\n  // eslint-disable-next-line func-names\n  this.promise.then(function(cancel) {\n    if (!token._listeners) return;\n\n    var i;\n    var l = token._listeners.length;\n\n    for (i = 0; i < l; i++) {\n      token._listeners[i](cancel);\n    }\n    token._listeners = null;\n  });\n\n  // eslint-disable-next-line func-names\n  this.promise.then = function(onfulfilled) {\n    var _resolve;\n    // eslint-disable-next-line func-names\n    var promise = new Promise(function(resolve) {\n      token.subscribe(resolve);\n      _resolve = resolve;\n    }).then(onfulfilled);\n\n    promise.cancel = function reject() {\n      token.unsubscribe(_resolve);\n    };\n\n    return promise;\n  };\n\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Subscribe to the cancel signal\n */\n\nCancelToken.prototype.subscribe = function subscribe(listener) {\n  if (this.reason) {\n    listener(this.reason);\n    return;\n  }\n\n  if (this._listeners) {\n    this._listeners.push(listener);\n  } else {\n    this._listeners = [listener];\n  }\n};\n\n/**\n * Unsubscribe from the cancel signal\n */\n\nCancelToken.prototype.unsubscribe = function unsubscribe(listener) {\n  if (!this._listeners) {\n    return;\n  }\n  var index = this._listeners.indexOf(listener);\n  if (index !== -1) {\n    this._listeners.splice(index, 1);\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n", "'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n", "'use strict';\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nmodule.exports = function isAxiosError(payload) {\n  return (typeof payload === 'object') && (payload.isAxiosError === true);\n};\n", "'use strict';\n\nvar utils = require('./utils');\nvar bind = require('./helpers/bind');\nvar Axios = require('./core/Axios');\nvar mergeConfig = require('./core/mergeConfig');\nvar defaults = require('./defaults');\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.Cancel = require('./cancel/Cancel');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\naxios.VERSION = require('./env/data').version;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\n// Expose isAxiosError\naxios.isAxiosError = require('./helpers/isAxiosError');\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n", "module.exports = require('./lib/axios');", "\"use strict\"\n/**\n * MedusaError is the base error for every other MedusaError\n */\nexport default class MedusaError extends Error {\n  constructor() {\n    super()\n  }\n\n  public static factory(type: ErrorType): MedusaError {\n    switch (type) {\n      case ErrorType.INVALID_REQUEST:\n        return new MedusaInvalidRequestError()\n      case ErrorType.AUTHENTICATION:\n        return new MedusaAuthenticationError()\n      case ErrorType.API:\n        return new MedusaAPIError()\n      case ErrorType.PERMISSION:\n        return new MedusaPermissionError()\n      case ErrorType.CONNECTION:\n        return new MedusaConnectionError()\n    }\n  }\n}\n\nenum ErrorType {\n  \"INVALID_REQUEST\",\n  \"API\",\n  \"AUTHENTICATION\",\n  \"PERMISSION\",\n  \"CONNECTION\",\n}\n\n/**\n * MedusaInvalidRequestError is raised when a request as invalid parameters.\n */\nexport class MedusaInvalidRequestError extends MedusaError {}\n\n/**\n * MedusaAPIError is raised in case no other type cover the problem\n */\nexport class MedusaAPIError extends MedusaError {}\n\n/**\n * MedusaAuthenticationError is raised when invalid credentials is used to connect to Medusa\n */\nexport class MedusaAuthenticationError extends MedusaError {}\n\n/**\n * MedusaPermissionError is raised when attempting to access a resource without permissions\n */\nexport class MedusaPermissionError extends MedusaError {}\n\n/**\n * MedusaConnectionError is raised when the Medusa servers can't be reached.\n */\nexport class MedusaConnectionError extends MedusaError {}\n", "/**\n * `KeyManager` holds API keys in state.\n */\nclass KeyManager {\n  private publishableApiKey: string | null = null\n\n  /**\n   * Set a publishable api key to be sent with each request.\n   */\n  public registerPublishableApiKey(key: string) {\n    this.publishableApiKey = key\n  }\n\n  /**\n   * Retrieve the publishable api key.\n   */\n  public getPublishableApiKey() {\n    return this.publishableApiKey\n  }\n}\n\n/**\n * Export singleton instance.\n */\nexport default new KeyManager()\n", "import axios, { AxiosError, AxiosInstance, AxiosRequestHeaders } from \"axios\"\nimport * as rax from \"retry-axios\"\nimport { v4 as uuidv4 } from \"uuid\"\n\nimport KeyManager from \"./key-manager\"\n\nconst unAuthenticatedAdminEndpoints = {\n  \"/admin/auth\": \"POST\",\n  \"/admin/users/password-token\": \"POST\",\n  \"/admin/users/reset-password\": \"POST\",\n  \"/admin/invites/accept\": \"POST\",\n}\n\nexport interface Config {\n  baseUrl: string\n  maxRetries: number\n  apiKey?: string\n  publishableApiKey?: string\n}\n\nexport interface RequestOptions {\n  timeout?: number\n  numberOfRetries?: number\n}\n\nexport type RequestMethod = \"DELETE\" | \"POST\" | \"GET\"\n\nconst defaultConfig = {\n  maxRetries: 0,\n  baseUrl: \"http://localhost:9000\",\n}\n\nclass Client {\n  private axiosClient: AxiosInstance\n  private config: Config\n\n  constructor(config: Config) {\n    /** @private @constant {AxiosInstance} */\n    this.axiosClient = this.createClient({ ...defaultConfig, ...config })\n\n    /** @private @constant {Config} */\n    this.config = { ...defaultConfig, ...config }\n  }\n\n  shouldRetryCondition(\n    err: AxiosError,\n    numRetries: number,\n    maxRetries: number\n  ): boolean {\n    // Obviously, if we have reached max. retries we stop\n    if (numRetries >= maxRetries) {\n      return false\n    }\n\n    // If no response, we assume a connection error and retry\n    if (!err.response) {\n      return true\n    }\n\n    // Retry on conflicts\n    if (err.response.status === 409) {\n      return true\n    }\n\n    // All 5xx errors are retried\n    // OBS: We are currently not retrying 500 requests, since our core needs proper error handling.\n    //      At the moment, 500 will be returned on all errors, that are not of type MedusaError.\n    if (err.response.status > 500 && err.response.status <= 599) {\n      return true\n    }\n\n    return false\n  }\n\n  // Stolen from https://github.com/stripe/stripe-node/blob/fd0a597064289b8c82f374f4747d634050739043/lib/utils.js#L282\n  normalizeHeaders(obj: object): Record<string, any> {\n    if (!(obj && typeof obj === \"object\")) {\n      return obj\n    }\n\n    return Object.keys(obj).reduce((result, header) => {\n      result[this.normalizeHeader(header)] = obj[header]\n      return result\n    }, {})\n  }\n\n  // Stolen from https://github.com/marten-de-vries/header-case-normalizer/blob/master/index.js#L36-L41\n  normalizeHeader(header: string): string {\n    return header\n      .split(\"-\")\n      .map(\n        (text) => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase()\n      )\n      .join(\"-\")\n  }\n\n  requiresAuthentication(path, method): boolean {\n    return (\n      path.startsWith(\"/admin\") &&\n      unAuthenticatedAdminEndpoints[path] !== method\n    )\n  }\n\n  /**\n   * Creates all the initial headers.\n   * We add the idempotency key, if the request is configured to retry.\n   * @param {object} userHeaders user supplied headers\n   * @param {Types.RequestMethod} method request method\n   * @param {string} path request path\n   * @param {object} customHeaders user supplied headers\n   * @return {object}\n   */\n  setHeaders(\n    userHeaders: RequestOptions,\n    method: RequestMethod,\n    path: string,\n    customHeaders: Record<string, any> = {}\n  ): AxiosRequestHeaders {\n    let defaultHeaders: Record<string, any> = {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    }\n\n    if (this.config.apiKey && this.requiresAuthentication(path, method)) {\n      defaultHeaders = {\n        ...defaultHeaders,\n        Authorization: `Bearer ${this.config.apiKey}`,\n      }\n    }\n\n    const publishableApiKey =\n      this.config.publishableApiKey || KeyManager.getPublishableApiKey()\n\n    if (publishableApiKey) {\n      defaultHeaders[\"x-publishable-api-key\"] = publishableApiKey\n    }\n\n    // only add idempotency key, if we want to retry\n    if (this.config.maxRetries > 0 && method === \"POST\") {\n      defaultHeaders[\"Idempotency-Key\"] = uuidv4()\n    }\n\n    return Object.assign(\n      {},\n      defaultHeaders,\n      this.normalizeHeaders(userHeaders),\n      customHeaders\n    )\n  }\n\n  /**\n   * Creates the axios client used for requests\n   * As part of the creation, we configure the retry conditions\n   * and the exponential backoff approach.\n   * @param {Config} config user supplied configurations\n   * @return {AxiosInstance}\n   */\n  createClient(config: Config): AxiosInstance {\n    const client = axios.create({\n      baseURL: config.baseUrl,\n    })\n\n    rax.attach(client)\n\n    client.defaults.raxConfig = {\n      instance: client,\n      retry: config.maxRetries,\n      backoffType: \"exponential\",\n      shouldRetry: (err: AxiosError): boolean => {\n        const cfg = rax.getConfig(err)\n        if (cfg) {\n          return this.shouldRetryCondition(\n            err,\n            cfg.currentRetryAttempt ?? 1,\n            cfg.retry ?? 3\n          )\n        } else {\n          return false\n        }\n      },\n    }\n\n    return client\n  }\n\n  /**\n   * Axios request\n   * @param method request method\n   * @param path request path\n   * @param payload request payload\n   * @param options axios configuration\n   * @param customHeaders custom request headers\n   * @return\n   */\n  async request(\n    method: RequestMethod,\n    path: string,\n    payload: Record<string, any> = {},\n    options: RequestOptions = {},\n    customHeaders: Record<string, any> = {}\n  ): Promise<any> {\n    const reqOpts = {\n      method,\n      withCredentials: true,\n      url: path,\n      json: true,\n      headers: this.setHeaders(options, method, path, customHeaders),\n    }\n\n    if ([\"POST\", \"DELETE\"].includes(method)) {\n      reqOpts[\"data\"] = payload\n    }\n\n    // e.g. data = { cart: { ... } }, response = { status, headers, ... }\n    const { data, ...response } = await this.axiosClient(reqOpts)\n\n    // e.g. would return an object like of this shape { cart, response }\n    return { ...data, response }\n  }\n}\n\nexport default Client\n", "import Client from \"../request\"\n\nexport default class BaseResource {\n  public client: Client\n\n  constructor(client: Client) {\n    this.client = client\n  }\n}\n", "import {\n  StoreCustomersRes,\n  StorePostCustomersCustomerAddressesAddressReq,\n  StorePostCustomersCustomerAddressesReq,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass AddressesResource extends BaseResource {\n  /**\n   * Adds an address to a customers saved addresses\n   * @param {StorePostCustomersCustomerAddressesReq} payload contains information to create an address\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCustomersRes>}\n   */\n  addAddress(\n    payload: StorePostCustomersCustomerAddressesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersRes> {\n    const path = `/store/customers/me/addresses`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Deletes an address of a customer\n   * @param {string} address_id id of the address to delete\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCustomersRes>}\n   */\n  deleteAddress(\n    address_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersRes> {\n    const path = `/store/customers/me/addresses/${address_id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Update an address of a customer\n   * @param {string} address_id id of customer\n   * @param {StorePostCustomersCustomerAddressesAddressReq} payload address update\n   * @param customHeaders\n   * @return {StoreCustomersRes}\n   */\n  updateAddress(\n    address_id: string,\n    payload: StorePostCustomersCustomerAddressesAddressReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersRes> {\n    const path = `/store/customers/me/addresses/${address_id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AddressesResource\n", "import {\n  StoreGetAuthEmailRes,\n  StorePostAuthReq,\n  StoreAuthRes,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass AuthResource extends BaseResource {\n  /**\n   * @description Authenticates a customer using email and password combination\n   * @param {StorePostAuthReq} payload authentication payload\n   * @param customHeaders\n   * @return {ResponsePromise<StoreAuthRes>}\n   */\n  authenticate(payload: StorePostAuthReq, customHeaders: Record<string, any> = {}): ResponsePromise<StoreAuthRes> {\n    const path = `/store/auth`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Removes authentication session\n   * @return {ResponsePromise<void>}\n   */\n   deleteSession(customHeaders: Record<string, any> = {}): ResponsePromise<void> {\n    const path = `/store/auth`\n    return this.client.request(\"DELETE\", path, {}, {}, customHeaders)\n  }\n\n  /**\n   * @description Retrieves an authenticated session\n   * Usually used to check if authenticated session is alive.\n   * @param customHeaders\n   * @return {ResponsePromise<StoreAuthRes>}\n   */\n  getSession(customHeaders: Record<string, any> = {}): ResponsePromise<StoreAuthRes> {\n    const path = `/store/auth`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Check if email exists\n   * @param {string} email is required\n   * @param customHeaders\n   * @return {ResponsePromise<StoreGetAuthEmailRes>}\n   */\n  exists(email: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreGetAuthEmailRes> {\n    const path = `/store/auth/${email}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AuthResource\n", "import {\n  StoreCartsRes,\n  StorePostCartsCartLineItemsItemReq,\n  StorePostCartsCartLineItemsReq,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass LineItemsResource extends BaseResource {\n  /**\n   * Creates a line-item for a cart\n   * @param {string} cart_id id of cart\n   * @param {StorePostCartsCartLineItemsReq} payload details needed to create a line-item\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  create(\n    cart_id: string,\n    payload: StorePostCartsCartLineItemsReq,\n    customHeaders: Record<string, any> = {}): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/line-items`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Updates a line-item.\n   * Only quantity updates are allowed\n   * @param {string} cart_id id of cart\n   * @param {string} line_id id of item to update\n   * @param {StorePostCartsCartLineItemsItemReq} payload details needed to update a line-item\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  update(\n    cart_id: string,\n    line_id: string,\n    payload: StorePostCartsCartLineItemsItemReq,\n    customHeaders: Record<string, any> = {}): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/line-items/${line_id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Remove a line-item from a cart\n   * @param {string} cart_id id of cart\n   * @param {string} line_id id of item to remove\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  delete(cart_id: string, line_id: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/line-items/${line_id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default LineItemsResource\n", "import {\n  StoreCartsRes,\n  StoreCompleteCartRes,\n  StorePostCartReq,\n  StorePostCartsCartPaymentSessionReq,\n  StorePostCartsCartPaymentSessionUpdateReq,\n  StorePostCartsCartReq,\n  StorePostCartsCartShippingMethodReq,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\nimport LineItemsResource from \"./line-items\"\n\nclass CartsResource extends BaseResource {\n  public lineItems = new LineItemsResource(this.client)\n\n  /**\n   * Adds a shipping method to cart\n   * @param {string} cart_id Id of cart\n   * @param {StorePostCartsCartShippingMethodReq} payload Containg id of shipping option and optional data\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  addShippingMethod(\n    cart_id: string,\n    payload: StorePostCartsCartShippingMethodReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/shipping-methods`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Completes a cart.\n   * Payment authorization is attempted and if more work is required, we simply return the cart for further updates.\n   * If payment is authorized and order is not yet created, we make sure to do so.\n   * The completion of a cart can be performed idempotently with a provided header Idempotency-Key.\n   * If not provided, we will generate one for the request.\n   * @param {string} cart_id is required\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCompleteCartRes>}\n   */\n  complete(\n    cart_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCompleteCartRes> {\n    const path = `/store/carts/${cart_id}/complete`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Creates a cart\n   * @param {StorePostCartReq} payload is optional and can contain a region_id and items.\n   * The cart will contain the payload, if provided. Otherwise it will be empty\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  create(\n    payload?: StorePostCartReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Creates payment sessions.\n   * Initializes the payment sessions that can be used to pay for the items of the cart.\n   * This is usually called when a customer proceeds to checkout.\n   * @param {string} cart_id is required\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  createPaymentSessions(\n    cart_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/payment-sessions`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Removes a discount from cart.\n   * @param {string} cart_id is required\n   * @param {string} code discount code to remove\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  deleteDiscount(\n    cart_id: string,\n    code: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/discounts/${code}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Removes a payment session from a cart.\n   * Can be useful in case a payment has failed\n   * @param {string} cart_id is required\n   * @param {string} provider_id the provider id of the session e.g. \"stripe\"\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  deletePaymentSession(\n    cart_id: string,\n    provider_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/payment-sessions/${provider_id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Refreshes a payment session.\n   * @param {string} cart_id is required\n   * @param {string} provider_id the provider id of the session e.g. \"stripe\"\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  refreshPaymentSession(\n    cart_id: string,\n    provider_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/payment-sessions/${provider_id}/refresh`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieves a cart\n   * @param {string} cart_id is required\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  retrieve(\n    cart_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Refreshes a payment session.\n   * @param {string} cart_id is required\n   * @param {StorePostCartsCartPaymentSessionReq} payload the provider id of the session e.g. \"stripe\"\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  setPaymentSession(\n    cart_id: string,\n    payload: StorePostCartsCartPaymentSessionReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/payment-session`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Updates a cart\n   * @param {string} cart_id is required\n   * @param {StorePostCartsCartReq} payload is required and can contain region_id, email, billing and shipping address\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  update(\n    cart_id: string,\n    payload: StorePostCartsCartReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Updates the payment method\n   * @param {string} cart_id is required\n   * @param {string} provider_id is required\n   * @param {StorePostCartsCartPaymentSessionUpdateReq} payload is required\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCartsRes>}\n   */\n  updatePaymentSession(\n    cart_id: string,\n    provider_id: string,\n    payload: StorePostCartsCartPaymentSessionUpdateReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/payment-sessions/${provider_id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default CartsResource\n", "import {\n  StoreCollectionsRes,\n  StoreCollectionsListRes,\n  StoreGetCollectionsParams,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass CollectionsResource extends BaseResource {\n  /**\n   * @description Retrieves a single collection\n   * @param {string} id id of the collection\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCollectionsRes>}\n   */\n  retrieve(id: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreCollectionsRes> {\n    const path = `/store/collections/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Retrieves a list of collections\n   * @param {string} query is optional. Can contain a limit and offset for the returned list\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCollectionsListRes>}\n   */\n  list(\n    query?: StoreGetCollectionsParams,\n    customHeaders: Record<string, any> = {}): ResponsePromise<StoreCollectionsListRes> {\n    let path = `/store/collections`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/store/collections?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default CollectionsResource\n", "import {\n  StoreCustomersListOrdersRes,\n  StoreCustomersRes,\n  StoreGetCustomersCustomerOrdersParams,\n  StorePostCustomersCustomerPasswordTokenReq,\n  StorePostCustomersCustomerReq,\n  StorePostCustomersReq,\n  StorePostCustomersResetPasswordReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport AddressesResource from \"./addresses\"\nimport BaseResource from \"./base\"\nimport PaymentMethodsResource from \"./payment-methods\"\n\nclass CustomerResource extends BaseResource {\n  public paymentMethods = new PaymentMethodsResource(this.client)\n  public addresses = new AddressesResource(this.client)\n\n  /**\n   * Creates a customer\n   * @param {StorePostCustomersReq} payload information of customer\n   * @param customHeaders\n   * @return { ResponsePromise<StoreCustomersRes>}\n   */\n  create(\n    payload: StorePostCustomersReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersRes> {\n    const path = `/store/customers`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieves the customer that is currently logged\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCustomersRes>}\n   */\n  retrieve(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersRes> {\n    const path = `/store/customers/me`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Updates a customer\n   * @param {StorePostCustomersCustomerReq} payload information to update customer with\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCustomersRes>}\n   */\n  update(\n    payload: StorePostCustomersCustomerReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersRes> {\n    const path = `/store/customers/me`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve customer orders\n   * @param {StoreGetCustomersCustomerOrdersParams} params optional params to retrieve orders\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCustomersListOrdersRes>}\n   */\n  listOrders(\n    params?: StoreGetCustomersCustomerOrdersParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersListOrdersRes> {\n    let path = `/store/customers/me/orders`\n    if (params) {\n      const query = qs.stringify(params)\n      if (query) {\n        path += `?${query}`\n      }\n    }\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Resets customer password\n   * @param {StorePostCustomersCustomerPasswordTokenReq} payload info used to reset customer password\n   * @param customHeaders\n   * @return {ResponsePromise<StoreCustomersRes>}\n   */\n  resetPassword(\n    payload: StorePostCustomersResetPasswordReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersRes> {\n    const path = `/store/customers/password-reset`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Generates a reset password token, which can be used to reset the password.\n   * The token is not returned but should be sent out to the customer in an email.\n   * @param {StorePostCustomersCustomerPasswordTokenReq} payload info used to generate token\n   * @param customHeaders\n   * @return {ResponsePromise}\n   */\n  generatePasswordToken(\n    payload: StorePostCustomersCustomerPasswordTokenReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise {\n    const path = `/store/customers/password-token`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default CustomerResource\n", "import { StoreCustomersListPaymentMethodsRes } from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass PaymentMethodsResource extends BaseResource {\n  /**\n   * Lists customer payment methods\n   * @param {string} id id of cart\n   * @param customHeaders\n   * @return {StoreCustomersListPaymentMethodsRes}\n   */\n  list(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersListPaymentMethodsRes> {\n    const path = `/store/customers/me/payment-methods`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default PaymentMethodsResource\n", "import { StoreGiftCardsRes } from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass GiftCardsResource extends BaseResource {\n  /**\n   * @description Retrieves a single GiftCard\n   * @param {string} code code of the gift card\n   * @param customHeaders\n   * @return {ResponsePromise<StoreGiftCardsRes>}\n   */\n  retrieve(code: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreGiftCardsRes> {\n    const path = `/store/gift-cards/${code}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default GiftCardsResource\n", "import {\n  StoreOrderEditsRes,\n  StorePostOrderEditsOrderEditDecline,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass OrderEditsResource extends BaseResource {\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreOrderEditsRes> {\n    const path = `/store/order-edits/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  decline(\n    id: string,\n    payload: StorePostOrderEditsOrderEditDecline,\n    customHeaders: Record<string, any> = {}\n  ) {\n    const path = `/store/order-edits/${id}/decline`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  complete(id: string, customHeaders: Record<string, any> = {}) {\n    const path = `/store/order-edits/${id}/complete`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default OrderEditsResource\n", "import {\n  StoreGetOrdersParams,\n  StoreOrdersRes,\n  StorePostCustomersCustomerAcceptClaimReq,\n  StorePostCustomersCustomerOrderClaimReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass OrdersResource extends BaseResource {\n  /**\n   * @description Retrieves an order\n   * @param {string} id is required\n   * @param customHeaders\n   * @return {ResponsePromise<StoreOrdersRes>}\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreOrdersRes> {\n    const path = `/store/orders/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Retrieves an order by cart id\n   * @param {string} cart_id is required\n   * @param customHeaders\n   * @return {ResponsePromise<StoreOrdersRes>}\n   */\n  retrieveByCartId(\n    cart_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreOrdersRes> {\n    const path = `/store/orders/cart/${cart_id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Look up an order using order details\n   * @param {StoreGetOrdersParams} payload details used to look up the order\n   * @param customHeaders\n   * @return {ResponsePromise<StoreOrdersRes>}\n   */\n  lookupOrder(\n    payload: StoreGetOrdersParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreOrdersRes> {\n    let path = `/store/orders?`\n\n    const queryString = qs.stringify(payload)\n    path = `/store/orders?${queryString}`\n\n    return this.client.request(\"GET\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Request access to a list of orders\n   * @param {string[]} payload display ids of orders to request\n   * @param customHeaders\n   * @return {ResponsePromise}\n   */\n  requestCustomerOrders(\n    payload: StorePostCustomersCustomerOrderClaimReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise {\n    const path = `/store/orders/batch/customer/token`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Grant access to a list of orders\n   * @param {string} payload signed token to grant access\n   * @param customHeaders\n   * @return {ResponsePromise}\n   */\n  confirmRequest(\n    payload: StorePostCustomersCustomerAcceptClaimReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise {\n    const path = `/store/orders/customer/confirm`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default OrdersResource\n", "import {\n  StoreGetPaymentCollectionsParams,\n  StorePaymentCollectionSessionsReq,\n  StorePaymentCollectionsRes,\n  StorePaymentCollectionsSessionRes,\n  StorePostPaymentCollectionsBatchSessionsAuthorizeReq,\n  StorePostPaymentCollectionsBatchSessionsReq,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\nimport qs from \"qs\"\n\nclass PaymentCollectionsResource extends BaseResource {\n  retrieve(\n    id: string,\n    query?: StoreGetPaymentCollectionsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StorePaymentCollectionsRes> {\n    let path = `/store/payment-collections/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  authorizePaymentSession(\n    id: string,\n    session_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StorePaymentCollectionsRes> {\n    const path = `/store/payment-collections/${id}/sessions/${session_id}/authorize`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  authorizePaymentSessionsBatch(\n    id: string,\n    payload: StorePostPaymentCollectionsBatchSessionsAuthorizeReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StorePaymentCollectionsRes> {\n    const path = `/store/payment-collections/${id}/sessions/batch/authorize`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  managePaymentSessionsBatch(\n    id: string,\n    payload: StorePostPaymentCollectionsBatchSessionsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StorePaymentCollectionsRes> {\n    const path = `/store/payment-collections/${id}/sessions/batch`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  managePaymentSession(\n    id: string,\n    payload: StorePaymentCollectionSessionsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StorePaymentCollectionsRes> {\n    const path = `/store/payment-collections/${id}/sessions`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  refreshPaymentSession(\n    id: string,\n    session_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StorePaymentCollectionsSessionRes> {\n    const path = `/store/payment-collections/${id}/sessions/${session_id}`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default PaymentCollectionsResource\n", "import {\n  StoreGetProductCategoriesParams,\n  StoreGetProductCategoriesRes,\n  StoreGetProductCategoriesCategoryParams,\n  StoreGetProductCategoriesCategoryRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass ProductCategoriesResource extends BaseResource {\n  /**\n   * @description Retrieves a single product category\n   * @param {string} id - id of the product category\n   * @param {string} query is optional. Can contain a fields or relations for the returned list\n   * @param customHeaders\n   * @return {ResponsePromise<StoreGetProductCategoriesCategoryRes>}\n   */\n  retrieve(\n    id: string,\n    query?: StoreGetProductCategoriesCategoryParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreGetProductCategoriesCategoryRes> {\n    let path = `/store/product-categories/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `${path}?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Retrieves a list of product categories\n   * @param {string} query is optional. Can contain a limit and offset for the returned list\n   * @param customHeaders\n   * @return {ResponsePromise<StoreGetProductCategoriesRes>}\n   */\n  list(\n    query?: StoreGetProductCategoriesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreGetProductCategoriesRes> {\n    let path = `/store/product-categories`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `${path}?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default ProductCategoriesResource\n", "import {\n  StoreGetProductTagsParams,\n  StoreProductTagsListRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass ProductTagsResource extends BaseResource {\n  /**\n   * @description Retrieves a list of product tags\n   * @param {StoreGetProductTagsParams} query is optional. Can contain a limit and offset for the returned list\n   * @param customHeaders\n   * @return {ResponsePromise<StoreProductTagsListRes>}\n   */\n  list(\n    query?: StoreGetProductTagsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreProductTagsListRes> {\n    let path = `/store/product-tags`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default ProductTagsResource\n", "import {\n  StoreGetProductTypesParams,\n  StoreProductTypesListRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass ProductTypesResource extends BaseResource {\n  /**\n   * @description Retrieves a list of product types\n   * @param {StoreGetProductTypesParams} query is optional. Can contain a limit and offset for the returned list\n   * @param customHeaders\n   * @return {ResponsePromise<StoreProductTypesListRes>}\n   */\n  list(\n    query?: StoreGetProductTypesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreProductTypesListRes> {\n    let path = `/store/product-types`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default ProductTypesResource\n", "import {\n  StoreGetProductsParams,\n  StorePostSearchReq,\n  StorePostSearchRes,\n  StoreProductsListRes,\n  StoreProductsRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\nimport ProductVariantsResource from \"./product-variants\"\n\nclass ProductsResource extends BaseResource {\n  public variants = new ProductVariantsResource(this.client)\n\n  /**\n   * @description Retrieves a single Product\n   * @param {string} id is required\n   * @param customHeaders\n   * @return {ResponsePromise<StoreProductsRes>}\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreProductsRes> {\n    const path = `/store/products/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Searches for products\n   * @param {StorePostSearchReq} searchOptions is required\n   * @param customHeaders\n   * @return {ResponsePromise<StorePostSearchRes>}\n   */\n  search(\n    searchOptions: StorePostSearchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StorePostSearchRes> {\n    const path = `/store/products/search`\n    return this.client.request(\"POST\", path, searchOptions, {}, customHeaders)\n  }\n\n  /**\n   * @description Retrieves a list of products\n   * @param {StoreGetProductsParams} query is optional. Can contain a limit and offset for the returned list\n   * @param customHeaders\n   * @return {ResponsePromise<StoreProductsListRes>}\n   */\n  list(\n    query?: StoreGetProductsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreProductsListRes> {\n    let path = `/store/products`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/store/products?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default ProductsResource\n", "import {\n  StoreGetVariantsParams,\n  StoreVariantsListRes,\n  StoreVariantsRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass ProductVariantsResource extends BaseResource {\n  /**\n   * @description Retrieves a single product variant\n   * @param {string} id is required\n   * @param customHeaders\n   * @return {ResponsePromise<StoreVariantsRes>}\n   */\n  retrieve(id: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreVariantsRes> {\n    const path = `/store/variants/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Retrieves a list of of Product Variants\n   * @param {StoreGetVariantsParams} query\n   * @param customHeaders\n   * @return {ResponsePromise<StoreVariantsListRes>}\n   */\n  list(query?: StoreGetVariantsParams, customHeaders: Record<string, any> = {}): ResponsePromise<StoreVariantsListRes> {\n    let path = `/store/variants`\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default ProductVariantsResource\n", "import { ResponsePromise } from \"../typings\"\nimport { StoreRegionsListRes, StoreRegionsRes } from \"@medusajs/medusa\"\nimport BaseResource from \"./base\"\n\nclass RegionsResource extends BaseResource {\n  /**\n   * @description Retrieves a list of regions\n   * @param customHeaders\n   * @return {ResponsePromise<StoreRegionsListRes>}\n   */\n  list(customHeaders: Record<string, any> = {}): ResponsePromise<StoreRegionsListRes> {\n    const path = `/store/regions`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Retrieves a region\n   * @param {string} id is required\n   * @param customHeaders\n   * @return {ResponsePromise<StoreRegionsRes>}\n   */\n  retrieve(id: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreRegionsRes> {\n    const path = `/store/regions/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default RegionsResource\n", "import BaseResource from \"./base\"\nimport {\n  StoreReturnReasonsListRes,\n  StoreReturnReasonsRes,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\n\nclass ReturnReasonsResource extends BaseResource {\n  /**\n   * @description Retrieves a single Return Reason\n   * @param {string} id is required\n   * @param customHeaders\n   * @return {ResponsePromise<StoreReturnReasonsRes>}\n   */\n  retrieve(id: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreReturnReasonsRes> {\n    const path = `/store/return-reasons/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Lists return reasons defined in Medusa Admin\n   * @param customHeaders\n   * @return {ResponsePromise<StoreReturnReasonsListRes>}\n   */\n  list(customHeaders: Record<string, any> = {}): ResponsePromise<StoreReturnReasonsListRes> {\n    const path = `/store/return-reasons`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default ReturnReasonsResource\n", "import BaseResource from \"./base\"\nimport { ResponsePromise } from \"../typings\"\nimport { StoreReturnsRes, StorePostReturnsReq } from \"@medusajs/medusa\"\n\nclass ReturnsResource extends BaseResource {\n  /**\n   * Creates a return request\n   * @param {StorePostReturnsReq} payload details needed to create a return\n   * @param customHeaders\n   * @return {ResponsePromise<StoreReturnsRes>}\n   */\n  create(payload: StorePostReturnsReq, customHeaders: Record<string, any> = {}): ResponsePromise<StoreReturnsRes> {\n    const path = `/store/returns`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default ReturnsResource\n", "import {\n  StoreGetShippingOptionsParams,\n  StoreShippingOptionsListRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\nclass ShippingOptionsResource extends BaseResource {\n  /**\n   * @description Lists shiping options available for a cart\n   * @param {string} cart_id\n   * @param customHeaders\n   * @return {ResponsePromise<StoreShippingOptionsListRes>}\n   */\n  listCartOptions(cart_id: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreShippingOptionsListRes> {\n    const path = `/store/shipping-options/${cart_id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Lists shiping options available\n   * @param {StoreGetShippingOptionsParams} query\n   * @param customHeaders\n   * @return {ResponsePromise<StoreShippingOptionsListRes>}\n   */\n  list(\n    query?: StoreGetShippingOptionsParams,\n    customHeaders: Record<string, any> = {}): ResponsePromise<StoreShippingOptionsListRes> {\n    let path = `/store/shipping-options`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/store/shipping-options?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default ShippingOptionsResource\n", "import { ResponsePromise } from \"../typings\"\nimport { StoreSwapsRes, StorePostSwapsReq } from \"@medusajs/medusa\"\nimport BaseResource from \"./base\"\n\nclass SwapsResource extends BaseResource {\n  /**\n   * @description Creates a swap from a cart\n   * @param {StorePostSwapsReq} payload\n   * @param customHeaders\n   * @return {ResponsePromise<StoreSwapsRes>}\n   */\n  create(payload: StorePostSwapsReq, customHeaders: Record<string, any> = {}): ResponsePromise<StoreSwapsRes> {\n    const path = `/store/swaps`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Retrieves a swap by cart id\n   * @param {string} cart_id id of cart\n   * @param customHeaders\n   * @return {ResponsePromise<StoreSwapsRes>}\n   */\n  retrieveByCartId(cart_id: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreSwapsRes> {\n    const path = `/store/swaps/${cart_id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default SwapsResource\n", "import { AdminAuthRes, AdminPostAuthReq } from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminAuthResource extends BaseResource {\n  /**\n   * @description Retrieves an authenticated session\n   * Usually used to check if authenticated session is alive.\n   * @param customHeaders\n   * @return {ResponsePromise<AdminAuthRes>}\n   */\n  getSession(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminAuthRes> {\n    const path = `/admin/auth`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description destroys an authenticated session\n   * @param customHeaders\n   * @return {ResponsePromise<void>}\n   */\n  deleteSession(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<void> {\n    const path = `/admin/auth`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Creates an authenticated session\n   * @param {AdminPostAuthReq} payload\n   * @param customHeaders\n   * @return {ResponsePromise<AdminAuthRes>}\n   */\n  createSession(\n    payload: AdminPostAuthReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminAuthRes> {\n    const path = `/admin/auth`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminAuthResource\n", "import {\n  AdminBatchJobListRes,\n  AdminBatchJobRes,\n  AdminGetBatchParams,\n  AdminPostBatchesReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\nimport { stringifyNullProperties } from \"../../utils\"\n\nclass AdminBatchJobsResource extends BaseResource {\n  create(\n    payload: AdminPostBatchesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminBatchJobRes> {\n    const path = `/admin/batch-jobs`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  list(\n    query?: AdminGetBatchParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminBatchJobListRes> {\n    let path = `/admin/batch-jobs`\n\n    if (query) {\n      const queryString = qs.stringify(stringifyNullProperties(query))\n      path = `/admin/batch-jobs?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  cancel(\n    batchJobId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminBatchJobRes> {\n    const path = `/admin/batch-jobs/${batchJobId}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  confirm(\n    batchJobId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminBatchJobRes> {\n    const path = `/admin/batch-jobs/${batchJobId}/confirm`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  retrieve(\n    batchJobId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminBatchJobRes> {\n    const path = `/admin/batch-jobs/${batchJobId}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminBatchJobsResource\n", "export function stringifyNullProperties<T extends object>(input: T): T {\n  const convertProperties = (obj: T) => {\n    const res = {} as T\n\n    Object.keys(obj).reduce((acc: T, key: string) => {\n      if (obj[key] === null) {\n        acc[key] = \"null\"\n      } else if (typeof obj[key] === \"object\") {\n        acc[key] = convertProperties(obj[key])\n      } else {\n        acc[key] = obj[key]\n      }\n\n      return acc\n    }, res)\n\n    return res\n  }\n\n  return convertProperties(input)\n}\n", "import {\n  AdminPostCollectionsReq,\n  AdminCollectionsRes,\n  AdminPostCollectionsCollectionReq,\n  AdminCollectionsDeleteRes,\n  AdminCollectionsListRes,\n  AdminGetCollectionsParams,\n  AdminPostProductsToCollectionReq,\n  AdminDeleteProductsFromCollectionReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminCollectionsResource extends BaseResource {\n  /**\n   * @description Creates a collection.\n   * @param payload\n   * @param customHeaders\n   * @returns Created collection.\n   */\n  create(\n    payload: AdminPostCollectionsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCollectionsRes> {\n    const path = `/admin/collections`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Updates a collection\n   * @param id id of the collection to update.\n   * @param payload update to apply to collection.\n   * @param customHeaders\n   * @returns the updated collection.\n   */\n  update(\n    id: string,\n    payload: AdminPostCollectionsCollectionReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCollectionsRes> {\n    const path = `/admin/collections/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description deletes a collection\n   * @param id id of collection to delete.\n   * @param customHeaders\n   * @returns Deleted response\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCollectionsDeleteRes> {\n    const path = `/admin/collections/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description get a collection\n   * @param id id of the collection to retrieve.\n   * @param customHeaders\n   * @returns the collection with the given id\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCollectionsRes> {\n    const path = `/admin/collections/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Lists collections matching a query\n   * @param query Query for searching collections\n   * @param customHeaders\n   * @returns a list of collections matching the query.\n   */\n  list(\n    query?: AdminGetCollectionsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCollectionsListRes> {\n    let path = `/admin/collections`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/collections?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Updates products associated with a Product Collection\n   * @param id the id of the Collection\n   * @param payload - an object which contains an array of Product IDs to add to the Product Collection\n   * @param customHeaders\n   */\n  addProducts(\n    id: string,\n    payload: AdminPostProductsToCollectionReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCollectionsRes> {\n    const path = `/admin/collections/${id}/products/batch`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Removes products associated with a Product Collection\n   * @param id - the id of the Collection\n   * @param payload - an object which contains an array of Product IDs to add to the Product Collection\n   * @param customHeaders\n   */\n  removeProducts(\n    id: string,\n    payload: AdminDeleteProductsFromCollectionReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCollectionsDeleteRes> {\n    const path = `/admin/collections/${id}/products/batch`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminCollectionsResource\n", "import {\n  AdminCurrenciesListRes,\n  AdminCurrenciesRes,\n  AdminGetCurrenciesParams,\n  AdminPostCurrenciesCurrencyReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminCurrenciesResource extends BaseResource {\n  /**\n   * @description Lists currencies.\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `tax_inclusive_pricing` in your medusa backend project.\n   * @param payload optional\n   * @param customHeaders\n   * @returns the list of currencies as well as the pagination properties.\n   */\n  list(\n    query?: AdminGetCurrenciesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCurrenciesListRes> {\n    let path = `/admin/currencies`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Updates a currency\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `tax_inclusive_pricing` in your medusa backend project.\n   * @param code code of the currency to update.\n   * @param payload update to apply to currency.\n   * @param customHeaders\n   * @returns the updated currency.\n   */\n  update(\n    code: string,\n    payload: AdminPostCurrenciesCurrencyReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCurrenciesRes> {\n    const path = `/admin/currencies/${code}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminCurrenciesResource\n", "import {\n  AdminPostCustomerGroupsReq,\n  AdminCustomerGroupsRes,\n  AdminGetCustomerGroupsParams,\n  AdminCustomerGroupsListRes,\n  AdminPostCustomerGroupsGroupReq,\n  AdminCustomerGroupsDeleteRes,\n  AdminPostCustomerGroupsGroupCustomersBatchReq,\n  AdminDeleteCustomerGroupsGroupCustomerBatchReq,\n  AdminGetCustomerGroupsGroupParams,\n  AdminCustomersListRes,\n  AdminGetCustomersParams,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\n\nimport BaseResource from \"../base\"\nimport { ResponsePromise } from \"../..\"\n\nclass AdminCustomerGroupsResource extends BaseResource {\n  /**\n   * Create a customer group.\n   *\n   * @param payload - customer group info\n   * @param customHeaders\n   */\n  create(\n    payload: AdminPostCustomerGroupsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomerGroupsRes> {\n    const path = `/admin/customer-groups`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieves a customer group.\n   *\n   * @param id - customer group id\n   * @param query - pass query options such as \"expand\", \"fields\" etc.\n   * @param customHeaders\n   */\n  retrieve(\n    id: string,\n    query?: AdminGetCustomerGroupsGroupParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomerGroupsRes> {\n    let path = `/admin/customer-groups/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n  /**\n   * Updates a customer group\n   *\n   * @param id - customer group id\n   * @param payload - data to update customer group with\n   * @param customHeaders\n   */\n  update(\n    id: string,\n    payload: AdminPostCustomerGroupsGroupReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomerGroupsRes> {\n    const path = `/admin/customer-groups/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Deletes a customer group.\n   *\n   * @param id - id of the customer group\n   * @param customHeaders\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomerGroupsDeleteRes> {\n    const path = `/admin/customer-groups/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Lists customer groups.\n   *\n   * @param query optional\n   * @param customHeaders\n   */\n  list(\n    query?: AdminGetCustomerGroupsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomerGroupsListRes> {\n    let path = `/admin/customer-groups`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/customer-groups?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Add multiple customers to a customer group.\n   *\n   * @param id - customer group id\n   * @param payload - an object which contains an array of customer ids which will be added to the group\n   * @param customHeaders\n   */\n  addCustomers(\n    id: string,\n    payload: AdminPostCustomerGroupsGroupCustomersBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomerGroupsRes> {\n    const path = `/admin/customer-groups/${id}/customers/batch`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Remove multiple customers from a customer group.\n   *\n   * @param id - customer group id\n   * @param payload - an object which contains an array of customers ids which will be removed from the group\n   * @param customHeaders\n   */\n  removeCustomers(\n    id: string,\n    payload: AdminDeleteCustomerGroupsGroupCustomerBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomerGroupsRes> {\n    const path = `/admin/customer-groups/${id}/customers/batch`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * List and count customers that belong to provided customer groups.\n   *\n   * @param id - customer group id\n   * @param query - params for filtering customers\n   * @param customHeaders\n   */\n  listCustomers(\n    id: string,\n    query?: AdminGetCustomersParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomersListRes> {\n    let path = `/admin/customer-groups/${id}/customers`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminCustomerGroupsResource\n", "import {\n  AdminCustomersListRes,\n  AdminCustomersRes,\n  AdminGetCustomersParams,\n  AdminPostCustomersReq,\n  AdminPostCustomersCustomerReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../..\"\nimport BaseResource from \"../base\"\n\nclass AdminCustomersResource extends BaseResource {\n  /**\n   * Creates a customer\n   * @param payload information of customer\n   * @param customHeaders\n   */\n  create(\n    payload: AdminPostCustomersReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomersRes> {\n    const path = `/admin/customers`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Updates a customer\n   * @param id customer id\n   * @param payload data to update customer with\n   * @param customHeaders\n   */\n  update(\n    id: string,\n    payload: AdminPostCustomersCustomerReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomersRes> {\n    const path = `/admin/customers/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieves a customer\n   * @param id customer id\n   * @param customHeaders\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomersRes> {\n    const path = `/admin/customers/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Lists customers\n   * @param query optional\n   * @param customHeaders\n   */\n  list(\n    query?: AdminGetCustomersParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomersListRes> {\n    let path = `/admin/customers`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/customers?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminCustomersResource\n", "import {\n  AdminDeleteDiscountsDiscountConditionsConditionBatchReq,\n  AdminDiscountConditionsRes,\n  AdminDiscountsDeleteRes,\n  AdminDiscountsListRes,\n  AdminDiscountsRes,\n  AdminGetDiscountsDiscountConditionsConditionParams,\n  AdminGetDiscountsParams,\n  AdminPostDiscountsDiscountConditions,\n  AdminPostDiscountsDiscountConditionsCondition,\n  AdminPostDiscountsDiscountConditionsConditionBatchParams,\n  AdminPostDiscountsDiscountConditionsConditionBatchReq,\n  AdminPostDiscountsDiscountConditionsConditionParams,\n  AdminPostDiscountsDiscountConditionsParams,\n  AdminPostDiscountsDiscountDynamicCodesReq,\n  AdminPostDiscountsDiscountReq,\n  AdminPostDiscountsReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminDiscountsResource extends BaseResource {\n  /**\n   * @description Adds region to discount\n   */\n  addRegion(\n    id: string,\n    regionId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts/${id}/regions/${regionId}`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Creates discounts\n   */\n  create(\n    payload: AdminPostDiscountsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Updates discount\n   */\n  update(\n    id: string,\n    payload: AdminPostDiscountsDiscountReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Creates a dynamic discount code\n   */\n  createDynamicCode(\n    id: string,\n    payload: AdminPostDiscountsDiscountDynamicCodesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts/${id}/dynamic-codes`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Deletes a discount\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsDeleteRes> {\n    const path = `/admin/discounts/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Deletes a dynamic discount\n   */\n  deleteDynamicCode(\n    id: string,\n    code: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts/${id}/dynamic-codes/${code}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Retrieves a discount\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Retrieves a discount by code\n   */\n  retrieveByCode(\n    code: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts/code/${code}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Lists discounts\n   */\n  list(\n    query?: AdminGetDiscountsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsListRes> {\n    let path = `/admin/discounts`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Removes a region from a discount\n   */\n  removeRegion(\n    id: string,\n    regionId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts/${id}/regions/${regionId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description creates a discount condition\n   */\n  createCondition(\n    discountId: string,\n    payload: AdminPostDiscountsDiscountConditions,\n    query: AdminPostDiscountsDiscountConditionsParams = {},\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    let path = `/admin/discounts/${discountId}/conditions`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Updates a discount condition\n   */\n  updateCondition(\n    discountId: string,\n    conditionId: string,\n    payload: AdminPostDiscountsDiscountConditionsCondition,\n    query: AdminPostDiscountsDiscountConditionsConditionParams = {},\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    let path = `/admin/discounts/${discountId}/conditions/${conditionId}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Removes a condition from a discount\n   */\n  deleteCondition(\n    discountId: string,\n    conditionId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsDeleteRes> {\n    const path = `/admin/discounts/${discountId}/conditions/${conditionId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Gets a condition from a discount\n   */\n  getCondition(\n    discountId: string,\n    conditionId: string,\n    query?: AdminGetDiscountsDiscountConditionsConditionParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountConditionsRes> {\n    let path = `/admin/discounts/${discountId}/conditions/${conditionId}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Add a batch of items to a discount condition\n   */\n  addConditionResourceBatch(\n    discountId: string,\n    conditionId: string,\n    payload: AdminPostDiscountsDiscountConditionsConditionBatchReq,\n    query?: AdminPostDiscountsDiscountConditionsConditionBatchParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    let path = `/admin/discounts/${discountId}/conditions/${conditionId}/batch`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Delete a batch of items from a discount condition\n   */\n  deleteConditionResourceBatch(\n    discountId: string,\n    conditionId: string,\n    payload: AdminDeleteDiscountsDiscountConditionsConditionBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts/${discountId}/conditions/${conditionId}/batch`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminDiscountsResource\n", "import {\n  AdminDraftOrdersDeleteRes,\n  AdminDraftOrdersListRes,\n  AdminDraftOrdersRes,\n  AdminGetDraftOrdersParams,\n  AdminPostDraftOrdersDraftOrderLineItemsItemReq,\n  AdminPostDraftOrdersDraftOrderLineItemsReq,\n  AdminPostDraftOrdersDraftOrderRegisterPaymentRes,\n  AdminPostDraftOrdersDraftOrderReq,\n  AdminPostDraftOrdersReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminDraftOrdersResource extends BaseResource {\n  /**\n   * @description Creates a draft order\n   */\n  create(\n    payload: AdminPostDraftOrdersReq,\n    customHeaders: Record<string, any> = {}): ResponsePromise<AdminDraftOrdersRes> {\n    const path = `/admin/draft-orders`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Add line item to draft order\n   */\n  addLineItem(\n    id: string,\n    payload: AdminPostDraftOrdersDraftOrderLineItemsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDraftOrdersRes> {\n    const path = `/admin/draft-orders/${id}/line-items`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Delete draft order\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDraftOrdersDeleteRes> {\n    const path = `/admin/draft-orders/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Remove line item\n   */\n  removeLineItem(\n    id: string,\n    itemId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDraftOrdersRes> {\n    const path = `/admin/draft-orders/${id}/line-items/${itemId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Retrieves a draft order\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDraftOrdersRes> {\n    const path = `/admin/draft-orders/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Lists draft orders\n   */\n  list(\n    query?: AdminGetDraftOrdersParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDraftOrdersListRes> {\n    let path = `/admin/draft-orders`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/draft-orders?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Mark a draft order as paid\n   */\n  markPaid(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPostDraftOrdersDraftOrderRegisterPaymentRes> {\n    const path = `/admin/draft-orders/${id}/pay`\n    return this.client.request(\"POST\", path, {}, customHeaders)\n  }\n\n  /**\n   * @description Update draft order\n   */\n  update(\n    id: string,\n    payload: AdminPostDraftOrdersDraftOrderReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDraftOrdersRes> {\n    const path = `/admin/draft-orders/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Update draft order line item\n   */\n  updateLineItem(\n    id: string,\n    itemId: string,\n    payload: AdminPostDraftOrdersDraftOrderLineItemsItemReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDraftOrdersRes> {\n    const path = `/admin/draft-orders/${id}/line-items/${itemId}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminDraftOrdersResource\n", "import {\n  AdminGetGiftCardsParams,\n  AdminGiftCardsDeleteRes,\n  AdminGiftCardsListRes,\n  AdminGiftCardsRes,\n  AdminPostGiftCardsGiftCardReq,\n  AdminPostGiftCardsReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminGiftCardsResource extends BaseResource {\n  /**\n   * @description Creates a gift card\n   */\n  create(\n    payload: AdminPostGiftCardsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminGiftCardsRes> {\n    const path = `/admin/gift-cards`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Updates a gift card\n   */\n  update(\n    id: string,\n    payload: AdminPostGiftCardsGiftCardReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminGiftCardsRes> {\n    const path = `/admin/gift-cards/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Deletes a gift card\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminGiftCardsDeleteRes> {\n    const path = `/admin/gift-cards/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Deletes a gift card\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminGiftCardsRes> {\n    const path = `/admin/gift-cards/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Lists gift cards\n   */\n  list(\n    query?: AdminGetGiftCardsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminGiftCardsListRes> {\n    let path = `/admin/gift-cards/`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/gift-cards?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminGiftCardsResource\n", "import {\n  AdminGetInventoryItemsParams,\n  AdminInventoryItemsRes,\n  AdminPostInventoryItemsInventoryItemReq,\n  AdminGetInventoryItemsItemLocationLevelsParams,\n  AdminPostInventoryItemsItemLocationLevelsLevelReq,\n  AdminInventoryItemsDeleteRes,\n  AdminGetInventoryItemsItemParams,\n  AdminInventoryItemsListWithVariantsAndLocationLevelsRes,\n  AdminInventoryItemsLocationLevelsRes,\n  AdminPostInventoryItemsItemLocationLevelsReq,\n  AdminPostInventoryItemsReq,\n  AdminPostInventoryItemsParams,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\nimport qs from \"qs\"\n\nclass AdminInventoryItemsResource extends BaseResource {\n  /**\n   * Retrieve an Inventory Item\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @description gets an Inventory Item\n   * @returns an Inventory Item\n   */\n  retrieve(\n    inventoryItemId: string,\n    query?: AdminGetInventoryItemsItemParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsRes> {\n    let path = `/admin/inventory-items/${inventoryItemId}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Update an Inventory Item\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @description updates an Inventory Item\n   * @returns the updated Inventory Item\n   */\n  update(\n    inventoryItemId: string,\n    payload: AdminPostInventoryItemsInventoryItemReq,\n    query?: AdminGetInventoryItemsItemParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsRes> {\n    let path = `/admin/inventory-items/${inventoryItemId}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete an Inventory Item\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @description deletes an Inventory Item\n   * @returns the deleted Inventory Item\n   */\n  delete(\n    inventoryItemId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsDeleteRes> {\n    const path = `/admin/inventory-items/${inventoryItemId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Create an Inventory Item\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @description creates an Inventory Item\n   * @returns the created Inventory Item\n   */\n  create(\n    payload: AdminPostInventoryItemsReq,\n    query?: AdminPostInventoryItemsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsRes> {\n    let path = `/admin/inventory-items`\n    \n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of Inventory Items\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @description Retrieve a list of Inventory Items\n   * @returns the list of Inventory Items as well as the pagination properties\n   */\n  list(\n    query?: AdminGetInventoryItemsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsListWithVariantsAndLocationLevelsRes> {\n    let path = `/admin/inventory-items`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Update an Inventory Item's stock level at a Stock Location\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @description updates an Inventory Item\n   * @returns the updated Inventory Item\n   */\n  updateLocationLevel(\n    inventoryItemId: string,\n    locationId: string,\n    payload: AdminPostInventoryItemsItemLocationLevelsLevelReq,\n    query?: AdminGetInventoryItemsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsRes> {\n    let path = `/admin/inventory-items/${inventoryItemId}/location-levels/${locationId}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Create stock for an Inventory Item at a Stock Location\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @description creates stock levle for an Inventory Item\n   * @returns the Inventory Item\n   */\n  createLocationLevel(\n    inventoryItemId: string,\n    payload: AdminPostInventoryItemsItemLocationLevelsReq,\n    query?: AdminGetInventoryItemsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsRes> {\n    let path = `/admin/inventory-items/${inventoryItemId}/location-levels`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Removes an Inventory Item from a Stock Location. This erases trace of any quantity currently at the location.\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @description deletes a location level of an Inventory Item\n   * @returns the Inventory Item\n   */\n  deleteLocationLevel(\n    inventoryItemId: string,\n    locationId: string,\n    query?: AdminGetInventoryItemsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsRes> {\n    let path = `/admin/inventory-items/${inventoryItemId}/location-levels/${locationId}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of Inventory Levels related to an Inventory Item across Stock Locations\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @description Retrieve a list of location levels related to an Inventory Item\n   * @returns the list of inventory levels related to an Inventory Item as well as the pagination properties\n   */\n  listLocationLevels(\n    inventoryItemId: string,\n    query?: AdminGetInventoryItemsItemLocationLevelsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsLocationLevelsRes> {\n    let path = `/admin/inventory-items/${inventoryItemId}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminInventoryItemsResource\n", "import {\n  AdminInviteDeleteRes,\n  AdminListInvitesRes,\n  AdminPostInvitesInviteAcceptReq,\n} from \"@medusajs/medusa\"\nimport { AdminPostInvitesPayload, ResponsePromise } from \"../..\"\nimport BaseResource from \"../base\"\n\nclass AdminInvitesResource extends BaseResource {\n  accept(\n    payload: AdminPostInvitesInviteAcceptReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise {\n    const path = `/admin/invites/accept`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  create(\n    payload: AdminPostInvitesPayload,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise {\n    const path = `/admin/invites`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInviteDeleteRes> {\n    const path = `/admin/invites/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  list(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminListInvitesRes> {\n    const path = `/admin/invites`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  resend(id: string, customHeaders: Record<string, any> = {}): ResponsePromise {\n    const path = `/admin/invites/${id}`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminInvitesResource\n", "import {\n  AdminGetNotesParams,\n  AdminNotesDeleteRes,\n  AdminNotesListRes,\n  AdminNotesRes,\n  AdminPostNotesNoteReq,\n  AdminPostNotesReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminNotesResource extends BaseResource {\n  create(\n    payload: AdminPostNotesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminNotesRes> {\n    const path = `/admin/notes`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  update(\n    id: string,\n    payload: AdminPostNotesNoteReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminNotesRes> {\n    const path = `/admin/notes/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminNotesDeleteRes> {\n    const path = `/admin/notes/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminNotesRes> {\n    const path = `/admin/notes/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  list(\n    query?: AdminGetNotesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminNotesListRes> {\n    let path = `/admin/notes/`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/notes?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminNotesResource\n", "import {\n  AdminGetNotificationsParams,\n  AdminNotificationsListRes,\n  AdminNotificationsRes,\n  AdminPostNotificationsNotificationResendReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../..\"\nimport BaseResource from \"../base\"\n\nclass AdminNotificationsResource extends BaseResource {\n  list(\n    query?: AdminGetNotificationsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminNotificationsListRes> {\n    let path = `/admin/notifications`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/notifications?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  resend(\n    id: string,\n    payload: AdminPostNotificationsNotificationResendReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminNotificationsRes> {\n    const path = `/admin/notifications/${id}/resend`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminNotificationsResource\n", "import {\n  AdminOrderEditDeleteRes,\n  AdminOrderEditItemChangeDeleteRes,\n  AdminOrderEditsListRes,\n  AdminOrderEditsRes,\n  AdminPostOrderEditsEditLineItemsLineItemReq,\n  AdminPostOrderEditsEditLineItemsReq,\n  AdminPostOrderEditsOrderEditReq,\n  AdminPostOrderEditsReq,\n  GetOrderEditsOrderEditParams,\n  GetOrderEditsParams,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\nimport qs from \"qs\"\n\nclass AdminOrderEditsResource extends BaseResource {\n  retrieve(\n    id: string,\n    query?: GetOrderEditsOrderEditParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    let path = `/admin/order-edits/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  list(\n    query?: GetOrderEditsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsListRes> {\n    let path = `/admin/order-edits`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  create(\n    payload: AdminPostOrderEditsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    const path = `/admin/order-edits`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  update(\n    id: string,\n    payload: AdminPostOrderEditsOrderEditReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    const path = `/admin/order-edits/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditDeleteRes> {\n    const path = `/admin/order-edits/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  addLineItem(\n    id: string,\n    payload: AdminPostOrderEditsEditLineItemsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    const path = `/admin/order-edits/${id}/items`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  deleteItemChange(\n    orderEditId: string,\n    itemChangeId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditItemChangeDeleteRes> {\n    const path = `/admin/order-edits/${orderEditId}/changes/${itemChangeId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  requestConfirmation(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    const path = `/admin/order-edits/${id}/request`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  cancel(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    const path = `/admin/order-edits/${id}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  confirm(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    const path = `/admin/order-edits/${id}/confirm`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  updateLineItem(\n    orderEditId: string,\n    itemId: string,\n    payload: AdminPostOrderEditsEditLineItemsLineItemReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    const path = `/admin/order-edits/${orderEditId}/items/${itemId}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  removeLineItem(\n    orderEditId: string,\n    itemId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    const path = `/admin/order-edits/${orderEditId}/items/${itemId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminOrderEditsResource\n", "import {\n  AdminGetOrdersParams,\n  AdminOrdersListRes,\n  AdminOrdersRes,\n  AdminPostOrdersOrderClaimsClaimFulfillmentsReq,\n  AdminPostOrdersOrderClaimsClaimReq,\n  AdminPostOrdersOrderClaimsClaimShipmentsReq,\n  AdminPostOrdersOrderClaimsReq,\n  AdminPostOrdersOrderFulfillmentsReq,\n  AdminPostOrdersOrderRefundsReq,\n  AdminPostOrdersOrderReq,\n  AdminPostOrdersOrderReturnsReq,\n  AdminPostOrdersOrderShipmentReq,\n  AdminPostOrdersOrderShippingMethodsReq,\n  AdminPostOrdersOrderSwapsReq,\n  AdminPostOrdersOrderSwapsSwapFulfillmentsReq,\n  AdminPostOrdersOrderSwapsSwapShipmentsReq,\n} from \"@medusajs/medusa\"\nimport { FindParams } from \"@medusajs/medusa/dist/types/common\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminOrdersResource extends BaseResource {\n  update(\n    id: string,\n    payload: AdminPostOrdersOrderReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  retrieve(\n    id: string,\n    query?: FindParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    let path = `/admin/orders/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/orders/${id}?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  list(\n    query?: AdminGetOrdersParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersListRes> {\n    let path = `/admin/orders`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/orders?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  complete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/complete`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  capturePayment(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/capture`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  refundPayment(\n    id: string,\n    payload: AdminPostOrdersOrderRefundsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/refund`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  createFulfillment(\n    id: string,\n    payload: AdminPostOrdersOrderFulfillmentsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/fulfillment`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  cancelFulfillment(\n    id: string,\n    fulfillmentId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/fulfillments/${fulfillmentId}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  cancelSwapFulfillment(\n    id: string,\n    swapId: string,\n    fulfillmentId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/swaps/${swapId}/fulfillments/${fulfillmentId}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  cancelClaimFulfillment(\n    id: string,\n    claimId: string,\n    fulfillmentId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/claims/${claimId}/fulfillments/${fulfillmentId}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  createShipment(\n    id: string,\n    payload: AdminPostOrdersOrderShipmentReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/shipment`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  requestReturn(\n    id: string,\n    payload: AdminPostOrdersOrderReturnsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/return`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  cancel(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  addShippingMethod(\n    id: string,\n    payload: AdminPostOrdersOrderShippingMethodsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/shipping-methods`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  archive(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/archive`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  createSwap(\n    id: string,\n    payload: AdminPostOrdersOrderSwapsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/swaps`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  cancelSwap(\n    id: string,\n    swapId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/swaps/${swapId}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  fulfillSwap(\n    id: string,\n    swapId: string,\n    payload: AdminPostOrdersOrderSwapsSwapFulfillmentsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/swaps/${swapId}/fulfillments`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  createSwapShipment(\n    id: string,\n    swapId: string,\n    payload: AdminPostOrdersOrderSwapsSwapShipmentsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/swaps/${swapId}/shipments`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  processSwapPayment(\n    id: string,\n    swapId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/swaps/${swapId}/process-payment`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  createClaim(\n    id: string,\n    payload: AdminPostOrdersOrderClaimsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/claims`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  cancelClaim(\n    id: string,\n    claimId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/claims/${claimId}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  updateClaim(\n    id: string,\n    claimId: string,\n    payload: AdminPostOrdersOrderClaimsClaimReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/claims/${claimId}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  fulfillClaim(\n    id: string,\n    claimId: string,\n    payload: AdminPostOrdersOrderClaimsClaimFulfillmentsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/claims/${claimId}/fulfillments`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  createClaimShipment(\n    id: string,\n    claimId: string,\n    payload: AdminPostOrdersOrderClaimsClaimShipmentsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/claims/${claimId}/shipments`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminOrdersResource\n", "import {\n  AdminGetPaymentCollectionsParams,\n  AdminPaymentCollectionDeleteRes,\n  AdminPaymentCollectionsRes,\n  AdminUpdatePaymentCollectionsReq,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\nimport qs from \"qs\"\n\nclass AdminPaymentCollectionsResource extends BaseResource {\n  retrieve(\n    id: string,\n    query?: AdminGetPaymentCollectionsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPaymentCollectionsRes> {\n    let path = `/admin/payment-collections/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  update(\n    id: string,\n    payload: AdminUpdatePaymentCollectionsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPaymentCollectionsRes> {\n    const path = `/admin/payment-collections/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPaymentCollectionDeleteRes> {\n    const path = `/admin/payment-collections/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  markAsAuthorized(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPaymentCollectionsRes> {\n    const path = `/admin/payment-collections/${id}/authorize`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminPaymentCollectionsResource\n", "import {\n  AdminPaymentRes,\n  AdminPostPaymentRefundsReq,\n  AdminRefundRes,\n  GetPaymentsParams,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminPaymentsResource extends BaseResource {\n  retrieve(\n    id: string,\n    query?: GetPaymentsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPaymentRes> {\n    let path = `/admin/payments/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/payments/${id}?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  capturePayment(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPaymentRes> {\n    const path = `/admin/payments/${id}/capture`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  refundPayment(\n    id: string,\n    payload: AdminPostPaymentRefundsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRefundRes> {\n    const path = `/admin/payments/${id}/refund`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminPaymentsResource\n", "import {\n  AdminPostPriceListPricesPricesReq,\n  AdminPostPriceListsPriceListPriceListReq,\n  AdminPostPriceListsPriceListReq,\n  AdminPriceListDeleteRes,\n  AdminPriceListRes,\n  AdminGetPriceListPaginationParams,\n  AdminPriceListsListRes,\n  AdminDeletePriceListPricesPricesReq,\n  AdminPriceListDeleteBatchRes,\n  AdminGetPriceListsPriceListProductsParams,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminPriceListResource extends BaseResource {\n  create(\n    payload: AdminPostPriceListsPriceListReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListRes> {\n    const path = `/admin/price-lists`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  update(\n    id: string,\n    payload: AdminPostPriceListsPriceListPriceListReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListRes> {\n    const path = `/admin/price-lists/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListDeleteRes> {\n    const path = `/admin/price-lists/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListRes> {\n    const path = `/admin/price-lists/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  list(\n    query?: AdminGetPriceListPaginationParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListsListRes> {\n    let path = `/admin/price-lists/`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/price-lists?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  listProducts(\n    id: string,\n    query?: AdminGetPriceListsPriceListProductsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<any> {\n    let path = `/admin/price-lists/${id}/products`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/price-lists/${id}/products?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  addPrices(\n    id: string,\n    payload: AdminPostPriceListPricesPricesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListRes> {\n    const path = `/admin/price-lists/${id}/prices/batch`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  deletePrices(\n    id: string,\n    payload: AdminDeletePriceListPricesPricesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListDeleteBatchRes> {\n    const path = `/admin/price-lists/${id}/prices/batch`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  deleteProductPrices(\n    priceListId: string,\n    productId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListDeleteBatchRes> {\n    const path = `/admin/price-lists/${priceListId}/products/${productId}/prices`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  deleteVariantPrices(\n    priceListId: string,\n    variantId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListDeleteBatchRes> {\n    const path = `/admin/price-lists/${priceListId}/variants/${variantId}/prices`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminPriceListResource\n", "import {\n  AdminDeleteProductCategoriesCategoryProductsBatchReq,\n  AdminGetProductCategoriesParams,\n  AdminPostProductCategoriesCategoryProductsBatchReq,\n  AdminPostProductCategoriesReq,\n  AdminPostProductCategoriesCategoryParams,\n  AdminProductCategoriesCategoryDeleteRes,\n  AdminProductCategoriesListRes,\n  AdminProductCategoriesCategoryRes,\n  AdminGetProductCategoryParams,\n  AdminPostProductCategoriesCategoryReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\n\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminProductCategoriesResource extends BaseResource {\n  /** retrieve a product category\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `product_categories` in your medusa backend project.\n   * @description gets a product category\n   * @returns a medusa product category\n   */\n  retrieve(\n    productCategoryId: string,\n    query?: AdminGetProductCategoryParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductCategoriesCategoryRes> {\n    let path = `/admin/product-categories/${productCategoryId}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `${path}?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /* *\n   * Create a medusa product category\n   * @returns the created product category\n   */\n  create(\n    payload: AdminPostProductCategoriesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductCategoriesCategoryRes> {\n    const path = `/admin/product-categories`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /** update a product category\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `product_categories` in your medusa backend project.\n   * @description updates a product category\n   * @returns the updated medusa product category\n   */\n  update(\n    productCategoryId: string,\n    payload: AdminPostProductCategoriesCategoryReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductCategoriesCategoryRes> {\n    const path = `/admin/product-categories/${productCategoryId}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of product categories\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `product_categories` in your medusa backend project.\n   * @description Retrieve a list of product categories\n   * @returns the list of product category as well as the pagination properties\n   */\n  list(\n    query?: AdminGetProductCategoriesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductCategoriesListRes> {\n    let path = `/admin/product-categories`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Delete a product category\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `product_categories` in your medusa backend project.\n   * @description gets a product category\n   * @returns an deletion result\n   */\n  delete(\n    productCategoryId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductCategoriesCategoryDeleteRes> {\n    const path = `/admin/product-categories/${productCategoryId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Remove products from a product category\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `product_categories` in your medusa backend project.\n   * @description Remove products from a product category\n   * @returns a medusa product category\n   */\n  removeProducts(\n    productCategoryId: string,\n    payload: AdminDeleteProductCategoriesCategoryProductsBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductCategoriesCategoryRes> {\n    const path = `/admin/product-categories/${productCategoryId}/products/batch`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Add products to a product category\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `product_categories` in your medusa backend project.\n   * @description Add products to a product category\n   * @returns a medusa product category\n   */\n  addProducts(\n    productCategoryId: string,\n    payload: AdminPostProductCategoriesCategoryProductsBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductCategoriesCategoryRes> {\n    const path = `/admin/product-categories/${productCategoryId}/products/batch`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminProductCategoriesResource\n", "import {\n  AdminGetProductTagsParams,\n  AdminProductTagsListRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminProductTagsResource extends BaseResource {\n  list(\n    query?: AdminGetProductTagsParams\n  ): ResponsePromise<AdminProductTagsListRes> {\n    let path = `/admin/product-tags`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/product-tags?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path)\n  }\n}\n\nexport default AdminProductTagsResource\n", "import {\n  AdminGetProductTypesParams,\n  AdminProductTypesListRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminProductTypesResource extends BaseResource {\n  list(\n    query?: AdminGetProductTypesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductTypesListRes> {\n    let path = `/admin/product-types`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminProductTypesResource\n", "import {\n  AdminGetProductsParams,\n  AdminPostProductsProductMetadataReq,\n  AdminPostProductsProductOptionsOption,\n  AdminPostProductsProductOptionsReq,\n  AdminPostProductsProductReq,\n  AdminPostProductsProductVariantsReq,\n  AdminPostProductsProductVariantsVariantReq,\n  AdminPostProductsReq,\n  AdminProductsDeleteOptionRes,\n  AdminProductsDeleteRes,\n  AdminProductsDeleteVariantRes,\n  AdminProductsListRes,\n  AdminProductsListTagsRes,\n  AdminProductsListTypesRes,\n  AdminProductsRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminProductsResource extends BaseResource {\n  create(\n    payload: AdminPostProductsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsRes> {\n    const path = `/admin/products/`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsRes> {\n    const path = `/admin/products/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  update(\n    id: string,\n    payload: AdminPostProductsProductReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsRes> {\n    const path = `/admin/products/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsDeleteRes> {\n    const path = `/admin/products/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  list(\n    query?: AdminGetProductsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsListRes> {\n    let path = `/admin/products`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/products?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @deprecated Use {@link AdminProductTypesResource.list} instead.\n   */\n  listTypes(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsListTypesRes> {\n    const path = `/admin/products/types`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  listTags(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsListTagsRes> {\n    const path = `/admin/products/tag-usage`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  setMetadata(\n    id: string,\n    payload: AdminPostProductsProductMetadataReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsRes> {\n    const path = `/admin/products/${id}/metadata`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  createVariant(\n    id: string,\n    payload: AdminPostProductsProductVariantsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsRes> {\n    const path = `/admin/products/${id}/variants`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  updateVariant(\n    id: string,\n    variantId: string,\n    payload: AdminPostProductsProductVariantsVariantReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsRes> {\n    const path = `/admin/products/${id}/variants/${variantId}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  deleteVariant(\n    id: string,\n    variantId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsDeleteVariantRes> {\n    const path = `/admin/products/${id}/variants/${variantId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  addOption(\n    id: string,\n    payload: AdminPostProductsProductOptionsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsRes> {\n    const path = `/admin/products/${id}/options`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  updateOption(\n    id: string,\n    optionId: string,\n    payload: AdminPostProductsProductOptionsOption,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsRes> {\n    const path = `/admin/products/${id}/options/${optionId}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  deleteOption(\n    id: string,\n    optionId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsDeleteOptionRes> {\n    const path = `/admin/products/${id}/options/${optionId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminProductsResource\n", "import qs from \"qs\"\n\nimport {\n  AdminPublishableApiKeyDeleteRes,\n  AdminPublishableApiKeysRes,\n  GetPublishableApiKeysParams,\n  AdminPublishableApiKeysListRes,\n  AdminPostPublishableApiKeysReq,\n  AdminPostPublishableApiKeysPublishableApiKeyReq,\n  AdminPostPublishableApiKeySalesChannelsBatchReq,\n  AdminDeletePublishableApiKeySalesChannelsBatchReq,\n  GetPublishableApiKeySalesChannelsParams,\n  AdminSalesChannelsListRes,\n} from \"@medusajs/medusa\"\n\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminPublishableApiKeyResource extends BaseResource {\n  retrieve(\n    id: string,\n    query?: {},\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPublishableApiKeysRes> {\n    let path = `/admin/publishable-api-keys/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  list(\n    query?: GetPublishableApiKeysParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPublishableApiKeysListRes> {\n    let path = `/admin/publishable-api-keys`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  create(\n    payload: AdminPostPublishableApiKeysReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPublishableApiKeysRes> {\n    const path = `/admin/publishable-api-keys`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  update(\n    id: string,\n    payload: AdminPostPublishableApiKeysPublishableApiKeyReq,\n    customHeaders: Record<string, any> = {}\n  ) {\n    const path = `/admin/publishable-api-keys/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPublishableApiKeyDeleteRes> {\n    const path = `/admin/publishable-api-keys/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  revoke(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPublishableApiKeysRes> {\n    const path = `/admin/publishable-api-keys/${id}/revoke`\n    return this.client.request(\"POST\", path, {}, {}, customHeaders)\n  }\n\n  addSalesChannelsBatch(\n    id: string,\n    payload: AdminPostPublishableApiKeySalesChannelsBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPublishableApiKeysRes> {\n    const path = `/admin/publishable-api-keys/${id}/sales-channels/batch`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  deleteSalesChannelsBatch(\n    id: string,\n    payload: AdminDeletePublishableApiKeySalesChannelsBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPublishableApiKeysRes> {\n    const path = `/admin/publishable-api-keys/${id}/sales-channels/batch`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  listSalesChannels(\n    id: string,\n    query?: GetPublishableApiKeySalesChannelsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsListRes> {\n    let path = `/admin/publishable-api-keys/${id}/sales-channels`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminPublishableApiKeyResource\n", "import {\n  AdminPostRegionsReq,\n  AdminRegionsRes,\n  AdminPostRegionsRegionReq,\n  AdminRegionsDeleteRes,\n  AdminRegionsListRes,\n  AdminGetRegionsParams,\n  AdminPostRegionsRegionCountriesReq,\n  AdminPostRegionsRegionFulfillmentProvidersReq,\n  AdminPostRegionsRegionPaymentProvidersReq,\n  AdminGetRegionsRegionFulfillmentOptionsRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminRegionsResource extends BaseResource {\n  /**\n   * @description creates a region.\n   * @param payload\n   * @param customHeaders\n   * @returns created region.\n   */\n  create(\n    payload: AdminPostRegionsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description updates a region\n   * @param id id of the region to update.\n   * @param payload update to apply to region.\n   * @param customHeaders\n   * @returns the updated region.\n   */\n  update(\n    id: string,\n    payload: AdminPostRegionsRegionReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description deletes a region\n   * @param id id of region to delete.\n   * @param customHeaders\n   * @returns Deleted response\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsDeleteRes> {\n    const path = `/admin/regions/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description get a region\n   * @param id id of the region to retrieve.\n   * @param customHeaders\n   * @returns the region with the given id\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description lists regions matching a query\n   * @param query query for searching regions\n   * @param customHeaders\n   * @returns a list of regions matching the query.\n   */\n  list(\n    query?: AdminGetRegionsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsListRes> {\n    let path = `/admin/regions`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/regions?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description adds a country to the list of countries in a region\n   * @param id region id\n   * @param payload country data\n   * @param customHeaders\n   * @returns updated region\n   */\n  addCountry(\n    id: string,\n    payload: AdminPostRegionsRegionCountriesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions/${id}/countries`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description remove a country from a region's list of coutnries\n   * @param id region id\n   * @param country_code the 2 character ISO code for the Country.\n   * @param customHeaders\n   * @returns updated region\n   */\n  deleteCountry(\n    id: string,\n    country_code: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions/${id}/countries/${country_code}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description adds a fulfillment provider to a region\n   * @param id region id\n   * @param payload fulfillment provider data\n   * @param customHeaders\n   * @returns updated region\n   */\n  addFulfillmentProvider(\n    id: string,\n    payload: AdminPostRegionsRegionFulfillmentProvidersReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions/${id}/fulfillment-providers`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description remove a fulfillment provider from a region\n   * @param id region id\n   * @param provider_id the if of the fulfillment provider\n   * @param customHeaders\n   * @returns updated region\n   */\n  deleteFulfillmentProvider(\n    id: string,\n    provider_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions/${id}/fulfillment-providers/${provider_id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description retrieves the list of fulfillment options available in a region\n   * @param id region id\n   * @param customHeaders\n   * @returns list of fulfillment options\n   */\n  retrieveFulfillmentOptions(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminGetRegionsRegionFulfillmentOptionsRes> {\n    const path = `/admin/regions/${id}/fulfillment-options`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description adds a payment provider to a region\n   * @param id region id\n   * @param payload payment provider data\n   * @param customHeaders\n   * @returns updated region\n   */\n  addPaymentProvider(\n    id: string,\n    payload: AdminPostRegionsRegionPaymentProvidersReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions/${id}/payment-providers`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description removes a payment provider from a region\n   * @param id region id\n   * @param provider_id the id of the payment provider\n   * @param customHeaders\n   * @returns updated region\n   */\n  deletePaymentProvider(\n    id: string,\n    provider_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions/${id}/payment-providers/${provider_id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminRegionsResource\n", "import {\n  AdminPostReservationsReq,\n  AdminPostReservationsReservationReq,\n  AdminReservationsDeleteRes,\n  AdminReservationsRes,\n  AdminGetReservationsParams,\n  AdminReservationsListRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminReservationsResource extends BaseResource {\n  /**\n   * Get a reservation\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @description gets a reservation\n   * @returns The reservation with the provided id\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, unknown> = {}\n  ): ResponsePromise<AdminReservationsRes> {\n    const path = `/admin/reservations/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * List reservations\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @description Lists reservations\n   * @returns A list of reservations matching the provided query\n   */\n  list(\n    query?: AdminGetReservationsParams,\n    customHeaders: Record<string, unknown> = {}\n  ): ResponsePromise<AdminReservationsListRes> {\n    let path = `/admin/reservations`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * create a reservation\n   * @description create a reservation\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @returns the created reservation\n   */\n  create(\n    payload: AdminPostReservationsReq,\n    customHeaders: Record<string, unknown> = {}\n  ): ResponsePromise<AdminReservationsRes> {\n    const path = `/admin/reservations`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * update a reservation\n   * @description update a reservation\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @returns The updated reservation\n   */\n  update(\n    id: string,\n    payload: AdminPostReservationsReservationReq,\n    customHeaders: Record<string, unknown> = {}\n  ): ResponsePromise<AdminReservationsRes> {\n    const path = `/admin/reservations/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * remove a reservation\n   * @description remove a reservation\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/inventory\n   * @returns reservation removal confirmation\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, unknown> = {}\n  ): ResponsePromise<AdminReservationsDeleteRes> {\n    const path = `/admin/reservations/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminReservationsResource\n", "import {\n  AdminPostReturnReasonsReq,\n  AdminReturnReasonsRes,\n  AdminReturnReasonsDeleteRes,\n  AdminReturnReasonsListRes,\n  AdminPostReturnReasonsReasonReq,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminReturnReasonsResource extends BaseResource {\n  /**\n   * @description Creates a return reason.\n   * @param payload\n   * @param customHeaders\n   * @returns Created return reason.\n   */\n  create(\n    payload: AdminPostReturnReasonsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminReturnReasonsRes> {\n    const path = `/admin/return-reasons`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description Updates a return reason\n   * @param id id of the return reason to update.\n   * @param payload update to apply to return reason.\n   * @param customHeaders\n   * @returns the updated return reason.\n   */\n  update(\n    id: string,\n    payload: AdminPostReturnReasonsReasonReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminReturnReasonsRes> {\n    const path = `/admin/return-reasons/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description deletes a return reason\n   * @param id id of return reason to delete.\n   * @param customHeaders\n   * @returns Deleted response\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminReturnReasonsDeleteRes> {\n    const path = `/admin/return-reasons/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description retrieves a return reason\n   * @param id id of the return reason to retrieve.\n   * @param customHeaders\n   * @returns the return reason with the given id\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminReturnReasonsRes> {\n    const path = `/admin/return-reasons/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Lists return reasons matching a query\n   * @returns a list of return reasons matching the query.\n   * @param customHeaders\n   */\n  list(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminReturnReasonsListRes> {\n    const path = `/admin/return-reasons`\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminReturnReasonsResource\n", "import {\n  AdminGetReturnsParams,\n  AdminPostReturnsReturnReceiveReq,\n  AdminReturnsCancelRes,\n  AdminReturnsListRes,\n  AdminReturnsRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminReturnsResource extends BaseResource {\n  /**\n   * @description cancels a return\n   * @param id id of return to cancel\n   * @param customHeaders\n   * @returns the order for which the return was canceled\n   */\n  cancel(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminReturnsCancelRes> {\n    const path = `/admin/returns/${id}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description receive a return\n   * @param id id of the return to receive.\n   * @param payload items to receive and an optional refund amount\n   * @param customHeaders\n   * @returns the return\n   */\n  receive(\n    id: string,\n    payload: AdminPostReturnsReturnReceiveReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminReturnsRes> {\n    const path = `/admin/returns/${id}/receive`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description lists returns matching a query\n   * @param query query for searching returns\n   * @param customHeaders\n   * @returns a list of returns matching the query\n   */\n  list(\n    query?: AdminGetReturnsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminReturnsListRes> {\n    let path = `/admin/returns/`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/returns?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminReturnsResource\n", "import {\n  AdminDeleteSalesChannelsChannelProductsBatchReq,\n  AdminDeleteSalesChannelsChannelStockLocationsReq,\n  AdminGetSalesChannelsParams,\n  AdminPostSalesChannelsChannelProductsBatchReq,\n  AdminPostSalesChannelsChannelStockLocationsReq,\n  AdminPostSalesChannelsReq,\n  AdminPostSalesChannelsSalesChannelReq,\n  AdminSalesChannelsDeleteRes,\n  AdminSalesChannelsListRes,\n  AdminSalesChannelsRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminSalesChannelsResource extends BaseResource {\n  /** retrieve a sales channel\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n   * @description gets a sales channel\n   * @returns a medusa sales channel\n   */\n  retrieve(\n    salesChannelId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsRes> {\n    const path = `/admin/sales-channels/${salesChannelId}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /* *\n   * Create a medusa sales channel\n   * @returns the created channel\n   */\n  create(\n    payload: AdminPostSalesChannelsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsRes> {\n    const path = `/admin/sales-channels`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /** update a sales channel\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n   * @description updates a sales channel\n   * @returns the updated medusa sales channel\n   */\n  update(\n    salesChannelId: string,\n    payload: AdminPostSalesChannelsSalesChannelReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsRes> {\n    const path = `/admin/sales-channels/${salesChannelId}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of sales channels\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n   * @description Retrieve a list of sales channels\n   * @returns the list of sales channel as well as the pagination properties\n   */\n  list(\n    query?: AdminGetSalesChannelsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsListRes> {\n    let path = `/admin/sales-channels`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Delete a sales channel\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n   * @description gets a sales channel\n   * @returns an deletion result\n   */\n  delete(\n    salesChannelId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsDeleteRes> {\n    const path = `/admin/sales-channels/${salesChannelId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Remove products from a sales channel\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n   * @description Remove products from a sales channel\n   * @returns a medusa sales channel\n   */\n  removeProducts(\n    salesChannelId: string,\n    payload: AdminDeleteSalesChannelsChannelProductsBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsRes> {\n    const path = `/admin/sales-channels/${salesChannelId}/products/batch`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Add products to a sales channel\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n   * @description Add products to a sales channel\n   * @returns a medusa sales channel\n   */\n  addProducts(\n    salesChannelId: string,\n    payload: AdminPostSalesChannelsChannelProductsBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsRes> {\n    const path = `/admin/sales-channels/${salesChannelId}/products/batch`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Add a location to a sales channel\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n   * @description Add a stock location to a SalesChannel\n   * @returns the Medusa SalesChannel\n   */\n  addLocation(\n    salesChannelId: string,\n    payload: AdminPostSalesChannelsChannelStockLocationsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsRes> {\n    const path = `/admin/sales-channels/${salesChannelId}/stock-locations`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * remove a location from a sales channel\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n   * @description Remove a stock location from a SalesChannel\n   * @returns an deletion result\n   */\n  removeLocation(\n    salesChannelId: string,\n    payload: AdminDeleteSalesChannelsChannelStockLocationsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsRes> {\n    const path = `/admin/sales-channels/${salesChannelId}/stock-locations`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminSalesChannelsResource\n", "import {\n  AdminPostShippingOptionsReq,\n  AdminShippingOptionsRes,\n  AdminPostShippingOptionsOptionReq,\n  AdminShippingOptionsDeleteRes,\n  AdminShippingOptionsListRes,\n  AdminGetShippingOptionsParams,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminShippingOptionsResource extends BaseResource {\n  /**\n   * @description creates a shipping option.\n   * @param payload\n   * @param customHeaders\n   * @returns created shipping option.\n   */\n  create(\n    payload: AdminPostShippingOptionsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingOptionsRes> {\n    const path = `/admin/shipping-options`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description updates a shipping option\n   * @param id id of the shipping option to update.\n   * @param payload update to apply to shipping option.\n   * @param customHeaders\n   * @returns the updated shipping option.\n   */\n  update(\n    id: string,\n    payload: AdminPostShippingOptionsOptionReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingOptionsRes> {\n    const path = `/admin/shipping-options/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description deletes a shipping option\n   * @param id id of shipping option to delete.\n   * @param customHeaders\n   * @returns deleted response\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingOptionsDeleteRes> {\n    const path = `/admin/shipping-options/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description get a shipping option\n   * @param id id of the shipping option to retrieve.\n   * @param customHeaders\n   * @returns the shipping option with the given id\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingOptionsRes> {\n    const path = `/admin/shipping-options/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description lists shipping options matching a query\n   * @param query query for searching shipping options\n   * @param customHeaders\n   * @returns a list of shipping options matching the query.\n   */\n  list(\n    query?: AdminGetShippingOptionsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingOptionsListRes> {\n    let path = `/admin/shipping-options`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/shipping-options?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminShippingOptionsResource\n", "import {\n  AdminDeleteShippingProfileRes,\n  AdminPostShippingProfilesProfileReq,\n  AdminPostShippingProfilesReq,\n  AdminShippingProfilesListRes,\n  AdminShippingProfilesRes,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminShippingProfilesResource extends BaseResource {\n  create(\n    payload: AdminPostShippingProfilesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingProfilesRes> {\n    const path = `/admin/shipping-profiles/`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  update(\n    id: string,\n    payload: AdminPostShippingProfilesProfileReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingProfilesRes> {\n    const path = `/admin/shipping-profiles/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDeleteShippingProfileRes> {\n    const path = `/admin/shipping-profiles/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingProfilesRes> {\n    const path = `/admin/shipping-profiles/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  list(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingProfilesListRes> {\n    const path = `/admin/shipping-profiles/`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminShippingProfilesResource\n", "import {\n  AdminGetStockLocationsParams,\n  AdminStockLocationsRes,\n  AdminPostStockLocationsLocationReq,\n  AdminPostStockLocationsReq,\n  AdminStockLocationsListRes,\n  AdminStockLocationsDeleteRes,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\nimport qs from \"qs\"\n\nclass AdminStockLocationsResource extends BaseResource {\n  /**\n   * Create a Stock Location\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/stock-location\n   * @description gets a medusa Stock Location\n   * @returns a medusa Stock Location\n   */\n  create(\n    payload: AdminPostStockLocationsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminStockLocationsRes> {\n    const path = `/admin/stock-locations`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a Stock Location\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/stock-location\n   * @description gets a medusa Stock Location\n   * @returns a medusa Stock Location\n   */\n  retrieve(\n    itemId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminStockLocationsRes> {\n    const path = `/admin/stock-locations/${itemId}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Update a Stock Location\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/stock-location\n   * @description updates a Stock Location\n   * @returns the updated medusa Stock Location\n   */\n  update(\n    stockLocationId: string,\n    payload: AdminPostStockLocationsLocationReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminStockLocationsRes> {\n    const path = `/admin/stock-locations/${stockLocationId}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a Stock Location\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/stock-location\n   * @description deletes a Stock Location\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminStockLocationsDeleteRes> {\n    const path = `/admin/stock-locations/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of Stock Locations\n   * @experimental This feature is under development and may change in the future.\n   * To use this feature please install @medusajs/stock-location\n   * @description Retrieve a list of Stock Locations\n   * @returns the list of Stock Locations as well as the pagination properties\n   */\n  list(\n    query?: AdminGetStockLocationsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminStockLocationsListRes> {\n    let path = `/admin/stock-locations`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminStockLocationsResource\n", "import {\n  AdminExtendedStoresRes,\n  AdminPaymentProvidersList,\n  AdminPostStoreReq,\n  AdminStoresRes,\n  AdminTaxProvidersList,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminStoresResource extends BaseResource {\n  /**\n   * @description Updates the store\n   * @param payload update to apply to the store.\n   * @param customHeaders\n   * @returns the updated store.\n   */\n  update(\n    payload: AdminPostStoreReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminStoresRes> {\n    const path = `/admin/store/`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description adds a currency to the store.\n   * @param currency_code code of the currency to add\n   * @param customHeaders\n   * @returns updated store.\n   */\n  addCurrency(\n    currency_code: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminStoresRes> {\n    const path = `/admin/store/${currency_code}`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description deletes a currency from the available store currencies\n   * @param currency_code currency code of the currency to delete from the store.\n   * @param customHeaders\n   * @returns updated store\n   */\n  deleteCurrency(\n    currency_code: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminStoresRes> {\n    const path = `/admin/store/currencies/${currency_code}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description gets a medusa store\n   * @returns a medusa store\n   */\n  retrieve(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminExtendedStoresRes> {\n    const path = `/admin/store/`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Lists the store's payment providers\n   * @returns a list of payment providers configured on the store\n   */\n  listPaymentProviders(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPaymentProvidersList> {\n    const path = `/admin/store/payment-providers`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description Lists the store's payment providers\n   * @returns a list of payment providers configured on the store\n   */\n  listTaxProviders(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxProvidersList> {\n    const path = `/admin/store/tax-providers`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminStoresResource\n", "import {\n  AdminSwapsRes,\n  AdminSwapsListRes,\n  AdminGetSwapsParams,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminSwapsResource extends BaseResource {\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSwapsRes> {\n    const path = `/admin/swaps/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  list(\n    query?: AdminGetSwapsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSwapsListRes> {\n    let path = `/admin/swaps/`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/swaps?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminSwapsResource\n", "import {\n  AdminTaxRatesRes,\n  AdminTaxRatesListRes,\n  AdminTaxRatesDeleteRes,\n  AdminGetTaxRatesParams,\n  AdminGetTaxRatesTaxRateParams,\n  AdminDeleteTaxRatesTaxRateProductsReq,\n  AdminDeleteTaxRatesTaxRateProductsParams,\n  AdminDeleteTaxRatesTaxRateProductTypesReq,\n  AdminDeleteTaxRatesTaxRateProductTypesParams,\n  AdminDeleteTaxRatesTaxRateShippingOptionsReq,\n  AdminDeleteTaxRatesTaxRateShippingOptionsParams,\n  AdminPostTaxRatesReq,\n  AdminPostTaxRatesTaxRateReq,\n  AdminPostTaxRatesTaxRateProductsReq,\n  AdminPostTaxRatesTaxRateProductTypesReq,\n  AdminPostTaxRatesTaxRateShippingOptionsReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminTaxRatesResource extends BaseResource {\n  retrieve(\n    id: string,\n    query?: AdminGetTaxRatesTaxRateParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates/${id}?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  list(\n    query?: AdminGetTaxRatesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesListRes> {\n    let path = `/admin/tax-rates`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  create(\n    payload: AdminPostTaxRatesReq,\n    query?: AdminGetTaxRatesTaxRateParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  update(\n    id: string,\n    payload: AdminPostTaxRatesTaxRateReq,\n    query?: AdminGetTaxRatesTaxRateParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates/${id}?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  addProducts(\n    id: string,\n    payload: AdminPostTaxRatesTaxRateProductsReq,\n    query?: AdminGetTaxRatesTaxRateParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates/${id}/products/batch`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates/${id}/products/batch?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  addProductTypes(\n    id: string,\n    payload: AdminPostTaxRatesTaxRateProductTypesReq,\n    query?: AdminGetTaxRatesTaxRateParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates/${id}/product-types/batch`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates/${id}/product-types/batch?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  addShippingOptions(\n    id: string,\n    payload: AdminPostTaxRatesTaxRateShippingOptionsReq,\n    query?: AdminGetTaxRatesTaxRateParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates/${id}/shipping-options/batch`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates/${id}/shipping-options/batch?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  removeProducts(\n    id: string,\n    payload: AdminDeleteTaxRatesTaxRateProductsReq,\n    query?: AdminDeleteTaxRatesTaxRateProductsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates/${id}/products/batch`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates/${id}/products/batch?${queryString}`\n    }\n\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  removeProductTypes(\n    id: string,\n    payload: AdminDeleteTaxRatesTaxRateProductTypesReq,\n    query?: AdminDeleteTaxRatesTaxRateProductTypesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates/${id}/product-types/batch`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates/${id}/product-types/batch?${queryString}`\n    }\n\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  removeShippingOptions(\n    id: string,\n    payload: AdminDeleteTaxRatesTaxRateShippingOptionsReq,\n    query?: AdminDeleteTaxRatesTaxRateShippingOptionsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates/${id}/shipping-options/batch`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates/${id}/shipping-options/batch?${queryString}`\n    }\n\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesDeleteRes> {\n    const path = `/admin/tax-rates/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminTaxRatesResource\n", "import {\n  AdminDeleteUploadsReq,\n  AdminDeleteUploadsRes,\n  AdminPostUploadsDownloadUrlReq,\n  AdminUploadsDownloadUrlRes,\n  AdminUploadsRes,\n} from \"@medusajs/medusa\"\nimport { AdminCreateUploadPayload, ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\nclass AdminUploadsResource extends BaseResource {\n  private headers = {\n    \"Content-Type\": \"multipart/form-data\",\n  }\n\n  /**\n   * @description Uploads at least one file to the specific fileservice that is installed in Medusa.\n   * @param file File or array of files to upload.\n   * @returns Uploaded file or files.\n   */\n  create(file: AdminCreateUploadPayload): ResponsePromise<AdminUploadsRes> {\n    const path = `/admin/uploads`\n\n    const payload = this._createPayload(file)\n\n    return this.client.request(\"POST\", path, payload, {}, this.headers)\n  }\n\n  /**\n   * @description Uploads at least one file with ACL or a non-public bucket to the specific fileservice that is installed in Medusa.\n   * @param file File or array of files to upload.\n   * @returns Uploaded file or files.\n   */\n  createProtected(\n    file: AdminCreateUploadPayload\n  ): ResponsePromise<AdminUploadsRes> {\n    const path = `/admin/uploads/protected`\n\n    const payload = this._createPayload(file)\n\n    return this.client.request(\"POST\", path, payload, {}, this.headers)\n  }\n\n  delete(\n    payload: AdminDeleteUploadsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDeleteUploadsRes> {\n    const path = `/admin/uploads`\n\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  getPresignedDownloadUrl(\n    payload: AdminPostUploadsDownloadUrlReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminUploadsDownloadUrlRes> {\n    const path = `/admin/uploads/download-url`\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  private _createPayload(file: AdminCreateUploadPayload) {\n    const payload = new FormData()\n\n    if (Array.isArray(file)) {\n      file.forEach((f) => payload.append(\"files\", f))\n    } else {\n      payload.append(\"files\", file)\n    }\n\n    return payload\n  }\n}\n\nexport default AdminUploadsResource\n", "import {\n  AdminDeleteUserRes,\n  AdminResetPasswordRequest,\n  AdminResetPasswordTokenRequest,\n  AdminUserRes,\n  AdminUsersListRes,\n} from \"@medusajs/medusa\"\nimport {\n  ResponsePromise,\n  AdminCreateUserPayload,\n  AdminUpdateUserPayload,\n} from \"../..\"\nimport BaseResource from \"../base\"\n\nclass AdminUsersResource extends BaseResource {\n  /**\n   * @description resets password by re-sending password token.\n   * @param payload payload for generating reset-password token.\n   * @param customHeaders\n   * @returns\n   */\n  sendResetPasswordToken(\n    payload: AdminResetPasswordTokenRequest,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<void> {\n    const path = `/admin/users/password-token`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description resets the users password given the correct token.\n   * @param payload reset password information.\n   * @param customHeaders\n   * @returns\n   */\n  resetPassword(\n    payload: AdminResetPasswordRequest,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminUserRes> {\n    const path = `admin/users/reset-password`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieves a given user\n   * @param id id of the user\n   * @param customHeaders\n   * @returns the user\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminUserRes> {\n    const path = `/admin/users/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description creates a user with the provided information\n   * @param payload user creation request body\n   * @param customHeaders\n   * @returns created user\n   */\n  create(\n    payload: AdminCreateUserPayload,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminUserRes> {\n    const path = `/admin/users`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description updates a given user\n   * @param id id of the user to update\n   * @param payload user update request body\n   * @param customHeaders\n   * @returns the updated user\n   */\n  update(\n    id: string,\n    payload: AdminUpdateUserPayload,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminUserRes> {\n    const path = `/admin/users/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * @description deletes a user\n   * @param id id of the user to be deleted\n   * @param customHeaders\n   * @returns delete response\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDeleteUserRes> {\n    const path = `/admin/users/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @description lists all users\n   * @returns a list of all users\n   */\n  list(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminUsersListRes> {\n    const path = `/admin/users`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminUsersResource\n", "import {\n  AdminGetVariantParams,\n  AdminGetVariantsParams,\n  AdminGetVariantsVariantInventoryRes,\n  AdminVariantsListRes,\n  AdminVariantsRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../..\"\nimport BaseResource from \"../base\"\n\nclass AdminVariantsResource extends BaseResource {\n  /**\n   * List product variants\n   * @param query Query to filter variants by\n   * @param customHeaders custom headers\n   * @returns A list of variants satisfying the criteria of the query\n   */\n  list(\n    query?: AdminGetVariantsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminVariantsListRes> {\n    let path = `/admin/variants`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/variants?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Get a product variant\n   * @param id Query to filter variants by\n   * @param customHeaders custom headers\n   * @returns A list of variants satisfying the criteria of the query\n   */\n  retrieve(\n    id: string,\n    query?: AdminGetVariantParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminVariantsRes> {\n    let path = `/admin/variants/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/variants?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   *\n   * @param variantId id of the variant to fetch inventory for\n   * @param customHeaders custom headers\n   * @returns\n   */\n  getInventory(\n    variantId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminGetVariantsVariantInventoryRes> {\n    const path = `/admin/variants/${variantId}/inventory`\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminVariantsResource\n", "import BaseResource from \"../base\"\nimport AdminAuthResource from \"./auth\"\nimport AdminBatchJobsResource from \"./batch-jobs\"\nimport AdminCollectionsResource from \"./collections\"\nimport AdminCurrenciesResource from \"./currencies\"\nimport AdminCustomerGroupsResource from \"./customer-groups\"\nimport AdminCustomersResource from \"./customers\"\nimport AdminDiscountsResource from \"./discounts\"\nimport AdminDraftOrdersResource from \"./draft-orders\"\nimport AdminGiftCardsResource from \"./gift-cards\"\nimport AdminInventoryItemsResource from \"./inventory-item\"\nimport AdminInvitesResource from \"./invites\"\nimport AdminNotesResource from \"./notes\"\nimport AdminNotificationsResource from \"./notifications\"\nimport AdminOrderEditsResource from \"./order-edits\"\nimport AdminOrdersResource from \"./orders\"\nimport AdminPaymentCollectionsResource from \"./payment-collections\"\nimport AdminPaymentsResource from \"./payments\"\nimport AdminPriceListResource from \"./price-lists\"\nimport AdminProductCategoriesResource from \"./product-categories\"\nimport AdminProductTagsResource from \"./product-tags\"\nimport AdminProductTypesResource from \"./product-types\"\nimport AdminProductsResource from \"./products\"\nimport AdminPublishableApiKeyResource from \"./publishable-api-keys\"\nimport AdminRegionsResource from \"./regions\"\nimport AdminReservationsResource from \"./reservations\"\nimport AdminReturnReasonsResource from \"./return-reasons\"\nimport AdminReturnsResource from \"./returns\"\nimport AdminSalesChannelsResource from \"./sales-channels\"\nimport AdminShippingOptionsResource from \"./shipping-options\"\nimport AdminShippingProfilesResource from \"./shipping-profiles\"\nimport AdminStockLocationsResource from \"./stock-locations\"\nimport AdminStoresResource from \"./store\"\nimport AdminSwapsResource from \"./swaps\"\nimport AdminTaxRatesResource from \"./tax-rates\"\nimport AdminUploadsResource from \"./uploads\"\nimport AdminUsersResource from \"./users\"\nimport AdminVariantsResource from \"./variants\"\n\nclass Admin extends BaseResource {\n  public auth = new AdminAuthResource(this.client)\n  public batchJobs = new AdminBatchJobsResource(this.client)\n  public customers = new AdminCustomersResource(this.client)\n  public customerGroups = new AdminCustomerGroupsResource(this.client)\n  public discounts = new AdminDiscountsResource(this.client)\n  public currencies = new AdminCurrenciesResource(this.client)\n  public collections = new AdminCollectionsResource(this.client)\n  public draftOrders = new AdminDraftOrdersResource(this.client)\n  public giftCards = new AdminGiftCardsResource(this.client)\n  public invites = new AdminInvitesResource(this.client)\n  public inventoryItems = new AdminInventoryItemsResource(this.client)\n  public notes = new AdminNotesResource(this.client)\n  public priceLists = new AdminPriceListResource(this.client)\n  public products = new AdminProductsResource(this.client)\n  public productTags = new AdminProductTagsResource(this.client)\n  public productTypes = new AdminProductTypesResource(this.client)\n  public users = new AdminUsersResource(this.client)\n  public returns = new AdminReturnsResource(this.client)\n  public orders = new AdminOrdersResource(this.client)\n  public orderEdits = new AdminOrderEditsResource(this.client)\n  public publishableApiKeys = new AdminPublishableApiKeyResource(this.client)\n  public returnReasons = new AdminReturnReasonsResource(this.client)\n  public variants = new AdminVariantsResource(this.client)\n  public salesChannels = new AdminSalesChannelsResource(this.client)\n  public swaps = new AdminSwapsResource(this.client)\n  public shippingProfiles = new AdminShippingProfilesResource(this.client)\n  public stockLocations = new AdminStockLocationsResource(this.client)\n  public store = new AdminStoresResource(this.client)\n  public shippingOptions = new AdminShippingOptionsResource(this.client)\n  public regions = new AdminRegionsResource(this.client)\n  public reservations = new AdminReservationsResource(this.client)\n  public notifications = new AdminNotificationsResource(this.client)\n  public taxRates = new AdminTaxRatesResource(this.client)\n  public uploads = new AdminUploadsResource(this.client)\n  public paymentCollections = new AdminPaymentCollectionsResource(this.client)\n  public payments = new AdminPaymentsResource(this.client)\n  public productCategories = new AdminProductCategoriesResource(this.client)\n}\n\nexport {\n  Admin,\n  AdminAuthResource,\n  AdminBatchJobsResource,\n  AdminCollectionsResource,\n  AdminCurrenciesResource,\n  AdminCustomerGroupsResource,\n  AdminCustomersResource,\n  AdminDiscountsResource,\n  AdminDraftOrdersResource,\n  AdminGiftCardsResource,\n  AdminInvitesResource,\n  AdminNotesResource,\n  AdminNotificationsResource,\n  AdminOrdersResource,\n  AdminOrderEditsResource,\n  AdminPriceListResource,\n  AdminProductTagsResource,\n  AdminProductTypesResource,\n  AdminProductsResource,\n  AdminPublishableApiKeyResource,\n  AdminRegionsResource,\n  AdminReturnReasonsResource,\n  AdminReturnsResource,\n  AdminSalesChannelsResource,\n  AdminShippingOptionsResource,\n  AdminShippingProfilesResource,\n  AdminStockLocationsResource,\n  AdminStoresResource,\n  AdminSwapsResource,\n  AdminTaxRatesResource,\n  AdminUploadsResource,\n  AdminUsersResource,\n  AdminVariantsResource,\n  AdminPaymentCollectionsResource,\n  AdminPaymentsResource,\n  AdminProductCategoriesResource,\n}\n", "import MedusaError from \"./error\"\nimport KeyManager from \"./key-manager\"\nimport Client, { Config } from \"./request\"\nimport {\n  Admin,\n  AuthResource,\n  CartsResource,\n  CollectionsResource,\n  CustomersResource,\n  GiftCardsResource,\n  OrderEditsResource,\n  OrdersResource,\n  PaymentCollectionsResource,\n  PaymentMethodsResource,\n  ProductCategoriesResource,\n  ProductsResource,\n  ProductTagsResource,\n  ProductTypesResource,\n  RegionsResource,\n  ReturnReasonsResource,\n  ReturnsResource,\n  ShippingOptionsResource,\n  SwapsResource,\n} from \"./resources\"\n\nclass Medusa {\n  public client: Client\n  public admin: Admin\n\n  public auth: AuthResource\n  public carts: CartsResource\n  public customers: CustomersResource\n  public errors: MedusaError\n  public orders: OrdersResource\n  public orderEdits: OrderEditsResource\n  public products: ProductsResource\n  public productTypes: ProductTypesResource\n  public regions: RegionsResource\n  public returnReasons: ReturnReasonsResource\n  public returns: ReturnsResource\n  public shippingOptions: ShippingOptionsResource\n  public swaps: SwapsResource\n  public collections: CollectionsResource\n  public giftCards: GiftCardsResource\n  public paymentMethods: PaymentMethodsResource\n  public paymentCollections: PaymentCollectionsResource\n  public productTags: ProductTagsResource\n  public productCategories: ProductCategoriesResource\n\n  constructor(config: Config) {\n    this.client = new Client(config)\n\n    this.admin = new Admin(this.client)\n\n    this.auth = new AuthResource(this.client)\n    this.carts = new CartsResource(this.client)\n    this.customers = new CustomersResource(this.client)\n    this.errors = new MedusaError()\n    this.orders = new OrdersResource(this.client)\n    this.orderEdits = new OrderEditsResource(this.client)\n    this.products = new ProductsResource(this.client)\n    this.productTypes = new ProductTypesResource(this.client)\n    this.regions = new RegionsResource(this.client)\n    this.returnReasons = new ReturnReasonsResource(this.client)\n    this.returns = new ReturnsResource(this.client)\n    this.shippingOptions = new ShippingOptionsResource(this.client)\n    this.swaps = new SwapsResource(this.client)\n    this.collections = new CollectionsResource(this.client)\n    this.giftCards = new GiftCardsResource(this.client)\n    this.paymentMethods = new PaymentMethodsResource(this.client)\n    this.paymentCollections = new PaymentCollectionsResource(this.client)\n    this.productTags = new ProductTagsResource(this.client)\n    this.productCategories = new ProductCategoriesResource(this.client)\n  }\n\n  /**\n   * Set a PublishableApiKey that will be sent with each request\n   * to define the scope of available resources.\n   *\n   * @param key - PublishableApiKey identifier\n   */\n  setPublishableKey(key: string) {\n    KeyManager.registerPublishableApiKey(key)\n  }\n}\n\nexport default Medusa\nexport { default as MedusaError } from \"./error\"\nexport { default as KeyManager } from \"./key-manager\"\nexport { Config, default as Client } from \"./request\"\nexport * from \"./resources\"\nexport * from \"./typings\"\n", "import axios, {\n  AxiosError,\n  AxiosInstance,\n  AxiosRequestConfig,\n  AxiosResponse,\n} from 'axios';\n\n/**\n * Configuration for the Axios `request` method.\n */\nexport interface RetryConfig {\n  /**\n   * The number of times to retry the request.  Defaults to 3.\n   */\n  retry?: number;\n\n  /**\n   * The number of retries already attempted.\n   */\n  currentRetryAttempt?: number;\n\n  /**\n   * The amount of time to initially delay the retry.  Defaults to 100.\n   */\n  retryDelay?: number;\n\n  /**\n   * The instance of the axios object to which the interceptor is attached.\n   */\n  instance?: AxiosInstance;\n\n  /**\n   * The HTTP Methods that will be automatically retried.\n   * Defaults to ['GET','PUT','HEAD','OPTIONS','DELETE']\n   */\n  httpMethodsToRetry?: string[];\n\n  /**\n   * The HTTP response status codes that will automatically be retried.\n   * Defaults to: [[100, 199], [429, 429], [500, 599]]\n   */\n  statusCodesToRetry?: number[][];\n\n  /**\n   * Function to invoke when a retry attempt is made.\n   */\n  onRetryAttempt?: (err: AxiosError) => void;\n\n  /**\n   * Function to invoke which determines if you should retry\n   */\n  shouldRetry?: (err: AxiosError) => boolean;\n\n  /**\n   * When there is no response, the number of retries to attempt. Defaults to 2.\n   */\n  noResponseRetries?: number;\n\n  /**\n   * Backoff Type; 'linear', 'static' or 'exponential'.\n   */\n  backoffType?: 'linear' | 'static' | 'exponential';\n\n  /**\n   * Whether to check for 'Retry-After' header in response and use value as delay. Defaults to true.\n   */\n  checkRetryAfter?: boolean;\n\n  /**\n   * Max permitted Retry-After value (in ms) - rejects if greater. Defaults to 5 mins.\n   */\n  maxRetryAfter?: number;\n\n  /**\n   * Ceiling for calculated delay (in ms) - delay will not exceed this value.\n   */\n  maxRetryDelay?: number;\n}\n\nexport type RaxConfig = {\n  raxConfig: RetryConfig;\n} & AxiosRequestConfig;\n\n/**\n * Attach the interceptor to the Axios instance.\n * @param instance The optional Axios instance on which to attach the\n * interceptor.\n * @returns The id of the interceptor attached to the axios instance.\n */\nexport function attach(instance?: AxiosInstance) {\n  instance = instance || axios;\n  return instance.interceptors.response.use(onFulfilled, onError);\n}\n\n/**\n * Eject the Axios interceptor that is providing retry capabilities.\n * @param interceptorId The interceptorId provided in the config.\n * @param instance The axios instance using this interceptor.\n */\nexport function detach(interceptorId: number, instance?: AxiosInstance) {\n  instance = instance || axios;\n  instance.interceptors.response.eject(interceptorId);\n}\n\nfunction onFulfilled(res: AxiosResponse) {\n  return res;\n}\n\n/**\n * Some versions of axios are converting arrays into objects during retries.\n * This will attempt to convert an object with the following structure into\n * an array, where the keys correspond to the indices:\n * {\n *   0: {\n *     // some property\n *   },\n *   1: {\n *     // another\n *   }\n * }\n * @param obj The object that (may) have integers that correspond to an index\n * @returns An array with the pucked values\n */\nfunction normalizeArray<T>(obj?: T[]): T[] | undefined {\n  const arr: T[] = [];\n  if (!obj) {\n    return undefined;\n  }\n  if (Array.isArray(obj)) {\n    return obj;\n  }\n  if (typeof obj === 'object') {\n    Object.keys(obj).forEach(key => {\n      if (typeof key === 'number') {\n        arr[key] = obj[key];\n      }\n    });\n  }\n  return arr;\n}\n\n/**\n * Parse the Retry-After header.\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n * @param header Retry-After header value\n * @returns Number of milliseconds, or undefined if invalid\n */\nfunction parseRetryAfter(header: string): number | undefined {\n  // Header value may be string containing integer seconds\n  const value = Number(header);\n  if (!Number.isNaN(value)) {\n    return value * 1000;\n  }\n  // Or HTTP date time string\n  const dateTime = Date.parse(header);\n  if (!Number.isNaN(dateTime)) {\n    return dateTime - Date.now();\n  }\n  return undefined;\n}\n\nfunction onError(err: AxiosError) {\n  if (axios.isCancel(err)) {\n    return Promise.reject(err);\n  }\n\n  const config = getConfig(err) || {};\n  config.currentRetryAttempt = config.currentRetryAttempt || 0;\n  config.retry = typeof config.retry === 'number' ? config.retry : 3;\n  config.retryDelay =\n    typeof config.retryDelay === 'number' ? config.retryDelay : 100;\n  config.instance = config.instance || axios;\n  config.backoffType = config.backoffType || 'exponential';\n  config.httpMethodsToRetry = normalizeArray(config.httpMethodsToRetry) || [\n    'GET',\n    'HEAD',\n    'PUT',\n    'OPTIONS',\n    'DELETE',\n  ];\n  config.noResponseRetries =\n    typeof config.noResponseRetries === 'number' ? config.noResponseRetries : 2;\n  config.checkRetryAfter =\n    typeof config.checkRetryAfter === 'boolean' ? config.checkRetryAfter : true;\n  config.maxRetryAfter =\n    typeof config.maxRetryAfter === 'number' ? config.maxRetryAfter : 60000 * 5;\n\n  // If this wasn't in the list of status codes where we want\n  // to automatically retry, return.\n  const retryRanges = [\n    // https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n    // 1xx - Retry (Informational, request still processing)\n    // 2xx - Do not retry (Success)\n    // 3xx - Do not retry (Redirect)\n    // 4xx - Do not retry (Client errors)\n    // 429 - Retry (\"Too Many Requests\")\n    // 5xx - Retry (Server errors)\n    [100, 199],\n    [429, 429],\n    [500, 599],\n  ];\n  config.statusCodesToRetry =\n    normalizeArray(config.statusCodesToRetry) || retryRanges;\n\n  // Put the config back into the err\n  err.config = err.config || {}; // allow for wider range of errors\n  (err.config as RaxConfig).raxConfig = {...config};\n\n  // Determine if we should retry the request\n  const shouldRetryFn = config.shouldRetry || shouldRetryRequest;\n  if (!shouldRetryFn(err)) {\n    return Promise.reject(err);\n  }\n\n  // Create a promise that invokes the retry after the backOffDelay\n  const onBackoffPromise = new Promise((resolve, reject) => {\n    let delay = 0;\n    // If enabled, check for 'Retry-After' header in response to use as delay\n    if (\n      config.checkRetryAfter &&\n      err.response &&\n      err.response.headers['retry-after']\n    ) {\n      const retryAfter = parseRetryAfter(err.response.headers['retry-after']);\n      if (retryAfter && retryAfter > 0 && retryAfter <= config.maxRetryAfter!) {\n        delay = retryAfter;\n      } else {\n        return reject(err);\n      }\n    }\n\n    // Now it's certain that a retry is supposed to happen. Incremenent the\n    // counter, critical for linear and exp backoff delay calc. Note that\n    // `config.currentRetryAttempt` is local to this function whereas\n    // `(err.config as RaxConfig).raxConfig` is state that is tranferred across\n    // retries. That is, we want to mutate `(err.config as\n    // RaxConfig).raxConfig`. Another important note is about the definition of\n    // `currentRetryAttempt`: When we are here becasue the first and actual\n    // HTTP request attempt failed then `currentRetryAttempt` is still zero. We\n    // have found that a retry is indeed required. Since that is (will be)\n    // indeed the first retry it makes sense to now increase\n    // `currentRetryAttempt` by 1. So that it is in fact 1 for the first retry\n    // (as opposed to 0 or 2); an intuitive convention to use for the math\n    // below.\n    (err.config as RaxConfig).raxConfig!.currentRetryAttempt! += 1;\n\n    // store with shorter and more expressive variable name.\n    const retrycount = (err.config as RaxConfig).raxConfig!\n      .currentRetryAttempt!;\n\n    // Calculate delay according to chosen strategy\n    // Default to exponential backoff - formula: ((2^c - 1) / 2) * 1000\n    if (delay === 0) {\n      // was not set by Retry-After logic\n      if (config.backoffType === 'linear') {\n        // The delay between the first (actual) attempt and the first retry\n        // should be non-zero. Rely on the convention that `retrycount` is\n        // equal to 1 for the first retry when we are in here (was once 0,\n        // which was a bug -- see #122).\n        delay = retrycount * 1000;\n      } else if (config.backoffType === 'static') {\n        delay = config.retryDelay!;\n      } else {\n        delay = ((Math.pow(2, retrycount) - 1) / 2) * 1000;\n      }\n      if (typeof config.maxRetryDelay === 'number') {\n        delay = Math.min(delay, config.maxRetryDelay);\n      }\n    }\n    setTimeout(resolve, delay);\n  });\n\n  // Notify the user if they added an `onRetryAttempt` handler\n  const onRetryAttemptPromise = config.onRetryAttempt\n    ? Promise.resolve(config.onRetryAttempt(err))\n    : Promise.resolve();\n\n  // Return the promise in which recalls axios to retry the request\n  return Promise.resolve()\n    .then(() => onBackoffPromise)\n    .then(() => onRetryAttemptPromise)\n    .then(() => config.instance!.request(err.config));\n}\n\n/**\n * Determine based on config if we should retry the request.\n * @param err The AxiosError passed to the interceptor.\n */\nexport function shouldRetryRequest(err: AxiosError) {\n  const config = (err.config as RaxConfig).raxConfig;\n\n  // If there's no config, or retries are disabled, return.\n  if (!config || config.retry === 0) {\n    return false;\n  }\n\n  // Check if this error has no response (ETIMEDOUT, ENOTFOUND, etc)\n  if (\n    !err.response &&\n    (config.currentRetryAttempt || 0) >= config.noResponseRetries!\n  ) {\n    return false;\n  }\n\n  // Only retry with configured HttpMethods.\n  if (\n    !err.config.method ||\n    config.httpMethodsToRetry!.indexOf(err.config.method.toUpperCase()) < 0\n  ) {\n    return false;\n  }\n\n  // If this wasn't in the list of status codes where we want\n  // to automatically retry, return.\n  if (err.response && err.response.status) {\n    let isInRange = false;\n    for (const [min, max] of config.statusCodesToRetry!) {\n      const status = err.response.status;\n      if (status >= min && status <= max) {\n        isInRange = true;\n        break;\n      }\n    }\n    if (!isInRange) {\n      return false;\n    }\n  }\n\n  // If we are out of retry attempts, return\n  config.currentRetryAttempt = config.currentRetryAttempt || 0;\n  if (config.currentRetryAttempt >= config.retry!) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Acquire the raxConfig object from an AxiosError if available.\n * @param err The Axios error with a config object.\n */\nexport function getConfig(err: AxiosError) {\n  if (err && err.config) {\n    return (err.config as RaxConfig).raxConfig;\n  }\n  return;\n}\n\n// Include this so `config.raxConfig` works easily.\n// See https://github.com/JustinBeckwith/retry-axios/issues/64.\ndeclare module 'axios' {\n  export interface AxiosRequestConfig {\n    raxConfig?: RetryConfig;\n  }\n}\n", "import Medusa from \"@medusajs/medusa-js\"\nimport {\n  QueryClientProvider,\n  QueryClientProviderProps,\n} from \"@tanstack/react-query\"\nimport React from \"react\"\n\ninterface MedusaContextState {\n  client: Medusa\n}\n\nconst MedusaContext = React.createContext<MedusaContextState | null>(null)\n\nexport const useMedusa = () => {\n  const context = React.useContext(MedusaContext)\n  if (!context) {\n    throw new Error(\"useMedusa must be used within a MedusaProvider\")\n  }\n  return context\n}\n\ninterface MedusaProviderProps {\n  baseUrl: string\n  queryClientProviderProps: QueryClientProviderProps\n  children: React.ReactNode\n  /**\n   * Authentication token\n   */\n  apiKey?: string\n  /**\n   * PublishableApiKey identifier that defines the scope of resources\n   * available within the request\n   */\n  publishableApiKey?: string\n}\n\nexport const MedusaProvider = ({\n  queryClientProviderProps,\n  baseUrl,\n  apiKey,\n  publishableApiKey,\n  children,\n}: MedusaProviderProps) => {\n  const medusaClient = new Medusa({\n    baseUrl,\n    maxRetries: 0,\n    apiKey,\n    publishableApiKey,\n  })\n  return (\n    <QueryClientProvider {...queryClientProviderProps}>\n      <MedusaContext.Provider\n        value={{\n          client: medusaClient,\n        }}\n      >\n        {children}\n      </MedusaContext.Provider>\n    </QueryClientProvider>\n  )\n}\n", "import React, { useContext, useEffect } from \"react\"\nimport { getVariantPrice } from \"../helpers\"\nimport { useLocalStorage } from \"../hooks/utils\"\nimport { ProductVariant, RegionInfo } from \"../types\"\nimport { isArray, isEmpty, isObject } from \"../utils\"\n\ninterface Item {\n  variant: ProductVariant\n  quantity: number\n  readonly total?: number\n}\n\nexport interface SessionCartState {\n  region: RegionInfo\n  items: Item[]\n  totalItems: number\n  total: number\n}\n\ninterface SessionCartContextState extends SessionCartState {\n  setRegion: (region: RegionInfo) => void\n  addItem: (item: Item) => void\n  removeItem: (id: string) => void\n  updateItem: (id: string, item: Partial<Item>) => void\n  setItems: (items: Item[]) => void\n  updateItemQuantity: (id: string, quantity: number) => void\n  incrementItemQuantity: (id: string) => void\n  decrementItemQuantity: (id: string) => void\n  getItem: (id: string) => Item | undefined\n  clearItems: () => void\n}\n\nconst SessionCartContext = React.createContext<SessionCartContextState | null>(\n  null\n)\n\nenum ACTION_TYPES {\n  INIT,\n  ADD_ITEM,\n  SET_ITEMS,\n  REMOVE_ITEM,\n  UPDATE_ITEM,\n  CLEAR_ITEMS,\n  SET_REGION,\n}\n\ntype Action =\n  | { type: ACTION_TYPES.SET_REGION; payload: RegionInfo }\n  | { type: ACTION_TYPES.INIT; payload: object }\n  | { type: ACTION_TYPES.ADD_ITEM; payload: Item }\n  | {\n      type: ACTION_TYPES.UPDATE_ITEM\n      payload: { id: string; item: Partial<Item> }\n    }\n  | { type: ACTION_TYPES.REMOVE_ITEM; payload: { id: string } }\n  | { type: ACTION_TYPES.SET_ITEMS; payload: Item[] }\n  | { type: ACTION_TYPES.CLEAR_ITEMS }\n\nconst reducer = (state: SessionCartState, action: Action) => {\n  switch (action.type) {\n    case ACTION_TYPES.INIT: {\n      return state\n    }\n    case ACTION_TYPES.SET_REGION: {\n      return generateCartState(\n        {\n          ...state,\n          region: action.payload,\n        },\n        state.items\n      )\n    }\n    case ACTION_TYPES.ADD_ITEM: {\n      const duplicateVariantIndex = state.items.findIndex(\n        (item) => item.variant.id === action.payload?.variant?.id\n      )\n      if (duplicateVariantIndex !== -1) {\n        state.items.splice(duplicateVariantIndex, 1)\n      }\n      const items = [...state.items, action.payload]\n      return generateCartState(state, items)\n    }\n    case ACTION_TYPES.UPDATE_ITEM: {\n      const items = state.items.map((item) =>\n        item.variant.id === action.payload.id\n          ? { ...item, ...action.payload.item }\n          : item\n      )\n\n      return generateCartState(state, items)\n    }\n    case ACTION_TYPES.REMOVE_ITEM: {\n      const items = state.items.filter(\n        (item) => item.variant.id !== action.payload.id\n      )\n      return generateCartState(state, items)\n    }\n    case ACTION_TYPES.SET_ITEMS: {\n      return generateCartState(state, action.payload)\n    }\n    case ACTION_TYPES.CLEAR_ITEMS: {\n      return {\n        ...state,\n        items: [],\n        total: 0,\n        totalItems: 0,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nexport const generateCartState = (state: SessionCartState, items: Item[]) => {\n  const newItems = generateItems(state.region, items)\n  return {\n    ...state,\n    items: newItems,\n    totalItems: items.reduce((sum, item) => sum + item.quantity, 0),\n    total: calculateSessionCartTotal(newItems),\n  }\n}\n\nconst generateItems = (region: RegionInfo, items: Item[]) => {\n  return items.map((item) => ({\n    ...item,\n    total: getVariantPrice(item.variant, region),\n  }))\n}\n\nconst calculateSessionCartTotal = (items: Item[]) => {\n  return items.reduce(\n    (total, item) => total + item.quantity * (item.total || 0),\n    0\n  )\n}\n\ninterface SessionCartProviderProps {\n  children: React.ReactNode\n  initialState?: SessionCartState\n}\n\nconst defaultInitialState: SessionCartState = {\n  region: {} as RegionInfo,\n  items: [],\n  total: 0,\n  totalItems: 0,\n}\n\nexport const SessionCartProvider = ({\n  initialState = defaultInitialState,\n  children,\n}: SessionCartProviderProps) => {\n  const [saved, save] = useLocalStorage(\n    \"medusa-session-cart\",\n    JSON.stringify(initialState)\n  )\n\n  const [state, dispatch] = React.useReducer(reducer, JSON.parse(saved))\n\n  useEffect(() => {\n    save(JSON.stringify(state))\n  }, [state, save])\n\n  const setRegion = (region: RegionInfo) => {\n    if (!isObject(region) || isEmpty(region)) {\n      throw new Error(\"region must be a non-empty object\")\n    }\n\n    dispatch({ type: ACTION_TYPES.SET_REGION, payload: region })\n  }\n\n  const getItem = (id: string) => {\n    return state.items.find((item) => item.variant.id === id)\n  }\n\n  const setItems = (items: Item[]) => {\n    if (!isArray(items)) {\n      throw new Error(\"items must be an array of items\")\n    }\n\n    dispatch({ type: ACTION_TYPES.SET_ITEMS, payload: items })\n  }\n\n  const addItem = (item: Item) => {\n    if (!isObject(item) || isEmpty(item)) {\n      throw new Error(\"item must be a non-empty object\")\n    }\n\n    dispatch({ type: ACTION_TYPES.ADD_ITEM, payload: item })\n  }\n\n  const updateItem = (id: string, item: Partial<Item>) => {\n    dispatch({ type: ACTION_TYPES.UPDATE_ITEM, payload: { id, item } })\n  }\n\n  const updateItemQuantity = (id: string, quantity: number) => {\n    const item = getItem(id)\n    if (!item) return\n\n    quantity = quantity <= 0 ? 1 : quantity\n\n    dispatch({\n      type: ACTION_TYPES.UPDATE_ITEM,\n      payload: {\n        id,\n        item: {\n          ...item,\n          quantity: Math.min(item.variant.inventory_quantity, quantity),\n        },\n      },\n    })\n  }\n\n  const incrementItemQuantity = (id: string) => {\n    const item = getItem(id)\n    if (!item) return\n\n    dispatch({\n      type: ACTION_TYPES.UPDATE_ITEM,\n      payload: {\n        id,\n        item: {\n          ...item,\n          quantity: Math.min(\n            item.variant.inventory_quantity,\n            item.quantity + 1\n          ),\n        },\n      },\n    })\n  }\n\n  const decrementItemQuantity = (id: string) => {\n    const item = getItem(id)\n    if (!item) return\n\n    dispatch({\n      type: ACTION_TYPES.UPDATE_ITEM,\n      payload: {\n        id,\n        item: { ...item, quantity: Math.max(0, item.quantity - 1) },\n      },\n    })\n  }\n\n  const removeItem = (id: string) => {\n    dispatch({\n      type: ACTION_TYPES.REMOVE_ITEM,\n      payload: { id },\n    })\n  }\n\n  const clearItems = () => {\n    dispatch({\n      type: ACTION_TYPES.CLEAR_ITEMS,\n    })\n  }\n\n  return (\n    <SessionCartContext.Provider\n      value={{\n        ...state,\n        setRegion,\n        addItem,\n        updateItem,\n        updateItemQuantity,\n        incrementItemQuantity,\n        decrementItemQuantity,\n        removeItem,\n        getItem,\n        setItems,\n        clearItems,\n      }}\n    >\n      {children}\n    </SessionCartContext.Provider>\n  )\n}\n\nexport const useSessionCart = () => {\n  const context = useContext(SessionCartContext)\n  if (!context) {\n    throw new Error(\n      \"useSessionCart should be used as a child of SessionCartProvider\"\n    )\n  }\n  return context\n}\n", "export const isObject = (input: any) => input instanceof Object\nexport const isArray = (input: any) => Array.isArray(input)\nexport const isEmpty = (input: any) => {\n  return (\n    input === null ||\n    input === undefined ||\n    (isObject(input) && Object.keys(input).length === 0) ||\n    (isArray(input) && (input as any[]).length === 0) ||\n    (typeof input === \"string\" && input.trim().length === 0)\n  )\n}\n", "import { ProductVariantInfo, RegionInfo } from \"../types\"\nimport { isEmpty } from \"../utils\"\n\ntype FormatVariantPriceParams = {\n  variant: ProductVariantInfo\n  region: RegionInfo\n  includeTaxes?: boolean\n  minimumFractionDigits?: number\n  maximumFractionDigits?: number\n  locale?: string\n}\n\n/**\n * Takes a product variant and a region, and converts the variant's price to a localized decimal format\n */\nexport const formatVariantPrice = ({\n  variant,\n  region,\n  includeTaxes = true,\n  ...rest\n}: FormatVariantPriceParams) => {\n  const amount = computeVariantPrice({ variant, region, includeTaxes })\n\n  return convertToLocale({\n    amount,\n    currency_code: region?.currency_code,\n    ...rest,\n  })\n}\n\ntype ComputeVariantPriceParams = {\n  variant: ProductVariantInfo\n  region: RegionInfo\n  includeTaxes?: boolean\n}\n\n/**\n * Takes a product variant and region, and returns the variant price as a decimal number\n * @param params.variant - product variant\n * @param params.region - region\n * @param params.includeTaxes - whether to include taxes or not\n */\nexport const computeVariantPrice = ({\n  variant,\n  region,\n  includeTaxes = true,\n}: ComputeVariantPriceParams) => {\n  const amount = getVariantPrice(variant, region)\n\n  return computeAmount({\n    amount,\n    region,\n    includeTaxes,\n  })\n}\n\n/**\n * Finds the price amount correspoding to the region selected\n * @param variant - the product variant\n * @param region - the region\n * @returns - the price's amount\n */\nexport const getVariantPrice = (\n  variant: ProductVariantInfo,\n  region: RegionInfo\n) => {\n  let price = variant?.prices?.find(\n    (p) =>\n      p.currency_code.toLowerCase() === region?.currency_code?.toLowerCase()\n  )\n\n  return price?.amount || 0\n}\n\ntype ComputeAmountParams = {\n  amount: number\n  region: RegionInfo\n  includeTaxes?: boolean\n}\n\n/**\n * Takes an amount, a region, and returns the amount as a decimal including or excluding taxes\n */\nexport const computeAmount = ({\n  amount,\n  region,\n  includeTaxes = true,\n}: ComputeAmountParams) => {\n  const toDecimal = convertToDecimal(amount, region)\n\n  const taxRate = includeTaxes ? getTaxRate(region) : 0\n\n  const amountWithTaxes = toDecimal * (1 + taxRate)\n\n  return amountWithTaxes\n}\n\ntype FormatAmountParams = {\n  amount: number\n  region: RegionInfo\n  includeTaxes?: boolean\n  minimumFractionDigits?: number\n  maximumFractionDigits?: number\n  locale?: string\n}\n\n/**\n * Takes an amount and a region, and converts the amount to a localized decimal format\n */\nexport const formatAmount = ({\n  amount,\n  region,\n  includeTaxes = true,\n  ...rest\n}: FormatAmountParams) => {\n  const taxAwareAmount = computeAmount({\n    amount,\n    region,\n    includeTaxes,\n  })\n  return convertToLocale({\n    amount: taxAwareAmount,\n    currency_code: region.currency_code,\n    ...rest,\n  })\n}\n\n// we should probably add a more extensive list\nconst noDivisionCurrencies = [\"krw\", \"jpy\", \"vnd\"]\n\nconst convertToDecimal = (amount: number, region: RegionInfo) => {\n  const divisor = noDivisionCurrencies.includes(\n    region?.currency_code?.toLowerCase()\n  )\n    ? 1\n    : 100\n\n  return Math.floor(amount) / divisor\n}\n\nconst getTaxRate = (region?: RegionInfo) => {\n  return region && !isEmpty(region) ? region?.tax_rate / 100 : 0\n}\n\nconst convertToLocale = ({\n  amount,\n  currency_code,\n  minimumFractionDigits,\n  maximumFractionDigits,\n  locale = \"en-US\",\n}: ConvertToLocaleParams) => {\n  return currency_code && !isEmpty(currency_code)\n    ? new Intl.NumberFormat(locale, {\n        style: \"currency\",\n        currency: currency_code,\n        minimumFractionDigits,\n        maximumFractionDigits,\n      }).format(amount)\n    : amount.toString()\n}\n\ntype ConvertToLocaleParams = {\n  amount: number\n  currency_code: string\n  minimumFractionDigits?: number\n  maximumFractionDigits?: number\n  locale?: string\n}\n", "import { TQueryKey } from \"../../types\"\n\nexport const queryKeysFactory = <\n  T,\n  TListQueryType = any,\n  TDetailQueryType = string\n>(\n  globalKey: T\n) => {\n  const queryKeyFactory: TQueryKey<T, TListQueryType, TDetailQueryType> = {\n    all: [globalKey],\n    lists: () => [...queryKeyFactory.all, \"list\"],\n    list: (query?: TListQueryType) => [...queryKeyFactory.lists(), { query }],\n    details: () => [...queryKeyFactory.all, \"detail\"],\n    detail: (id: TDetailQueryType) => [...queryKeyFactory.details(), id],\n  }\n  return queryKeyFactory\n}\n", "import * as React from \"react\"\n\nexport const useLocalStorage = (key: string, initialState: string) => {\n  const [item, setItem] = React.useState(() => {\n    try {\n      const item =\n        typeof window !== \"undefined\" && window.localStorage.getItem(key)\n\n      return item || initialState\n    } catch (err) {\n      return initialState\n    }\n  })\n\n  const save = (data: string) => {\n    setItem(data)\n\n    if (typeof window !== \"undefined\") {\n      window.localStorage.setItem(key, data)\n    }\n  }\n\n  const remove = () => {\n    if (typeof window !== \"undefined\") {\n      window.localStorage.removeItem(key)\n    }\n  }\n\n  return [item, save, remove] as const\n}\n", "import React, { useState } from \"react\"\nimport {\n  useAddShippingMethodToCart,\n  useCompleteCart,\n  useCreateCart,\n  useSetPaymentSession,\n  useUpdateCart,\n  useCreatePaymentSession,\n} from \"../hooks/store/\"\nimport { Cart } from \"../types\"\n\ninterface CartState {\n  cart?: Cart\n}\n\ninterface CartContext extends CartState {\n  setCart: (cart: Cart) => void\n  pay: ReturnType<typeof useSetPaymentSession>\n  createCart: ReturnType<typeof useCreateCart>\n  startCheckout: ReturnType<typeof useCreatePaymentSession>\n  completeCheckout: ReturnType<typeof useCompleteCart>\n  updateCart: ReturnType<typeof useUpdateCart>\n  addShippingMethod: ReturnType<typeof useAddShippingMethodToCart>\n  totalItems: number\n}\n\nconst CartContext = React.createContext<CartContext | null>(null)\n\nexport const useCart = () => {\n  const context = React.useContext(CartContext)\n  if (!context) {\n    throw new Error(\"useCart must be used within a CartProvider\")\n  }\n  return context\n}\n\ninterface CartProps {\n  children: React.ReactNode\n  initialState?: Cart\n}\n\nconst defaultInitialState = {\n  id: \"\",\n  items: [] as any,\n} as Cart\n\nexport const CartProvider = ({\n  children,\n  initialState = defaultInitialState,\n}: CartProps) => {\n  const [cart, setCart] = useState<Cart>(initialState)\n\n  const createCart = useCreateCart({\n    onSuccess: ({ cart }) => setCart(cart),\n  })\n\n  const updateCart = useUpdateCart(cart?.id, {\n    onSuccess: ({ cart }) => setCart(cart),\n  })\n\n  const addShippingMethod = useAddShippingMethodToCart(cart?.id, {\n    onSuccess: ({ cart }) => setCart(cart),\n  })\n\n  const startCheckout = useCreatePaymentSession(cart?.id, {\n    onSuccess: ({ cart }) => setCart(cart),\n  })\n\n  const pay = useSetPaymentSession(cart?.id, {\n    onSuccess: ({ cart }) => {\n      setCart(cart)\n    },\n  })\n\n  const completeCheckout = useCompleteCart(cart?.id)\n\n  const totalItems = cart?.items\n    .map(i => i.quantity)\n    .reduce((acc, curr) => acc + curr, 0)\n\n  return (\n    <CartContext.Provider\n      value={{\n        cart,\n        setCart,\n        createCart,\n        pay,\n        startCheckout,\n        completeCheckout,\n        updateCart,\n        addShippingMethod,\n        totalItems: totalItems || 0,\n      }}\n    >\n      {children}\n    </CartContext.Provider>\n  )\n}\n", "import { StoreCartsRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst CARTS_QUERY_KEY = `carts` as const\n\nexport const cartKeys = queryKeysFactory(CARTS_QUERY_KEY)\ntype CartQueryKey = typeof cartKeys\n\nexport const useGetCart = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreCartsRes>,\n    Error,\n    ReturnType<CartQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    cartKeys.detail(id),\n    () => client.carts.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  StoreCartsRes,\n  StoreCompleteCartRes,\n  StorePostCartReq,\n  StorePostCartsCartPaymentSessionReq,\n  StorePostCartsCartPaymentSessionUpdateReq,\n  StorePostCartsCartReq,\n  StorePostCartsCartShippingMethodReq,\n} from \"@medusajs/medusa\"\nimport { useMutation, UseMutationOptions } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\n\nexport const useCreateCart = (\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    StorePostCartReq | undefined\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data?: StorePostCartReq | undefined) => client.carts.create(data),\n    options\n  )\n}\n\nexport const useUpdateCart = (\n  cartId: string,\n  options?: UseMutationOptions<StoreCartsRes, Error, StorePostCartsCartReq>\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostCartsCartReq) => client.carts.update(cartId, data),\n    options\n  )\n}\n\nexport const useCompleteCart = (\n  cartId: string,\n  options?: UseMutationOptions<StoreCompleteCartRes, Error>\n) => {\n  const { client } = useMedusa()\n  return useMutation(() => client.carts.complete(cartId), options)\n}\n\nexport const useCreatePaymentSession = (\n  cartId: string,\n  options?: UseMutationOptions<StoreCartsRes, Error>\n) => {\n  const { client } = useMedusa()\n  return useMutation(() => client.carts.createPaymentSessions(cartId), options)\n}\n\nexport const useUpdatePaymentSession = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    { provider_id: string } & StorePostCartsCartPaymentSessionUpdateReq\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    ({ data, provider_id }) =>\n      client.carts.updatePaymentSession(cartId, provider_id, { data }),\n    options\n  )\n}\n\ntype RefreshPaymentSessionMutationData = {\n  provider_id: string\n}\n\nexport const useRefreshPaymentSession = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    RefreshPaymentSessionMutationData\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    ({ provider_id }: RefreshPaymentSessionMutationData) =>\n      client.carts.refreshPaymentSession(cartId, provider_id),\n    options\n  )\n}\n\ntype SetPaymentSessionMutationData = { provider_id: string }\n\nexport const useSetPaymentSession = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    SetPaymentSessionMutationData\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostCartsCartPaymentSessionReq) =>\n      client.carts.setPaymentSession(cartId, data),\n    options\n  )\n}\n\nexport const useAddShippingMethodToCart = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    StorePostCartsCartShippingMethodReq\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostCartsCartShippingMethodReq) =>\n      client.carts.addShippingMethod(cartId, data),\n    options\n  )\n}\n\ntype DeletePaymentSessionMutationData = {\n  provider_id: string\n}\n\nexport const useDeletePaymentSession = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    DeletePaymentSessionMutationData\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    ({ provider_id }: DeletePaymentSessionMutationData) =>\n      client.carts.deletePaymentSession(cartId, provider_id),\n    options\n  )\n}\n\nexport const useStartCheckout = (\n  options?: UseMutationOptions<StoreCartsRes[\"cart\"], Error, StorePostCartReq>\n) => {\n  const { client } = useMedusa()\n  const mutation = useMutation(async (data?: StorePostCartReq) => {\n    const { cart } = await client.carts.create(data)\n    const res = await client.carts.createPaymentSessions(cart.id)\n    return res.cart\n  }, options)\n\n  return mutation\n}\n", "import {\n  StoreCollectionsListRes,\n  StoreCollectionsRes,\n  StoreGetCollectionsParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst COLLECTIONS_QUERY_KEY = `collections` as const\n\nexport const collectionKeys = queryKeysFactory(COLLECTIONS_QUERY_KEY)\n\ntype CollectionQueryKey = typeof collectionKeys\n\nexport const useCollection = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreCollectionsRes>,\n    Error,\n    ReturnType<CollectionQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    collectionKeys.detail(id),\n    () => client.collections.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useCollections = (\n  query?: StoreGetCollectionsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreCollectionsListRes>,\n    Error,\n    ReturnType<CollectionQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    collectionKeys.list(query),\n    () => client.collections.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  StoreCustomersListOrdersRes,\n  StoreCustomersRes,\n  StoreGetCustomersCustomerOrdersParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst CUSTOMERS_QUERY_KEY = `customers` as const\n\nexport const customerKeys = {\n  ...queryKeysFactory(CUSTOMERS_QUERY_KEY),\n  orders: (id: string) => [...customerKeys.detail(id), \"orders\"] as const,\n}\n\ntype CustomerQueryKey = typeof customerKeys\n\nexport const useMeCustomer = (\n  options?: UseQueryOptionsWrapper<\n    Response<StoreCustomersRes>,\n    Error,\n    ReturnType<CustomerQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    customerKeys.detail(\"me\"),\n    () => client.customers.retrieve(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useCustomerOrders = (\n  query: StoreGetCustomersCustomerOrdersParams = { limit: 10, offset: 0 },\n  options?: UseQueryOptionsWrapper<\n    Response<StoreCustomersListOrdersRes>,\n    Error,\n    ReturnType<CustomerQueryKey[\"orders\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    customerKeys.orders(\"me\"),\n    () => client.customers.listOrders(query),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n", "import {\n  StoreCustomersRes,\n  StorePostCustomersCustomerReq,\n  StorePostCustomersReq,\n} from \"@medusajs/medusa\"\nimport { useMutation, UseMutationOptions } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\n\nexport const useCreateCustomer = (\n  options?: UseMutationOptions<StoreCustomersRes, Error, StorePostCustomersReq>\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostCustomersReq) => client.customers.create(data),\n    options\n  )\n}\n\nexport const useUpdateMe = (\n  options?: UseMutationOptions<\n    StoreCustomersRes,\n    Error,\n    { id: string } & StorePostCustomersCustomerReq\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    ({ id, ...data }: { id: string } & StorePostCustomersCustomerReq) =>\n      client.customers.update(data),\n    options\n  )\n}\n", "import { StoreGiftCardsRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst GIFT_CARDS_QUERY_KEY = `gift_cards` as const\n\nexport const giftCardKeys = queryKeysFactory(GIFT_CARDS_QUERY_KEY)\n\ntype GiftCardQueryKey = typeof giftCardKeys\n\nexport const useGiftCard = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreGiftCardsRes>,\n    Error,\n    ReturnType<GiftCardQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    giftCardKeys.detail(id),\n    () => client.giftCards.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  StoreCartsRes,\n  StorePostCartsCartLineItemsItemReq,\n  StorePostCartsCartLineItemsReq,\n} from \"@medusajs/medusa\"\nimport { useMutation, UseMutationOptions } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\n\nexport const useCreateLineItem = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    StorePostCartsCartLineItemsReq\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostCartsCartLineItemsReq) =>\n      client.carts.lineItems.create(cartId, data),\n    options\n  )\n}\n\nexport const useUpdateLineItem = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    StorePostCartsCartLineItemsItemReq & { lineId: string }\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    ({\n      lineId,\n      ...data\n    }: StorePostCartsCartLineItemsItemReq & { lineId: string }) =>\n      client.carts.lineItems.update(cartId, lineId, data),\n    options\n  )\n}\n\nexport const useDeleteLineItem = (\n  cartId: string,\n  options?: UseMutationOptions<StoreCartsRes, Error, { lineId: string }>\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    ({ lineId }: { lineId: string }) =>\n      client.carts.lineItems.delete(cartId, lineId),\n    options\n  )\n}\n", "import { StoreOrderEditsRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ORDER_EDITS_QUERY_KEY = `orderEdit` as const\n\nexport const orderEditQueryKeys = queryKeysFactory<\n  typeof ORDER_EDITS_QUERY_KEY\n>(ORDER_EDITS_QUERY_KEY)\n\ntype OrderQueryKey = typeof orderEditQueryKeys\n\nexport const useOrderEdit = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreOrderEditsRes>,\n    Error,\n    ReturnType<OrderQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    orderEditQueryKeys.detail(id),\n    () => client.orderEdits.retrieve(id),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n", "import { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nimport {\n  StoreOrderEditsRes,\n  StorePostOrderEditsOrderEditDecline,\n} from \"@medusajs/medusa\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { orderEditQueryKeys } from \"./queries\"\n\nexport const useDeclineOrderEdit = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<StoreOrderEditsRes>,\n    Error,\n    StorePostOrderEditsOrderEditDecline\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: StorePostOrderEditsOrderEditDecline) =>\n      client.orderEdits.decline(id, payload),\n    buildOptions(\n      queryClient,\n      [orderEditQueryKeys.lists(), orderEditQueryKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useCompleteOrderEdit = (\n  id: string,\n  options?: UseMutationOptions<Response<StoreOrderEditsRes>, Error>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.orderEdits.complete(id),\n    buildOptions(\n      queryClient,\n      [orderEditQueryKeys.lists(), orderEditQueryKeys.detail(id)],\n      options\n    )\n  )\n}\n", "import {\n  QueryClient,\n  QueryKey,\n  UseMutationOptions,\n} from \"@tanstack/react-query\"\n\nexport const buildOptions = <\n  TData,\n  TError,\n  TVariables,\n  TContext,\n  TKey extends QueryKey\n>(\n  queryClient: QueryClient,\n  queryKey?: TKey,\n  options?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationOptions<TData, TError, TVariables, TContext> => {\n  return {\n    ...options,\n    onSuccess: (...args) => {\n      if (options?.onSuccess) {\n        return options.onSuccess(...args)\n      }\n\n      if (queryKey !== undefined) {\n        queryKey.forEach((key) => {\n          queryClient.invalidateQueries({ queryKey: key as QueryKey })\n        })\n      }\n    },\n  }\n}\n", "import { StoreGetOrdersParams, StoreOrdersRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ORDERS_QUERY_KEY = `orders` as const\n\nexport const orderKeys = {\n  ...queryKeysFactory<typeof ORDERS_QUERY_KEY, StoreGetOrdersParams>(\n    ORDERS_QUERY_KEY\n  ),\n  cart: (cartId: string) => [...orderKeys.details(), \"cart\", cartId] as const,\n}\n\ntype OrderQueryKey = typeof orderKeys\n\nexport const useOrder = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreOrdersRes>,\n    Error,\n    ReturnType<OrderQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    orderKeys.detail(id),\n    () => client.orders.retrieve(id),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n\nexport const useCartOrder = (\n  cartId: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreOrdersRes>,\n    Error,\n    ReturnType<OrderQueryKey[\"cart\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    orderKeys.cart(cartId),\n    () => client.orders.retrieveByCartId(cartId),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n\nexport const useOrders = (\n  query: StoreGetOrdersParams,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreOrdersRes>,\n    Error,\n    ReturnType<OrderQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    orderKeys.list(query),\n    () => client.orders.lookupOrder(query),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n", "import { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nimport {\n  StorePostCustomersCustomerAcceptClaimReq,\n  StorePostCustomersCustomerOrderClaimReq,\n} from \"@medusajs/medusa\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { orderKeys } from \"./queries\"\n\nexport const useRequestOrderAccess = (\n  options?: UseMutationOptions<\n    Response<{}>,\n    Error,\n    StorePostCustomersCustomerOrderClaimReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: StorePostCustomersCustomerOrderClaimReq) =>\n      client.orders.requestCustomerOrders(payload),\n    buildOptions(queryClient, [orderKeys.all], options)\n  )\n}\nexport const useGrantOrderAccess = (\n  options?: UseMutationOptions<\n    Response<{}>,\n    Error,\n    StorePostCustomersCustomerAcceptClaimReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: StorePostCustomersCustomerAcceptClaimReq) =>\n      client.orders.confirmRequest(payload),\n    buildOptions(queryClient, [orderKeys.all], options)\n  )\n}\n", "import { StorePaymentCollectionsRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst PAYMENT_COLLECTION_QUERY_KEY = `paymentCollection` as const\n\nexport const paymentCollectionQueryKeys = queryKeysFactory<\n  typeof PAYMENT_COLLECTION_QUERY_KEY\n>(PAYMENT_COLLECTION_QUERY_KEY)\n\ntype PaymentCollectionKey = typeof paymentCollectionQueryKeys\n\nexport const usePaymentCollection = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StorePaymentCollectionsRes>,\n    Error,\n    ReturnType<PaymentCollectionKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    paymentCollectionQueryKeys.detail(id),\n    () => client.paymentCollections.retrieve(id),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n", "import { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nimport {\n  StorePaymentCollectionSessionsReq,\n  StorePaymentCollectionsRes,\n  StorePaymentCollectionsSessionRes,\n  StorePostPaymentCollectionsBatchSessionsAuthorizeReq,\n  StorePostPaymentCollectionsBatchSessionsReq,\n} from \"@medusajs/medusa\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { paymentCollectionQueryKeys } from \"./queries\"\n\nexport const useManageMultiplePaymentSessions = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<StorePaymentCollectionsRes>,\n    Error,\n    StorePostPaymentCollectionsBatchSessionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: StorePostPaymentCollectionsBatchSessionsReq) =>\n      client.paymentCollections.managePaymentSessionsBatch(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        paymentCollectionQueryKeys.lists(),\n        paymentCollectionQueryKeys.detail(id),\n      ],\n      options\n    )\n  )\n}\n\nexport const useManagePaymentSession = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<StorePaymentCollectionsRes>,\n    Error,\n    StorePaymentCollectionSessionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: StorePaymentCollectionSessionsReq) =>\n      client.paymentCollections.managePaymentSession(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        paymentCollectionQueryKeys.lists(),\n        paymentCollectionQueryKeys.detail(id),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAuthorizePaymentSession = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<StorePaymentCollectionsRes>,\n    Error,\n    string\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (session_id: string) =>\n      client.paymentCollections.authorizePaymentSession(id, session_id),\n    buildOptions(\n      queryClient,\n      [\n        paymentCollectionQueryKeys.lists(),\n        paymentCollectionQueryKeys.detail(id),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAuthorizePaymentSessionsBatch = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<StorePaymentCollectionsRes>,\n    Error,\n    StorePostPaymentCollectionsBatchSessionsAuthorizeReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload) =>\n      client.paymentCollections.authorizePaymentSessionsBatch(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        paymentCollectionQueryKeys.lists(),\n        paymentCollectionQueryKeys.detail(id),\n      ],\n      options\n    )\n  )\n}\n\nexport const usePaymentCollectionRefreshPaymentSession = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<StorePaymentCollectionsSessionRes>,\n    Error,\n    string\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (session_id: string) =>\n      client.paymentCollections.refreshPaymentSession(id, session_id),\n    buildOptions(\n      queryClient,\n      [\n        paymentCollectionQueryKeys.lists(),\n        paymentCollectionQueryKeys.detail(id),\n      ],\n      options\n    )\n  )\n}\n", "import {\n  StoreGetProductCategoriesParams,\n  StoreGetProductCategoriesRes,\n  StoreGetProductCategoriesCategoryParams,\n  StoreGetProductCategoriesCategoryRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst STORE_PRODUCT_CATEGORIES_QUERY_KEY = `product_categories` as const\nexport const storeProductCategoryKeys = queryKeysFactory(\n  STORE_PRODUCT_CATEGORIES_QUERY_KEY\n)\ntype ProductCategoryQueryKeys = typeof storeProductCategoryKeys\n\nexport const useProductCategories = (\n  query?: StoreGetProductCategoriesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreGetProductCategoriesRes>,\n    Error,\n    ReturnType<ProductCategoryQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    storeProductCategoryKeys.list(query),\n    () => client.productCategories.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useProductCategory = (\n  id: string,\n  query?: StoreGetProductCategoriesCategoryParams,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreGetProductCategoriesCategoryRes>,\n    Error,\n    ReturnType<ProductCategoryQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    storeProductCategoryKeys.detail(id),\n    () => client.productCategories.retrieve(id, query),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n", "import {\n  StoreGetProductTagsParams,\n  StoreProductTagsListRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst PRODUCT_TAGS_QUERY_KEY = `product_tags` as const\n\nexport const productTagKeys = queryKeysFactory(PRODUCT_TAGS_QUERY_KEY)\n\ntype ProductTypesQueryKeys = typeof productTagKeys\n\nexport const useProductTags = (\n  query?: StoreGetProductTagsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreProductTagsListRes>,\n    Error,\n    ReturnType<ProductTypesQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    productTagKeys.list(query),\n    () => client.productTags.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  StoreGetProductTypesParams,\n  StoreProductTypesListRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst PRODUCT_TYPES_QUERY_KEY = `product_types` as const\n\nexport const productTypeKeys = queryKeysFactory(PRODUCT_TYPES_QUERY_KEY)\n\ntype ProductTypesQueryKeys = typeof productTypeKeys\n\nexport const useProductTypes = (\n  query?: StoreGetProductTypesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreProductTypesListRes>,\n    Error,\n    ReturnType<ProductTypesQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    productTypeKeys.list(query),\n    () => client.productTypes.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  StoreGetProductsParams,\n  StoreProductsListRes,\n  StoreProductsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst PRODUCTS_QUERY_KEY = `products` as const\n\nexport const productKeys = queryKeysFactory<\n  typeof PRODUCTS_QUERY_KEY,\n  StoreGetProductsParams\n>(PRODUCTS_QUERY_KEY)\ntype ProductQueryKey = typeof productKeys\n\nexport const useProducts = (\n  query?: StoreGetProductsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreProductsListRes>,\n    Error,\n    ReturnType<ProductQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    productKeys.list(query),\n    () => client.products.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useProduct = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreProductsRes>,\n    Error,\n    ReturnType<ProductQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    productKeys.detail(id),\n    () => client.products.retrieve(id),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n", "import { StoreRegionsListRes, StoreRegionsRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst REGIONS_QUERY_KEY = `regions` as const\n\nconst regionsKey = queryKeysFactory(REGIONS_QUERY_KEY)\n\ntype RegionQueryType = typeof regionsKey\n\nexport const useRegions = (\n  options?: UseQueryOptionsWrapper<\n    Response<StoreRegionsListRes>,\n    Error,\n    ReturnType<RegionQueryType[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    regionsKey.lists(),\n    () => client.regions.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useRegion = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreRegionsRes>,\n    Error,\n    ReturnType<RegionQueryType[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    regionsKey.detail(id),\n    () => client.regions.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  StoreReturnReasonsListRes,\n  StoreReturnReasonsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst RETURNS_REASONS_QUERY_KEY = `return_reasons` as const\n\nconst returnReasonsKey = queryKeysFactory(RETURNS_REASONS_QUERY_KEY)\n\ntype ReturnReasonsQueryKey = typeof returnReasonsKey\n\nexport const useReturnReasons = (\n  options?: UseQueryOptionsWrapper<\n    Response<StoreReturnReasonsListRes>,\n    Error,\n    ReturnType<ReturnReasonsQueryKey[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    returnReasonsKey.lists(),\n    () => client.returnReasons.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useReturnReason = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreReturnReasonsRes>,\n    Error,\n    ReturnType<ReturnReasonsQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    returnReasonsKey.detail(id),\n    () => client.returnReasons.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import { StorePostReturnsReq, StoreReturnsRes } from \"@medusajs/medusa\"\nimport { useMutation, UseMutationOptions } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\n\nexport const useCreateReturn = (\n  options?: UseMutationOptions<StoreReturnsRes, Error, StorePostReturnsReq>\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostReturnsReq) => client.returns.create(data),\n    options\n  )\n}\n", "import {\n  StoreGetShippingOptionsParams,\n  StoreShippingOptionsListRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst SHIPPING_OPTION_QUERY_KEY = `shipping_options` as const\n\nconst shippingOptionKey = {\n  ...queryKeysFactory(SHIPPING_OPTION_QUERY_KEY),\n  cart: (cartId: string) => [...shippingOptionKey.all, \"cart\", cartId] as const,\n}\n\ntype ShippingOptionQueryKey = typeof shippingOptionKey\n\nexport const useShippingOptions = (\n  query?: StoreGetShippingOptionsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreShippingOptionsListRes>,\n    Error,\n    ReturnType<ShippingOptionQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    shippingOptionKey.list(query),\n    async () => client.shippingOptions.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useCartShippingOptions = (\n  cartId: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreShippingOptionsListRes>,\n    Error,\n    ReturnType<ShippingOptionQueryKey[\"cart\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    shippingOptionKey.cart(cartId),\n    async () => client.shippingOptions.listCartOptions(cartId),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import { StoreSwapsRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst SWAPS_QUERY_KEY = `swaps` as const\n\nconst swapKey = {\n  ...queryKeysFactory(SWAPS_QUERY_KEY),\n  cart: (cartId: string) => [...swapKey.all, \"cart\", cartId] as const,\n}\n\ntype SwapQueryKey = typeof swapKey\n\nexport const useCartSwap = (\n  cartId: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreSwapsRes>,\n    Error,\n    ReturnType<SwapQueryKey[\"cart\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    swapKey.cart(cartId),\n    () => client.swaps.retrieveByCartId(cartId),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n", "import { StorePostSwapsReq, StoreSwapsRes } from \"@medusajs/medusa\"\nimport { useMutation, UseMutationOptions } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\n\nexport const useCreateSwap = (\n  options?: UseMutationOptions<StoreSwapsRes, Error, StorePostSwapsReq>\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostSwapsReq) => client.swaps.create(data),\n    options\n  )\n}\n", "import { AdminAuthRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_AUTH_QUERY_KEY = `admin_auth` as const\n\nexport const adminAuthKeys = queryKeysFactory(ADMIN_AUTH_QUERY_KEY)\n\ntype AuthQueryKey = typeof adminAuthKeys\n\nexport const useAdminGetSession = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminAuthRes>,\n    Error,\n    ReturnType<AuthQueryKey[\"details\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminAuthKeys.details(),\n    () => client.admin.auth.getSession(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import { AdminAuthRes, AdminPostAuthReq } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminAuthKeys } from \"./queries\"\n\nexport const useAdminLogin = (\n  options?: UseMutationOptions<Response<AdminAuthRes>, Error, AdminPostAuthReq>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostAuthReq) => client.admin.auth.createSession(payload),\n    buildOptions(queryClient, adminAuthKeys.details(), options)\n  )\n}\n\nexport const useAdminDeleteSession = (\n  options?: UseMutationOptions<Response<void>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.auth.deleteSession(),\n    buildOptions(queryClient, adminAuthKeys.details(), options)\n  )\n}\n", "import {\n  AdminBatchJobListRes,\n  AdminBatchJobRes,\n  AdminGetBatchParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_COLLECTIONS_QUERY_KEY = `admin_batches` as const\n\nexport const adminBatchJobsKeys = queryKeysFactory(ADMIN_COLLECTIONS_QUERY_KEY)\n\ntype BatchJobsQueryKey = typeof adminBatchJobsKeys\n\nexport const useAdminBatchJobs = (\n  query?: AdminGetBatchParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminBatchJobListRes>,\n    Error,\n    ReturnType<BatchJobsQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminBatchJobsKeys.list(query),\n    () => client.admin.batchJobs.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminBatchJob = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminBatchJobRes>,\n    Error,\n    ReturnType<BatchJobsQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminBatchJobsKeys.detail(id),\n    () => client.admin.batchJobs.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import { AdminBatchJobRes, AdminPostBatchesReq } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminBatchJobsKeys } from \"./queries\"\n\n/**\n * Hook returns functions for creating batch jobs.\n *\n * @param options\n */\nexport const useAdminCreateBatchJob = (\n  options?: UseMutationOptions<\n    Response<AdminBatchJobRes>,\n    Error,\n    AdminPostBatchesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostBatchesReq) => client.admin.batchJobs.create(payload),\n    buildOptions(queryClient, adminBatchJobsKeys.lists(), options)\n  )\n}\n\n/**\n * Hook return functions for canceling a batch job\n *\n * @param id - id of the batch job\n * @param options\n */\nexport const useAdminCancelBatchJob = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminBatchJobRes>, Error>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.batchJobs.cancel(id),\n    buildOptions(\n      queryClient,\n      [adminBatchJobsKeys.lists(), adminBatchJobsKeys.detail(id)],\n      options\n    )\n  )\n}\n\n/**\n * Hook return functions for confirming a batch job\n *\n * @param id - id of the batch job\n * @param options\n */\nexport const useAdminConfirmBatchJob = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminBatchJobRes>, Error>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.batchJobs.confirm(id),\n    buildOptions(\n      queryClient,\n      [adminBatchJobsKeys.lists(), adminBatchJobsKeys.detail(id)],\n      options\n    )\n  )\n}\n", "import {\n  AdminOrdersRes,\n  AdminPostOrdersOrderClaimsClaimFulfillmentsReq,\n  AdminPostOrdersOrderClaimsClaimReq,\n  AdminPostOrdersOrderClaimsClaimShipmentsReq,\n  AdminPostOrdersOrderClaimsReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminProductKeys } from \"../products\"\nimport { adminVariantKeys } from \"../variants\"\nimport { adminOrderKeys } from \"./../orders/queries\"\n\nexport const useAdminCreateClaim = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderClaimsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderClaimsReq) =>\n      client.admin.orders.createClaim(orderId, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminUpdateClaim = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderClaimsClaimReq & { claim_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      claim_id,\n      ...payload\n    }: AdminPostOrdersOrderClaimsClaimReq & { claim_id: string }) =>\n      client.admin.orders.updateClaim(orderId, claim_id, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminCancelClaim = (\n  orderId: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (claimId: string) => client.admin.orders.cancelClaim(orderId, claimId),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminFulfillClaim = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderClaimsClaimFulfillmentsReq & { claim_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      claim_id,\n      ...payload\n    }: AdminPostOrdersOrderClaimsClaimFulfillmentsReq & { claim_id: string }) =>\n      client.admin.orders.fulfillClaim(orderId, claim_id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminOrderKeys.detail(orderId),\n        adminVariantKeys.all,\n        adminProductKeys.lists(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminCancelClaimFulfillment = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    { claim_id: string; fulfillment_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      claim_id,\n      fulfillment_id,\n    }: {\n      claim_id: string\n      fulfillment_id: string\n    }) =>\n      client.admin.orders.cancelClaimFulfillment(\n        orderId,\n        claim_id,\n        fulfillment_id\n      ),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminCreateClaimShipment = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderClaimsClaimShipmentsReq & { claim_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      claim_id,\n      ...payload\n    }: AdminPostOrdersOrderClaimsClaimShipmentsReq & { claim_id: string }) =>\n      client.admin.orders.createClaimShipment(orderId, claim_id, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n", "import {\n  AdminGetProductsParams,\n  AdminProductsListRes,\n  AdminProductsListTagsRes,\n  AdminProductsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_PRODUCTS_QUERY_KEY = `admin_products` as const\n\nexport const adminProductKeys = queryKeysFactory(ADMIN_PRODUCTS_QUERY_KEY)\n\ntype ProductQueryKeys = typeof adminProductKeys\n\nexport const useAdminProducts = (\n  query?: AdminGetProductsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductsListRes>,\n    Error,\n    ReturnType<ProductQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminProductKeys.list(query),\n    () => client.admin.products.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminProduct = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductsRes>,\n    Error,\n    ReturnType<ProductQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminProductKeys.detail(id),\n    () => client.admin.products.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminProductTagUsage = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductsListTagsRes>,\n    Error,\n    ReturnType<ProductQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminProductKeys.detail(\"tags\"),\n    () => client.admin.products.listTags(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminPostProductsProductOptionsOption,\n  AdminPostProductsProductOptionsReq,\n  AdminPostProductsProductReq,\n  AdminPostProductsProductVariantsReq,\n  AdminPostProductsProductVariantsVariantReq,\n  AdminPostProductsReq,\n  AdminProductsDeleteOptionRes,\n  AdminProductsDeleteRes,\n  AdminProductsDeleteVariantRes,\n  AdminProductsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminProductKeys } from \"./queries\"\n\nexport const useAdminCreateProduct = (\n  options?: UseMutationOptions<\n    Response<AdminProductsRes>,\n    Error,\n    AdminPostProductsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostProductsReq) => client.admin.products.create(payload),\n    buildOptions(queryClient, adminProductKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateProduct = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsRes>,\n    Error,\n    AdminPostProductsProductReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostProductsProductReq) =>\n      client.admin.products.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminProductKeys.lists(), adminProductKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteProduct = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminProductsDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.products.delete(id),\n    buildOptions(\n      queryClient,\n      [adminProductKeys.lists(), adminProductKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateVariant = (\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsRes>,\n    Error,\n    AdminPostProductsProductVariantsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostProductsProductVariantsReq) =>\n      client.admin.products.createVariant(productId, payload),\n    buildOptions(\n      queryClient,\n      [adminProductKeys.lists(), adminProductKeys.detail(productId)],\n      options\n    )\n  )\n}\n\nexport const useAdminUpdateVariant = (\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsRes>,\n    Error,\n    AdminPostProductsProductVariantsVariantReq & { variant_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      variant_id,\n      ...payload\n    }: AdminPostProductsProductVariantsVariantReq & { variant_id: string }) =>\n      client.admin.products.updateVariant(productId, variant_id, payload),\n    buildOptions(\n      queryClient,\n      [adminProductKeys.lists(), adminProductKeys.detail(productId)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteVariant = (\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsDeleteVariantRes>,\n    Error,\n    string\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (variantId: string) =>\n      client.admin.products.deleteVariant(productId, variantId),\n    buildOptions(\n      queryClient,\n      [adminProductKeys.lists(), adminProductKeys.detail(productId)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateProductOption = (\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsRes>,\n    Error,\n    AdminPostProductsProductOptionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostProductsProductOptionsReq) =>\n      client.admin.products.addOption(productId, payload),\n    buildOptions(queryClient, adminProductKeys.detail(productId), options)\n  )\n}\n\nexport const useAdminUpdateProductOption = (\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsRes>,\n    Error,\n    AdminPostProductsProductOptionsOption & { option_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      option_id,\n      ...payload\n    }: AdminPostProductsProductOptionsOption & { option_id: string }) =>\n      client.admin.products.updateOption(productId, option_id, payload),\n    buildOptions(queryClient, adminProductKeys.detail(productId), options)\n  )\n}\n\nexport const useAdminDeleteProductOption = (\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsDeleteOptionRes>,\n    Error,\n    string\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (optionId: string) =>\n      client.admin.products.deleteOption(productId, optionId),\n    buildOptions(queryClient, adminProductKeys.detail(productId), options)\n  )\n}\n", "import {\n  AdminGetVariantParams,\n  AdminGetVariantsParams,\n  AdminGetVariantsVariantInventoryRes,\n  AdminVariantsListRes,\n  AdminVariantsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_VARIANT_QUERY_KEY = `admin_variants` as const\n\nexport const adminVariantKeys = queryKeysFactory(ADMIN_VARIANT_QUERY_KEY)\n\ntype VariantQueryKeys = typeof adminVariantKeys\n\nexport const useAdminVariants = (\n  query?: AdminGetVariantsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminVariantsListRes>,\n    Error,\n    ReturnType<VariantQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminVariantKeys.list(query),\n    () => client.admin.variants.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminVariant = (\n  id: string,\n  query?: AdminGetVariantParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminVariantsRes>,\n    Error,\n    ReturnType<VariantQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminVariantKeys.detail(id),\n    () => client.admin.variants.retrieve(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminVariantsInventory = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminGetVariantsVariantInventoryRes>,\n    Error,\n    ReturnType<VariantQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminVariantKeys.detail(id),\n    () => client.admin.variants.getInventory(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminGetOrdersParams,\n  AdminOrdersListRes,\n  AdminOrdersRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { FindParams } from \"@medusajs/medusa/dist/types/common\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_ORDERS_QUERY_KEY = `admin_orders` as const\n\nexport const adminOrderKeys = {\n  ...queryKeysFactory(ADMIN_ORDERS_QUERY_KEY),\n  detailOrder(id: string, query?: FindParams) {\n    return [...this.detail(id), { ...(query || {}) }]\n  },\n}\n\ntype OrderQueryKeys = typeof adminOrderKeys\n\nexport const useAdminOrders = (\n  query?: AdminGetOrdersParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminOrdersListRes>,\n    Error,\n    ReturnType<OrderQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminOrderKeys.list(query),\n    () => client.admin.orders.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminOrder = (\n  id: string,\n  query?: FindParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminOrdersRes>,\n    Error,\n    ReturnType<OrderQueryKeys[\"detailOrder\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminOrderKeys.detailOrder(id, query),\n    () => client.admin.orders.retrieve(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminCollectionsListRes,\n  AdminCollectionsRes,\n  AdminGetCollectionsParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_COLLECTIONS_QUERY_KEY = `admin_collections` as const\n\nexport const adminCollectionKeys = queryKeysFactory(ADMIN_COLLECTIONS_QUERY_KEY)\n\ntype CollectionsQueryKey = typeof adminCollectionKeys\n\nexport const useAdminCollections = (\n  query?: AdminGetCollectionsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCollectionsListRes>,\n    Error,\n    ReturnType<CollectionsQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCollectionKeys.list(query),\n    () => client.admin.collections.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminCollection = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCollectionsRes>,\n    Error,\n    ReturnType<CollectionsQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCollectionKeys.detail(id),\n    () => client.admin.collections.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminCollectionsDeleteRes,\n  AdminCollectionsRes,\n  AdminDeleteProductsFromCollectionReq,\n  AdminPostCollectionsCollectionReq,\n  AdminPostCollectionsReq,\n  AdminPostProductsToCollectionReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminCollectionKeys } from \"./queries\"\n\nexport const useAdminCreateCollection = (\n  options?: UseMutationOptions<\n    Response<AdminCollectionsRes>,\n    Error,\n    AdminPostCollectionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostCollectionsReq) =>\n      client.admin.collections.create(payload),\n    buildOptions(queryClient, adminCollectionKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateCollection = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCollectionsRes>,\n    Error,\n    AdminPostCollectionsCollectionReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostCollectionsCollectionReq) =>\n      client.admin.collections.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminCollectionKeys.lists(), adminCollectionKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteCollection = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminCollectionsDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    () => client.admin.collections.delete(id),\n    buildOptions(\n      queryClient,\n      [adminCollectionKeys.lists(), adminCollectionKeys.detail(id)],\n      options\n    )\n  )\n}\n\n/**\n * Hook returns function for adding multiple products to a collection.\n *\n * @param id - id of the collection in which products are being added\n * @param options\n */\nexport const useAdminAddProductsToCollection = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCollectionsRes>,\n    Error,\n    AdminPostProductsToCollectionReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostProductsToCollectionReq) =>\n      client.admin.collections.addProducts(id, payload),\n    buildOptions(\n      queryClient,\n      [adminCollectionKeys.lists(), adminCollectionKeys.detail(id)],\n      options\n    )\n  )\n}\n\n/**\n * Hook returns function for removal of multiple products from a collection.\n *\n * @param id - id of the collection from which products will be removed\n * @param options\n */\nexport const useAdminRemoveProductsFromCollection = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCollectionsDeleteRes>,\n    Error,\n    AdminDeleteProductsFromCollectionReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteProductsFromCollectionReq) =>\n      client.admin.collections.removeProducts(id, payload),\n    buildOptions(\n      queryClient,\n      [adminCollectionKeys.lists(), adminCollectionKeys.detail(id)],\n      options\n    )\n  )\n}\n", "import {\n  AdminCurrenciesRes,\n  AdminPostCurrenciesCurrencyReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminCurrenciesKeys } from \"./queries\"\n\nexport const useAdminUpdateCurrency = (\n  code: string,\n  options?: UseMutationOptions<\n    Response<AdminCurrenciesRes>,\n    Error,\n    AdminPostCurrenciesCurrencyReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostCurrenciesCurrencyReq) =>\n      client.admin.currencies.update(code, payload),\n    buildOptions(\n      queryClient,\n      [adminCurrenciesKeys.lists(), adminCurrenciesKeys.detail(code)],\n      options\n    )\n  )\n}\n", "import {\n  AdminCurrenciesListRes,\n  AdminGetCurrenciesParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_CURRENCIES_QUERY_KEY = `admin_currencies` as const\n\nexport const adminCurrenciesKeys = queryKeysFactory(ADMIN_CURRENCIES_QUERY_KEY)\n\ntype CurrenciesQueryKey = typeof adminCurrenciesKeys\n\nexport const useAdminCurrencies = (\n  query?: AdminGetCurrenciesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCurrenciesListRes>,\n    Error,\n    ReturnType<CurrenciesQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCurrenciesKeys.list(query),\n    () => client.admin.currencies.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminCustomerGroupsListRes,\n  AdminCustomerGroupsRes,\n  AdminCustomersListRes,\n  AdminGetCustomerGroupsGroupParams,\n  AdminGetCustomerGroupsParams,\n  AdminGetCustomersParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ADMIN_CUSTOMER_GROUPS_QUERY_KEY = `admin_customer_groups` as const\n\nexport const adminCustomerGroupKeys = {\n  ...queryKeysFactory(ADMIN_CUSTOMER_GROUPS_QUERY_KEY),\n  detailCustomer(id: string, query?: AdminGetCustomersParams) {\n    return [...this.detail(id), \"customers\", { ...(query || {}) }]\n  },\n}\n\ntype CustomerGroupQueryKeys = typeof adminCustomerGroupKeys\n\n/**\n * Hook retrieves a customer group by id.\n *\n * @param id - customer group id\n * @param query - query params\n * @param options\n */\nexport const useAdminCustomerGroup = (\n  id: string,\n  query?: AdminGetCustomerGroupsGroupParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCustomerGroupsRes>,\n    Error,\n    ReturnType<CustomerGroupQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCustomerGroupKeys.detail(id),\n    () => client.admin.customerGroups.retrieve(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\n/**\n * Hook retrieves a list of customer groups.\n *\n * @param query - pagination/filtering params\n * @param options\n */\nexport const useAdminCustomerGroups = (\n  query?: AdminGetCustomerGroupsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCustomerGroupsListRes>,\n    Error,\n    ReturnType<CustomerGroupQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCustomerGroupKeys.list(query),\n    () => client.admin.customerGroups.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\n/**\n * Hook retrieves a list of customers that belong to provided groups.\n *\n * @param id - customer group id\n * @param query - pagination/filtering params\n * @param options\n */\nexport const useAdminCustomerGroupCustomers = (\n  id: string,\n  query?: AdminGetCustomersParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCustomersListRes>,\n    Error,\n    ReturnType<CustomerGroupQueryKeys[\"detailCustomer\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCustomerGroupKeys.detailCustomer(id, query),\n    () => client.admin.customerGroups.listCustomers(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminCustomerGroupsDeleteRes,\n  AdminCustomerGroupsRes,\n  AdminDeleteCustomerGroupsGroupCustomerBatchReq,\n  AdminPostCustomerGroupsGroupCustomersBatchReq,\n  AdminPostCustomerGroupsGroupReq,\n  AdminPostCustomerGroupsReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminCustomerGroupKeys } from \"./queries\"\n\n/**\n * Hook returns functions for creating customer groups.\n *\n * @param options\n */\nexport const useAdminCreateCustomerGroup = (\n  options?: UseMutationOptions<\n    Response<AdminCustomerGroupsRes>,\n    Error,\n    AdminPostCustomerGroupsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostCustomerGroupsReq) =>\n      client.admin.customerGroups.create(payload),\n    buildOptions(queryClient, adminCustomerGroupKeys.lists(), options)\n  )\n}\n\n/**\n * Hook return functions for updating a customer group.\n *\n * @param id - id of the customer group that is being updated\n * @param options\n */\nexport const useAdminUpdateCustomerGroup = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCustomerGroupsRes>,\n    Error,\n    AdminPostCustomerGroupsGroupReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostCustomerGroupsGroupReq) =>\n      client.admin.customerGroups.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminCustomerGroupKeys.lists(), adminCustomerGroupKeys.detail(id)],\n      options\n    )\n  )\n}\n\n/**\n * Hook return functions for deleting a customer group.\n *\n * @param id - id of the customer group that is being deleted\n * @param options\n */\nexport const useAdminDeleteCustomerGroup = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCustomerGroupsDeleteRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.customerGroups.delete(id),\n    buildOptions(\n      queryClient,\n      [adminCustomerGroupKeys.lists(), adminCustomerGroupKeys.detail(id)],\n      options\n    )\n  )\n}\n\n/**\n * Hook returns functions for addition of multiple customers to a customer group.\n *\n * @param id - id of the customer group in which customers are being added\n * @param options\n */\nexport const useAdminAddCustomersToCustomerGroup = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCustomerGroupsRes>,\n    Error,\n    AdminPostCustomerGroupsGroupCustomersBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostCustomerGroupsGroupCustomersBatchReq) =>\n      client.admin.customerGroups.addCustomers(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminCustomerGroupKeys.lists(),\n        adminCustomerGroupKeys.detailCustomer(id),\n      ],\n      options\n    )\n  )\n}\n\n/**\n * Hook returns function for removal of multiple customers from a customer group.\n *\n * @param id - id of a group from which customers will be removed\n * @param options\n */\nexport const useAdminRemoveCustomersFromCustomerGroup = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCustomerGroupsRes>,\n    Error,\n    AdminDeleteCustomerGroupsGroupCustomerBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteCustomerGroupsGroupCustomerBatchReq) =>\n      client.admin.customerGroups.removeCustomers(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminCustomerGroupKeys.lists(),\n        adminCustomerGroupKeys.detailCustomer(id),\n      ],\n      options\n    )\n  )\n}\n", "import {\n  AdminCustomersListRes,\n  AdminCustomersRes,\n  AdminGetCustomersParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ADMIN_CUSTOMERS_QUERY_KEY = `admin_customers` as const\n\nexport const adminCustomerKeys = queryKeysFactory(ADMIN_CUSTOMERS_QUERY_KEY)\n\ntype CustomerQueryKeys = typeof adminCustomerKeys\n\nexport const useAdminCustomers = (\n  query?: AdminGetCustomersParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCustomersListRes>,\n    Error,\n    ReturnType<CustomerQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCustomerKeys.list(query),\n    () => client.admin.customers.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminCustomer = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCustomersRes>,\n    Error,\n    ReturnType<CustomerQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCustomerKeys.detail(id),\n    () => client.admin.customers.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nimport {\n  AdminCustomersRes,\n  AdminPostCustomersCustomerReq,\n  AdminPostCustomersReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminCustomerKeys } from \"./queries\"\n\nexport const useAdminCreateCustomer = (\n  options?: UseMutationOptions<\n    Response<AdminCustomersRes>,\n    Error,\n    AdminPostCustomersReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostCustomersReq) => client.admin.customers.create(payload),\n    buildOptions(queryClient, adminCustomerKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateCustomer = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCustomersRes>,\n    Error,\n    AdminPostCustomersCustomerReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostCustomersCustomerReq) =>\n      client.admin.customers.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminCustomerKeys.lists(), adminCustomerKeys.detail(id)],\n      options\n    )\n  )\n}\n", "import {\n  AdminDiscountConditionsRes,\n  AdminDiscountsListRes,\n  AdminDiscountsRes,\n  AdminGetDiscountParams,\n  AdminGetDiscountsDiscountConditionsConditionParams,\n  AdminGetDiscountsParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ADMIN_DISCOUNTS_QUERY_KEY = `admin_discounts` as const\n\nexport const adminDiscountKeys = {\n  ...queryKeysFactory(ADMIN_DISCOUNTS_QUERY_KEY),\n  detailCondition(id: string, query?: any) {\n    return [\n      ...this.detail(id),\n      \"condition\" as const,\n      { ...(query || {}) },\n    ] as const\n  },\n}\n\ntype DiscountQueryKeys = typeof adminDiscountKeys\n\nexport const useAdminDiscounts = (\n  query?: AdminGetDiscountsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminDiscountsListRes>,\n    Error,\n    ReturnType<DiscountQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminDiscountKeys.list(query),\n    () => client.admin.discounts.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminDiscount = (\n  id: string,\n  query?: AdminGetDiscountParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminDiscountsRes>,\n    Error,\n    ReturnType<DiscountQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminDiscountKeys.detail(id),\n    () => client.admin.discounts.retrieve(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminGetDiscountByCode = (\n  code: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminDiscountsRes>,\n    Error,\n    ReturnType<DiscountQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminDiscountKeys.detail(code),\n    () => client.admin.discounts.retrieveByCode(code),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminGetDiscountCondition = (\n  id: string,\n  conditionId: string,\n  query?: AdminGetDiscountsDiscountConditionsConditionParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminDiscountConditionsRes>,\n    Error,\n    ReturnType<DiscountQueryKeys[\"detailCondition\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminDiscountKeys.detailCondition(conditionId),\n    () => client.admin.discounts.getCondition(id, conditionId, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminDeleteDiscountsDiscountConditionsConditionBatchReq,\n  AdminDiscountsDeleteRes,\n  AdminDiscountsRes,\n  AdminPostDiscountsDiscountConditions,\n  AdminPostDiscountsDiscountConditionsCondition,\n  AdminPostDiscountsDiscountConditionsConditionBatchParams,\n  AdminPostDiscountsDiscountConditionsConditionBatchReq,\n  AdminPostDiscountsDiscountDynamicCodesReq,\n  AdminPostDiscountsDiscountReq,\n  AdminPostDiscountsReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminDiscountKeys } from \"./queries\"\n\nexport const useAdminAddDiscountConditionResourceBatch = (\n  discountId: string,\n  conditionId: string,\n  query?: AdminPostDiscountsDiscountConditionsConditionBatchParams,\n  options?: UseMutationOptions<\n    Response<AdminDiscountsRes>,\n    Error,\n    AdminPostDiscountsDiscountConditionsConditionBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDiscountsDiscountConditionsConditionBatchReq) =>\n      client.admin.discounts.addConditionResourceBatch(\n        discountId,\n        conditionId,\n        payload,\n        query\n      ),\n    buildOptions(queryClient, adminDiscountKeys.detail(discountId), options)\n  )\n}\n\nexport const useAdminDeleteDiscountConditionResourceBatch = (\n  discountId: string,\n  conditionId: string,\n  options?: UseMutationOptions<\n    Response<AdminDiscountsRes>,\n    Error,\n    AdminDeleteDiscountsDiscountConditionsConditionBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteDiscountsDiscountConditionsConditionBatchReq) =>\n      client.admin.discounts.deleteConditionResourceBatch(\n        discountId,\n        conditionId,\n        payload\n      ),\n    buildOptions(queryClient, [adminDiscountKeys.detail(discountId)], options)\n  )\n}\n\nexport const useAdminCreateDiscount = (\n  options?: UseMutationOptions<\n    Response<AdminDiscountsRes>,\n    Error,\n    AdminPostDiscountsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDiscountsReq) => client.admin.discounts.create(payload),\n    buildOptions(queryClient, adminDiscountKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateDiscount = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDiscountsRes>,\n    Error,\n    AdminPostDiscountsDiscountReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDiscountsDiscountReq) =>\n      client.admin.discounts.update(id, payload),\n    buildOptions(queryClient, adminDiscountKeys.detail(id), options)\n  )\n}\n\nexport const useAdminDeleteDiscount = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDiscountsDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    () => client.admin.discounts.delete(id),\n    buildOptions(queryClient, adminDiscountKeys.lists(), options)\n  )\n}\n\nexport const useAdminDiscountAddRegion = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDiscountsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (regionId: string) => client.admin.discounts.addRegion(id, regionId),\n    buildOptions(queryClient, adminDiscountKeys.detail(id), options)\n  )\n}\n\nexport const useAdminDiscountRemoveRegion = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDiscountsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (regionId: string) => client.admin.discounts.removeRegion(id, regionId),\n    buildOptions(queryClient, adminDiscountKeys.detail(id), options)\n  )\n}\n\nexport const useAdminCreateDynamicDiscountCode = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDiscountsRes>,\n    Error,\n    AdminPostDiscountsDiscountDynamicCodesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDiscountsDiscountDynamicCodesReq) =>\n      client.admin.discounts.createDynamicCode(id, payload),\n    buildOptions(\n      queryClient,\n      [adminDiscountKeys.lists(), adminDiscountKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteDynamicDiscountCode = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDiscountsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (code: string) => client.admin.discounts.deleteDynamicCode(id, code),\n    buildOptions(\n      queryClient,\n      [adminDiscountKeys.lists(), adminDiscountKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDiscountCreateCondition = (\n  discountId: string,\n  options?: UseMutationOptions<\n    Response<AdminDiscountsRes>,\n    Error,\n    AdminPostDiscountsDiscountConditions\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDiscountsDiscountConditions) =>\n      client.admin.discounts.createCondition(discountId, payload),\n    buildOptions(queryClient, adminDiscountKeys.detail(discountId), options)\n  )\n}\n\nexport const useAdminDiscountUpdateCondition = (\n  discountId: string,\n  conditionId: string,\n  options?: UseMutationOptions<\n    Response<AdminDiscountsRes>,\n    Error,\n    AdminPostDiscountsDiscountConditionsCondition\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDiscountsDiscountConditionsCondition) =>\n      client.admin.discounts.updateCondition(discountId, conditionId, payload),\n    buildOptions(queryClient, adminDiscountKeys.detail(discountId), options)\n  )\n}\n\nexport const useAdminDiscountRemoveCondition = (\n  discountId: string,\n  options?: UseMutationOptions<Response<AdminDiscountsDeleteRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (conditionId: string) =>\n      client.admin.discounts.deleteCondition(discountId, conditionId),\n    buildOptions(queryClient, adminDiscountKeys.detail(discountId), options)\n  )\n}\n", "import {\n  AdminDraftOrdersListRes,\n  AdminDraftOrdersRes,\n  AdminGetDraftOrdersParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_DRAFT_ORDERS_QUERY_KEY = `admin_draft_orders` as const\n\nexport const adminDraftOrderKeys = queryKeysFactory(\n  ADMIN_DRAFT_ORDERS_QUERY_KEY\n)\n\ntype DraftOrderQueryKeys = typeof adminDraftOrderKeys\n\nexport const useAdminDraftOrders = (\n  query?: AdminGetDraftOrdersParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminDraftOrdersListRes>,\n    Error,\n    ReturnType<DraftOrderQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminDraftOrderKeys.list(query),\n    () => client.admin.draftOrders.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminDraftOrder = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminDraftOrdersRes>,\n    Error,\n    ReturnType<DraftOrderQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminDraftOrderKeys.detail(id),\n    () => client.admin.draftOrders.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminDraftOrdersDeleteRes,\n  AdminDraftOrdersRes,\n  AdminPostDraftOrdersDraftOrderLineItemsItemReq,\n  AdminPostDraftOrdersDraftOrderLineItemsReq,\n  AdminPostDraftOrdersDraftOrderRegisterPaymentRes,\n  AdminPostDraftOrdersDraftOrderReq,\n  AdminPostDraftOrdersReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminDraftOrderKeys } from \"./queries\"\n\nexport const useAdminCreateDraftOrder = (\n  options?: UseMutationOptions<\n    Response<AdminDraftOrdersRes>,\n    Error,\n    AdminPostDraftOrdersReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDraftOrdersReq) =>\n      client.admin.draftOrders.create(payload),\n    buildOptions(queryClient, adminDraftOrderKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateDraftOrder = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDraftOrdersRes>,\n    Error,\n    AdminPostDraftOrdersDraftOrderReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDraftOrdersDraftOrderReq) =>\n      client.admin.draftOrders.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminDraftOrderKeys.detail(id), adminDraftOrderKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteDraftOrder = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDraftOrdersDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    () => client.admin.draftOrders.delete(id),\n    buildOptions(\n      queryClient,\n      [adminDraftOrderKeys.detail(id), adminDraftOrderKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminDraftOrderRegisterPayment = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPostDraftOrdersDraftOrderRegisterPaymentRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    () => client.admin.draftOrders.markPaid(id),\n    buildOptions(queryClient, adminDraftOrderKeys.detail(id), options)\n  )\n}\n\nexport const useAdminDraftOrderAddLineItem = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDraftOrdersRes>,\n    Error,\n    AdminPostDraftOrdersDraftOrderLineItemsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDraftOrdersDraftOrderLineItemsReq) =>\n      client.admin.draftOrders.addLineItem(id, payload),\n    buildOptions(queryClient, adminDraftOrderKeys.detail(id), options)\n  )\n}\n\nexport const useAdminDraftOrderRemoveLineItem = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDraftOrdersRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (itemId: string) => client.admin.draftOrders.removeLineItem(id, itemId),\n    buildOptions(queryClient, adminDraftOrderKeys.detail(id), options)\n  )\n}\n\nexport const useAdminDraftOrderUpdateLineItem = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDraftOrdersRes>,\n    Error,\n    AdminPostDraftOrdersDraftOrderLineItemsItemReq & { item_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    ({\n      item_id,\n      ...payload\n    }: AdminPostDraftOrdersDraftOrderLineItemsItemReq & { item_id: string }) =>\n      client.admin.draftOrders.updateLineItem(id, item_id, payload),\n    buildOptions(queryClient, adminDraftOrderKeys.detail(id), options)\n  )\n}\n", "import {\n  AdminGetGiftCardsParams,\n  AdminGiftCardsListRes,\n  AdminGiftCardsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_GIFT_CARDS_QUERY_KEY = `admin_gift_cards` as const\n\nexport const adminGiftCardKeys = queryKeysFactory(ADMIN_GIFT_CARDS_QUERY_KEY)\n\ntype GiftCardQueryKeys = typeof adminGiftCardKeys\n\nexport const useAdminGiftCards = (\n  query?: AdminGetGiftCardsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminGiftCardsListRes>,\n    Error,\n    ReturnType<GiftCardQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminGiftCardKeys.list(query),\n    () => client.admin.giftCards.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminGiftCard = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminGiftCardsRes>,\n    Error,\n    ReturnType<GiftCardQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminGiftCardKeys.detail(id),\n    () => client.admin.giftCards.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminGiftCardsDeleteRes,\n  AdminGiftCardsRes,\n  AdminPostGiftCardsGiftCardReq,\n  AdminPostGiftCardsReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminGiftCardKeys } from \"./queries\"\n\nexport const useAdminCreateGiftCard = (\n  options?: UseMutationOptions<\n    Response<AdminGiftCardsRes>,\n    Error,\n    AdminPostGiftCardsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostGiftCardsReq) => client.admin.giftCards.create(payload),\n    buildOptions(queryClient, adminGiftCardKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateGiftCard = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminGiftCardsRes>,\n    Error,\n    AdminPostGiftCardsGiftCardReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostGiftCardsGiftCardReq) =>\n      client.admin.giftCards.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminGiftCardKeys.lists(), adminGiftCardKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteGiftCard = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminGiftCardsDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    () => client.admin.giftCards.delete(id),\n    buildOptions(\n      queryClient,\n      [adminGiftCardKeys.lists(), adminGiftCardKeys.detail(id)],\n      options\n    )\n  )\n}\n", "import {\n  AdminGetStockLocationsParams,\n  AdminInventoryItemsListWithVariantsAndLocationLevelsRes,\n  AdminInventoryItemsLocationLevelsRes,\n  AdminInventoryItemsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ADMIN_INVENTORY_ITEMS_QUERY_KEY = `admin_inventory_items` as const\n\nexport const adminInventoryItemsKeys = queryKeysFactory(\n  ADMIN_INVENTORY_ITEMS_QUERY_KEY\n)\n\ntype InventoryItemsQueryKeys = typeof adminInventoryItemsKeys\n\nexport const useAdminInventoryItems = (\n  query?: AdminGetStockLocationsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminInventoryItemsListWithVariantsAndLocationLevelsRes>,\n    Error,\n    ReturnType<InventoryItemsQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n\n  const { data, ...rest } = useQuery(\n    adminInventoryItemsKeys.list(query),\n    () => client.admin.inventoryItems.list(query),\n    { ...options }\n  )\n\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminInventoryItem = (\n  inventoryItemId: string,\n  query?: AdminGetStockLocationsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminInventoryItemsRes>,\n    Error,\n    ReturnType<InventoryItemsQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n\n  const { data, ...rest } = useQuery(\n    adminInventoryItemsKeys.detail(inventoryItemId),\n    () => client.admin.inventoryItems.retrieve(inventoryItemId, query),\n    { ...options }\n  )\n\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminInventoryItemLocationLevels = (\n  inventoryItemId: string,\n  query?: AdminGetStockLocationsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminInventoryItemsLocationLevelsRes>,\n    Error,\n    ReturnType<InventoryItemsQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n\n  const { data, ...rest } = useQuery(\n    adminInventoryItemsKeys.detail(inventoryItemId),\n    () =>\n      client.admin.inventoryItems.listLocationLevels(inventoryItemId, query),\n    { ...options }\n  )\n\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminInventoryItemsDeleteRes,\n  AdminInventoryItemsRes,\n  AdminPostInventoryItemsInventoryItemReq,\n  AdminPostInventoryItemsItemLocationLevelsLevelReq,\n  AdminPostInventoryItemsItemLocationLevelsReq,\n  AdminPostInventoryItemsReq,\n  AdminPostInventoryItemsParams\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminInventoryItemsKeys } from \"./queries\"\n\n// inventory item\n\n// create inventory item\nexport const useAdminCreateInventoryItem = (\n  options?: UseMutationOptions<\n    Response<AdminInventoryItemsRes>,\n    Error,\n    AdminPostInventoryItemsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostInventoryItemsReq, query?: AdminPostInventoryItemsParams) =>\n      client.admin.inventoryItems.create(payload, query),\n    buildOptions(\n      queryClient,\n      [adminInventoryItemsKeys.lists()],\n      options\n    )\n  )\n}\n\n\n// update inventory item\nexport const useAdminUpdateInventoryItem = (\n  inventoryItemId: string,\n  options?: UseMutationOptions<\n    Response<AdminInventoryItemsRes>,\n    Error,\n    AdminPostInventoryItemsInventoryItemReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostInventoryItemsInventoryItemReq) =>\n      client.admin.inventoryItems.update(inventoryItemId, payload),\n    buildOptions(\n      queryClient,\n      [adminInventoryItemsKeys.detail(inventoryItemId)],\n      options\n    )\n  )\n}\n\n// delete inventory item\nexport const useAdminDeleteInventoryItem = (\n  inventoryItemId: string,\n  options?: UseMutationOptions<\n    Response<AdminInventoryItemsDeleteRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.inventoryItems.delete(inventoryItemId),\n    buildOptions(\n      queryClient,\n      [adminInventoryItemsKeys.detail(inventoryItemId)],\n      options\n    )\n  )\n}\n\n// location level\nexport const useAdminUpdateLocationLevel = (\n  inventoryItemId: string,\n  options?: UseMutationOptions<\n    Response<AdminInventoryItemsRes>,\n    Error,\n    AdminPostInventoryItemsItemLocationLevelsLevelReq & {\n      stockLocationId: string\n    }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (\n      payload: AdminPostInventoryItemsItemLocationLevelsLevelReq & {\n        stockLocationId: string\n      }\n    ) =>\n      client.admin.inventoryItems.updateLocationLevel(\n        inventoryItemId,\n        payload.stockLocationId,\n        {\n          incoming_quantity: payload.incoming_quantity,\n          stocked_quantity: payload.stocked_quantity,\n        }\n      ),\n    buildOptions(\n      queryClient,\n      [\n        adminInventoryItemsKeys.detail(inventoryItemId),\n        adminInventoryItemsKeys.lists(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteLocationLevel = (\n  inventoryItemId: string,\n  options?: UseMutationOptions<Response<AdminInventoryItemsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (stockLocationId: string) =>\n      client.admin.inventoryItems.deleteLocationLevel(\n        inventoryItemId,\n        stockLocationId\n      ),\n    buildOptions(\n      queryClient,\n      [\n        adminInventoryItemsKeys.detail(inventoryItemId),\n        adminInventoryItemsKeys.lists(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateLocationLevel = (\n  inventoryItemId: string,\n  options?: UseMutationOptions<\n    Response<AdminInventoryItemsRes>,\n    Error,\n    AdminPostInventoryItemsItemLocationLevelsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostInventoryItemsItemLocationLevelsReq) =>\n      client.admin.inventoryItems.createLocationLevel(inventoryItemId, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminInventoryItemsKeys.detail(inventoryItemId),\n        adminInventoryItemsKeys.lists(),\n      ],\n      options\n    )\n  )\n}\n", "import { AdminListInvitesRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_INVITES_QUERY_KEY = `admin_invites` as const\n\nexport const adminInviteKeys = queryKeysFactory(ADMIN_INVITES_QUERY_KEY)\n\ntype InviteQueryKeys = typeof adminInviteKeys\n\nexport const useAdminInvites = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminListInvitesRes>,\n    Error,\n    ReturnType<InviteQueryKeys[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminInviteKeys.lists(),\n    () => client.admin.invites.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminInviteDeleteRes,\n  AdminPostInvitesInviteAcceptReq,\n} from \"@medusajs/medusa\"\nimport { AdminPostInvitesPayload, Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminInviteKeys } from \"./queries\"\n\nexport const useAdminAcceptInvite = (\n  options?: UseMutationOptions<\n    Response<void>,\n    Error,\n    AdminPostInvitesInviteAcceptReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostInvitesInviteAcceptReq) =>\n      client.admin.invites.accept(payload),\n    buildOptions(queryClient, adminInviteKeys.lists(), options)\n  )\n}\n\nexport const useAdminResendInvite = (\n  id: string,\n  options?: UseMutationOptions\n) => {\n  const { client } = useMedusa()\n  return useMutation(() => client.admin.invites.resend(id), options)\n}\n\nexport const useAdminCreateInvite = (\n  options?: UseMutationOptions<Response<void>, Error, AdminPostInvitesPayload>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostInvitesPayload) => client.admin.invites.create(payload),\n    buildOptions(queryClient, adminInviteKeys.lists(), options)\n  )\n}\n\nexport const useAdminDeleteInvite = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminInviteDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.invites.delete(id),\n    buildOptions(\n      queryClient,\n      [adminInviteKeys.lists(), adminInviteKeys.detail(id)],\n      options\n    )\n  )\n}\n", "import {\n  AdminGetNotesParams,\n  AdminNotesListRes,\n  AdminNotesRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_NOTE_QUERY_KEY = `admin_notes` as const\n\nexport const adminNoteKeys = queryKeysFactory(ADMIN_NOTE_QUERY_KEY)\n\ntype NoteQueryKeys = typeof adminNoteKeys\n\nexport const useAdminNotes = (\n  query?: AdminGetNotesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminNotesListRes>,\n    Error,\n    ReturnType<NoteQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminNoteKeys.list(query),\n    () => client.admin.notes.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminNote = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminNotesRes>,\n    Error,\n    ReturnType<NoteQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminNoteKeys.detail(id),\n    () => client.admin.notes.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminNotesDeleteRes,\n  AdminNotesRes,\n  AdminPostNotesNoteReq,\n  AdminPostNotesReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminNoteKeys } from \"./queries\"\n\nexport const useAdminCreateNote = (\n  options?: UseMutationOptions<\n    Response<AdminNotesRes>,\n    Error,\n    AdminPostNotesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostNotesReq) => client.admin.notes.create(payload),\n    buildOptions(queryClient, adminNoteKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateNote = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminNotesRes>,\n    Error,\n    AdminPostNotesNoteReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostNotesNoteReq) => client.admin.notes.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminNoteKeys.detail(id), adminNoteKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteNote = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminNotesDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.notes.delete(id),\n    buildOptions(\n      queryClient,\n      [adminNoteKeys.detail(id), adminNoteKeys.lists()],\n      options\n    )\n  )\n}\n", "import {\n  AdminGetNotificationsParams,\n  AdminNotificationsListRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_NOTIFICATIONS_QUERY_KEY = `admin_notifications` as const\n\nexport const adminNotificationKeys = queryKeysFactory(\n  ADMIN_NOTIFICATIONS_QUERY_KEY\n)\n\ntype NotificationQueryKeys = typeof adminNotificationKeys\n\nexport const useAdminNotifications = (\n  query?: AdminGetNotificationsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminNotificationsListRes>,\n    Error,\n    ReturnType<NotificationQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminNotificationKeys.list(query),\n    () => client.admin.notifications.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminNotificationsRes,\n  AdminPostNotificationsNotificationResendReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminNotificationKeys } from \"./queries\"\n\nexport const useAdminResendNotification = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminNotificationsRes>,\n    Error,\n    AdminPostNotificationsNotificationResendReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostNotificationsNotificationResendReq) =>\n      client.admin.notifications.resend(id, payload),\n    buildOptions(\n      queryClient,\n      [adminNotificationKeys.lists(), adminNotificationKeys.detail(id)],\n      options\n    )\n  )\n}\n", "import {\n  AdminOrdersRes,\n  AdminPostOrdersOrderFulfillmentsReq,\n  AdminPostOrdersOrderRefundsReq,\n  AdminPostOrdersOrderReq,\n  AdminPostOrdersOrderReturnsReq,\n  AdminPostOrdersOrderShipmentReq,\n  AdminPostOrdersOrderShippingMethodsReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminProductKeys } from \"../products\"\nimport { adminVariantKeys } from \"../variants\"\nimport { adminOrderKeys } from \"./queries\"\n\nexport const useAdminUpdateOrder = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderReq) =>\n      client.admin.orders.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCancelOrder = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orders.cancel(id),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCompleteOrder = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orders.complete(id),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCapturePayment = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orders.capturePayment(id),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminRefundPayment = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderRefundsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderRefundsReq) =>\n      client.admin.orders.refundPayment(id, payload),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateFulfillment = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderFulfillmentsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderFulfillmentsReq) =>\n      client.admin.orders.createFulfillment(orderId, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminOrderKeys.lists(),\n        adminOrderKeys.detail(orderId),\n        adminVariantKeys.all,\n        adminProductKeys.lists(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminCancelFulfillment = (\n  orderId: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (fulfillmentId: string) =>\n      client.admin.orders.cancelFulfillment(orderId, fulfillmentId),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(orderId)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateShipment = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderShipmentReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderShipmentReq) =>\n      client.admin.orders.createShipment(orderId, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminRequestReturn = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderReturnsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderReturnsReq) =>\n      client.admin.orders.requestReturn(orderId, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminAddShippingMethod = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderShippingMethodsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderShippingMethodsReq) =>\n      client.admin.orders.addShippingMethod(orderId, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminArchiveOrder = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orders.archive(id),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(id)],\n      options\n    )\n  )\n}\n", "import {\n  AdminOrderEditsListRes,\n  AdminOrderEditsRes,\n  GetOrderEditsOrderEditParams,\n  GetOrderEditsParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ADMIN_ORDER_EDITS_QUERY_KEY = `admin_order_edits` as const\n\nexport const adminOrderEditsKeys = queryKeysFactory(ADMIN_ORDER_EDITS_QUERY_KEY)\ntype OrderEditQueryKeys = typeof adminOrderEditsKeys\n\nexport const useAdminOrderEdit = (\n  id: string,\n  query?: GetOrderEditsOrderEditParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminOrderEditsRes>,\n    Error,\n    ReturnType<OrderEditQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminOrderEditsKeys.detail(id),\n    () => client.admin.orderEdits.retrieve(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminOrderEdits = (\n  query?: GetOrderEditsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminOrderEditsListRes>,\n    Error,\n    ReturnType<OrderEditQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminOrderEditsKeys.list(query),\n    () => client.admin.orderEdits.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nimport {\n  AdminOrderEditDeleteRes,\n  AdminOrderEditItemChangeDeleteRes,\n  AdminOrderEditsRes,\n  AdminPostOrderEditsEditLineItemsLineItemReq,\n  AdminPostOrderEditsEditLineItemsReq,\n  AdminPostOrderEditsOrderEditReq,\n  AdminPostOrderEditsReq,\n} from \"@medusajs/medusa\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminOrderKeys } from \"../orders\"\nimport { adminOrderEditsKeys } from \"./queries\"\n\nexport const useAdminCreateOrderEdit = (\n  options?: UseMutationOptions<\n    Response<AdminOrderEditsRes>,\n    Error,\n    AdminPostOrderEditsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostOrderEditsReq) =>\n      client.admin.orderEdits.create(payload),\n    buildOptions(\n      queryClient,\n      [adminOrderEditsKeys.lists(), adminOrderKeys.details()],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteOrderEdit = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrderEditDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orderEdits.delete(id),\n    buildOptions(\n      queryClient,\n      [\n        adminOrderEditsKeys.detail(id),\n        adminOrderEditsKeys.lists(),\n        adminOrderKeys.details(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteOrderEditItemChange = (\n  orderEditId: string,\n  itemChangeId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrderEditItemChangeDeleteRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orderEdits.deleteItemChange(orderEditId, itemChangeId),\n    buildOptions(\n      queryClient,\n      [adminOrderEditsKeys.detail(orderEditId), adminOrderEditsKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminOrderEditUpdateLineItem = (\n  orderEditId: string,\n  itemId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrderEditsRes>,\n    Error,\n    AdminPostOrderEditsEditLineItemsLineItemReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrderEditsEditLineItemsLineItemReq) =>\n      client.admin.orderEdits.updateLineItem(orderEditId, itemId, payload),\n    buildOptions(\n      queryClient,\n      [adminOrderEditsKeys.detail(orderEditId), adminOrderEditsKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminOrderEditDeleteLineItem = (\n  orderEditId: string,\n  itemId: string,\n  options?: UseMutationOptions<Response<AdminOrderEditsRes>, Error>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orderEdits.removeLineItem(orderEditId, itemId),\n    buildOptions(\n      queryClient,\n      [adminOrderEditsKeys.detail(orderEditId), adminOrderEditsKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminUpdateOrderEdit = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminOrderEditsRes>,\n    Error,\n    AdminPostOrderEditsOrderEditReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrderEditsOrderEditReq) =>\n      client.admin.orderEdits.update(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminOrderEditsKeys.lists(),\n        adminOrderEditsKeys.detail(id),\n        adminOrderKeys.details(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminOrderEditAddLineItem = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminOrderEditsRes>,\n    Error,\n    AdminPostOrderEditsEditLineItemsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostOrderEditsEditLineItemsReq) =>\n      client.admin.orderEdits.addLineItem(id, payload),\n    buildOptions(\n      queryClient,\n      [adminOrderEditsKeys.lists(), adminOrderEditsKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminRequestOrderEditConfirmation = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrderEditsRes>, Error>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orderEdits.requestConfirmation(id),\n    buildOptions(\n      queryClient,\n      [\n        adminOrderEditsKeys.lists(),\n        adminOrderEditsKeys.detail(id),\n        adminOrderKeys.details(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminCancelOrderEdit = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrderEditsRes>, Error>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orderEdits.cancel(id),\n    buildOptions(\n      queryClient,\n      [\n        adminOrderEditsKeys.lists(),\n        adminOrderEditsKeys.detail(id),\n        adminOrderKeys.details(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminConfirmOrderEdit = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrderEditsRes>, Error>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orderEdits.confirm(id),\n    buildOptions(\n      queryClient,\n      [\n        adminOrderEditsKeys.lists(),\n        adminOrderEditsKeys.detail(id),\n        adminOrderKeys.details(),\n      ],\n      options\n    )\n  )\n}\n", "import {\n  AdminGetPriceListPaginationParams,\n  AdminGetPriceListsPriceListProductsParams,\n  AdminPriceListRes,\n  AdminPriceListsListRes,\n  AdminProductsListRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_PRICE_LISTS_QUERY_KEY = `admin_price_lists` as const\n\nexport const adminPriceListKeys = {\n  ...queryKeysFactory(ADMIN_PRICE_LISTS_QUERY_KEY),\n  detailProducts(id: string, query?: any) {\n    return [\n      ...this.detail(id),\n      \"products\" as const,\n      { ...(query || {}) },\n    ] as const\n  },\n}\n\ntype PriceListQueryKeys = typeof adminPriceListKeys\n\nexport const useAdminPriceLists = (\n  query?: AdminGetPriceListPaginationParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminPriceListsListRes>,\n    Error,\n    ReturnType<PriceListQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminPriceListKeys.list(query),\n    () => client.admin.priceLists.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminPriceListProducts = (\n  id: string,\n  query?: AdminGetPriceListsPriceListProductsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductsListRes>,\n    Error,\n    ReturnType<PriceListQueryKeys[\"detailProducts\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminPriceListKeys.detailProducts(id, query),\n    () => client.admin.priceLists.listProducts(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminPriceList = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminPriceListRes>,\n    Error,\n    ReturnType<PriceListQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminPriceListKeys.detail(id),\n    () => client.admin.priceLists.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminDeletePriceListPricesPricesReq,\n  AdminPostPriceListPricesPricesReq,\n  AdminPostPriceListsPriceListPriceListReq,\n  AdminPostPriceListsPriceListReq,\n  AdminPriceListDeleteBatchRes,\n  AdminPriceListDeleteProductPricesRes,\n  AdminPriceListDeleteRes,\n  AdminPriceListDeleteVariantPricesRes,\n  AdminPriceListRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminProductKeys } from \"../products\"\nimport { adminVariantKeys } from \"../variants\"\nimport { adminPriceListKeys } from \"./queries\"\n\nexport const useAdminCreatePriceList = (\n  options?: UseMutationOptions<\n    Response<AdminPriceListRes>,\n    Error,\n    AdminPostPriceListsPriceListReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostPriceListsPriceListReq) =>\n      client.admin.priceLists.create(payload),\n    buildOptions(queryClient, adminPriceListKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdatePriceList = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPriceListRes>,\n    Error,\n    AdminPostPriceListsPriceListPriceListReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostPriceListsPriceListPriceListReq) =>\n      client.admin.priceLists.update(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminPriceListKeys.detail(id),\n        adminPriceListKeys.lists(),\n        adminPriceListKeys.detailProducts(id),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminDeletePriceList = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminPriceListDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.priceLists.delete(id),\n    buildOptions(\n      queryClient,\n      [adminPriceListKeys.detail(id), adminPriceListKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminCreatePriceListPrices = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPriceListRes>,\n    Error,\n    AdminPostPriceListPricesPricesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostPriceListPricesPricesReq) =>\n      client.admin.priceLists.addPrices(id, payload),\n    buildOptions(\n      queryClient,\n      [adminPriceListKeys.lists(), adminPriceListKeys.detailProducts(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeletePriceListPrices = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPriceListDeleteBatchRes>,\n    Error,\n    AdminDeletePriceListPricesPricesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeletePriceListPricesPricesReq) =>\n      client.admin.priceLists.deletePrices(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminPriceListKeys.detail(id),\n        adminPriceListKeys.lists(),\n        adminPriceListKeys.detailProducts(id),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminDeletePriceListProductPrices = (\n  id: string,\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminPriceListDeleteProductPricesRes>,\n    Error\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.priceLists.deleteProductPrices(id, productId),\n    buildOptions(\n      queryClient,\n      [\n        adminPriceListKeys.detail(id),\n        adminPriceListKeys.lists(),\n        adminProductKeys.detail(productId),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminDeletePriceListVariantPrices = (\n  id: string,\n  variantId: string,\n  options?: UseMutationOptions<\n    Response<AdminPriceListDeleteVariantPricesRes>,\n    Error\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.priceLists.deleteVariantPrices(id, variantId),\n    buildOptions(\n      queryClient,\n      [\n        adminPriceListKeys.detail(id),\n        adminPriceListKeys.lists(),\n        adminVariantKeys.detail(variantId),\n      ],\n      options\n    )\n  )\n}\n", "import {\n  AdminGetProductTagsParams,\n  AdminProductTagsListRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_PRODUCT_TAGS_QUERY_KEY = `admin_product_tags` as const\n\nexport const adminProductTagKeys = queryKeysFactory(\n  ADMIN_PRODUCT_TAGS_QUERY_KEY\n)\n\ntype ProductQueryKeys = typeof adminProductTagKeys\n\nexport const useAdminProductTags = (\n  query?: AdminGetProductTagsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductTagsListRes>,\n    Error,\n    ReturnType<ProductQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminProductTagKeys.list(query),\n    () => client.admin.productTags.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminGetProductTypesParams,\n  AdminProductTypesListRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_PRODUCT_TYPES_QUERY_KEY = `admin_product_types` as const\n\nexport const adminProductTypeKeys = queryKeysFactory(\n  ADMIN_PRODUCT_TYPES_QUERY_KEY\n)\n\ntype ProductTypesQueryKeys = typeof adminProductTypeKeys\n\nexport const useAdminProductTypes = (\n  query?: AdminGetProductTypesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductTypesListRes>,\n    Error,\n    ReturnType<ProductTypesQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminProductTypeKeys.list(query),\n    () => client.admin.productTypes.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminGetProductCategoriesParams,\n  AdminProductCategoriesListRes,\n  AdminGetProductCategoryParams,\n  AdminProductCategoriesCategoryRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ADMIN_PRODUCT_CATEGORIES_QUERY_KEY = `product_categories` as const\nexport const adminProductCategoryKeys = queryKeysFactory(\n  ADMIN_PRODUCT_CATEGORIES_QUERY_KEY\n)\ntype ProductCategoryQueryKeys = typeof adminProductCategoryKeys\n\nexport const useAdminProductCategories = (\n  query?: AdminGetProductCategoriesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductCategoriesListRes>,\n    Error,\n    ReturnType<ProductCategoryQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminProductCategoryKeys.list(query),\n    () => client.admin.productCategories.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminProductCategory = (\n  id: string,\n  query?: AdminGetProductCategoryParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductCategoriesCategoryRes>,\n    Error,\n    ReturnType<ProductCategoryQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminProductCategoryKeys.detail(id),\n    () => client.admin.productCategories.retrieve(id, query),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n", "import {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  AdminDeleteProductCategoriesCategoryProductsBatchReq,\n  AdminPostProductCategoriesCategoryProductsBatchReq,\n  AdminPostProductCategoriesCategoryReq,\n  AdminPostProductCategoriesReq,\n  AdminProductCategoriesCategoryDeleteRes,\n  AdminProductCategoriesCategoryRes,\n} from \"@medusajs/medusa\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminProductCategoryKeys } from \"./queries\"\nimport { adminProductKeys } from \"../products\"\n\n/**\n * Hook provides a mutation function for creating product categories.\n *\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable the corresponding feature flag in your medusa backend project.\n */\nexport const useAdminCreateProductCategory = (\n  options?: UseMutationOptions<\n    Response<AdminProductCategoriesCategoryRes>,\n    Error,\n    AdminPostProductCategoriesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostProductCategoriesReq) =>\n      client.admin.productCategories.create(payload),\n    buildOptions(\n      queryClient,\n      [adminProductCategoryKeys.list(), adminProductKeys.details()],\n      options\n    )\n  )\n}\n\n/** Update a product category\n *\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable feature flag `product_categories` in your medusa backend project.\n * @description updates a product category\n * @returns the updated medusa product category\n */\nexport const useAdminUpdateProductCategory = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminProductCategoriesCategoryRes>,\n    Error,\n    AdminPostProductCategoriesCategoryReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostProductCategoriesCategoryReq) =>\n      client.admin.productCategories.update(id, payload),\n      buildOptions(\n        queryClient,\n        [\n          adminProductCategoryKeys.lists(),\n          adminProductCategoryKeys.detail(id),\n          adminProductKeys.details(),\n        ],\n        options\n      )\n    )\n}\n\n/**\n * Delete a product category\n *\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable featureflag `product_categories` in your medusa backend project.\n * @param id\n * @param options\n */\nexport const useAdminDeleteProductCategory = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminProductCategoriesCategoryDeleteRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.productCategories.delete(id),\n    buildOptions(\n      queryClient,\n      [\n        adminProductCategoryKeys.lists(),\n        adminProductCategoryKeys.detail(id),\n        adminProductKeys.all\n      ],\n      options\n    )\n  )\n}\n\n/**\n * Add products to a product category\n *\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable featureflag `product_categories` in your medusa backend project.\n * @description Add products to a product category\n * @param id\n * @param options\n */\nexport const useAdminAddProductsToCategory = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminProductCategoriesCategoryRes>,\n    Error,\n    AdminPostProductCategoriesCategoryProductsBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostProductCategoriesCategoryProductsBatchReq) => {\n      return client.admin.productCategories.addProducts(id, payload)\n    },\n    buildOptions(\n      queryClient,\n      [\n        adminProductCategoryKeys.lists(),\n        adminProductCategoryKeys.detail(id),\n        adminProductKeys.list({ product_category_id: [id] }),\n      ],\n      options\n    )\n  )\n}\n\n/**\n * Remove products from a product category\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable featureflag `product_categories` in your medusa backend project.\n * @description remove products from a product category\n * @param id\n * @param options\n */\nexport const useAdminDeleteProductsFromCategory = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminProductCategoriesCategoryRes>,\n    Error,\n    AdminDeleteProductCategoriesCategoryProductsBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminDeleteProductCategoriesCategoryProductsBatchReq) => {\n      return client.admin.productCategories.removeProducts(id, payload)\n    },\n    buildOptions(\n      queryClient,\n      [\n        adminProductCategoryKeys.lists(),\n        adminProductCategoryKeys.detail(id),\n        adminProductKeys.list({ product_category_id: [id] }),\n      ],\n      options\n    )\n  )\n}\n", "import {\n  AdminPublishableApiKeysListRes,\n  AdminPublishableApiKeysRes,\n  AdminSalesChannelsListRes,\n  GetPublishableApiKeySalesChannelsParams,\n  GetPublishableApiKeysParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ADMIN_PUBLISHABLE_API_KEYS_QUERY_KEY =\n  `admin_publishable_api_keys` as const\n\nexport const adminPublishableApiKeysKeys = {\n  ...queryKeysFactory(ADMIN_PUBLISHABLE_API_KEYS_QUERY_KEY),\n  detailSalesChannels(id: string, query?: any) {\n    return [\n      ...this.detail(id),\n      \"sales_channels\" as const,\n      { ...(query || {}) },\n    ] as const\n  },\n}\n\ntype PublishableApiKeyQueryKeys = typeof adminPublishableApiKeysKeys\n\nexport const useAdminPublishableApiKey = (\n  id: string,\n  query?: GetPublishableApiKeysParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminPublishableApiKeysRes>,\n    Error,\n    ReturnType<PublishableApiKeyQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminPublishableApiKeysKeys.detail(id),\n    () => client.admin.publishableApiKeys.retrieve(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminPublishableApiKeys = (\n  query?: GetPublishableApiKeysParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminPublishableApiKeysListRes>,\n    Error,\n    ReturnType<PublishableApiKeyQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminPublishableApiKeysKeys.list(query),\n    () => client.admin.publishableApiKeys.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminPublishableApiKeySalesChannels = (\n  id: string,\n  query?: GetPublishableApiKeySalesChannelsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminSalesChannelsListRes>,\n    Error,\n    ReturnType<PublishableApiKeyQueryKeys[\"detailSalesChannels\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminPublishableApiKeysKeys.detailSalesChannels(id, query),\n    () => client.admin.publishableApiKeys.listSalesChannels(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nimport {\n  AdminPostPublishableApiKeySalesChannelsBatchReq,\n  AdminPostPublishableApiKeysPublishableApiKeyReq,\n  AdminPostPublishableApiKeysReq,\n  AdminPublishableApiKeyDeleteRes,\n  AdminPublishableApiKeysRes,\n} from \"@medusajs/medusa\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminPublishableApiKeysKeys } from \"./queries\"\n\nexport const useAdminCreatePublishableApiKey = (\n  options?: UseMutationOptions<\n    Response<AdminPublishableApiKeysRes>,\n    Error,\n    AdminPostPublishableApiKeysReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostPublishableApiKeysReq) =>\n      client.admin.publishableApiKeys.create(payload),\n    buildOptions(queryClient, [adminPublishableApiKeysKeys.lists()], options)\n  )\n}\n\nexport const useAdminUpdatePublishableApiKey = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPublishableApiKeysRes>,\n    Error,\n    AdminPostPublishableApiKeysPublishableApiKeyReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostPublishableApiKeysPublishableApiKeyReq) =>\n      client.admin.publishableApiKeys.update(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminPublishableApiKeysKeys.lists(),\n        adminPublishableApiKeysKeys.detail(id),\n        adminPublishableApiKeysKeys.details(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminDeletePublishableApiKey = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPublishableApiKeyDeleteRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.publishableApiKeys.delete(id),\n    buildOptions(\n      queryClient,\n      [\n        adminPublishableApiKeysKeys.detail(id),\n        adminPublishableApiKeysKeys.lists(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminRevokePublishableApiKey = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminPublishableApiKeysRes>, Error>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.publishableApiKeys.revoke(id),\n    buildOptions(\n      queryClient,\n      [\n        adminPublishableApiKeysKeys.lists(),\n        adminPublishableApiKeysKeys.detail(id),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminAddPublishableKeySalesChannelsBatch = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPublishableApiKeysRes>,\n    Error,\n    AdminPostPublishableApiKeySalesChannelsBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostPublishableApiKeySalesChannelsBatchReq) =>\n      client.admin.publishableApiKeys.addSalesChannelsBatch(id, payload),\n    buildOptions(\n      queryClient,\n      [adminPublishableApiKeysKeys.detailSalesChannels(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminRemovePublishableKeySalesChannelsBatch = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPublishableApiKeysRes>,\n    Error,\n    AdminPostPublishableApiKeySalesChannelsBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostPublishableApiKeySalesChannelsBatchReq) =>\n      client.admin.publishableApiKeys.deleteSalesChannelsBatch(id, payload),\n    buildOptions(\n      queryClient,\n      [adminPublishableApiKeysKeys.detailSalesChannels(id)],\n      options\n    )\n  )\n}\n", "import {\n  AdminGetRegionsParams,\n  AdminGetRegionsRegionFulfillmentOptionsRes,\n  AdminRegionsListRes,\n  AdminRegionsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_REGIONS_QUERY_KEY = `admin_regions` as const\n\nexport const adminRegionKeys = queryKeysFactory(ADMIN_REGIONS_QUERY_KEY)\n\ntype RegionQueryKeys = typeof adminRegionKeys\n\nexport const useAdminRegions = (\n  query?: AdminGetRegionsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminRegionsListRes>,\n    Error,\n    ReturnType<RegionQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminRegionKeys.list(query),\n    () => client.admin.regions.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminRegion = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminRegionsRes>,\n    Error,\n    ReturnType<RegionQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminRegionKeys.detail(id),\n    () => client.admin.regions.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminRegionFulfillmentOptions = (\n  regionId: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminGetRegionsRegionFulfillmentOptionsRes>,\n    Error,\n    ReturnType<RegionQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminRegionKeys.detail(`${regionId}_fullfillment-options`),\n    () => client.admin.regions.retrieveFulfillmentOptions(regionId),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminPostRegionsRegionCountriesReq,\n  AdminPostRegionsRegionFulfillmentProvidersReq,\n  AdminPostRegionsRegionPaymentProvidersReq,\n  AdminPostRegionsRegionReq,\n  AdminPostRegionsReq,\n  AdminRegionsDeleteRes,\n  AdminRegionsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminRegionKeys } from \"./queries\"\n\nexport const useAdminCreateRegion = (\n  options?: UseMutationOptions<\n    Response<AdminRegionsRes>,\n    Error,\n    AdminPostRegionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostRegionsReq) => client.admin.regions.create(payload),\n    buildOptions(queryClient, adminRegionKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateRegion = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminRegionsRes>,\n    Error,\n    AdminPostRegionsRegionReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostRegionsRegionReq) =>\n      client.admin.regions.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminRegionKeys.lists(), adminRegionKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteRegion = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminRegionsDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.regions.delete(id),\n    buildOptions(\n      queryClient,\n      [adminRegionKeys.lists(), adminRegionKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminRegionAddCountry = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminRegionsRes>,\n    Error,\n    AdminPostRegionsRegionCountriesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostRegionsRegionCountriesReq) =>\n      client.admin.regions.addCountry(id, payload),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n\nexport const useAdminRegionRemoveCountry = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminRegionsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (country_code: string) =>\n      client.admin.regions.deleteCountry(id, country_code),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n\nexport const useAdminRegionAddFulfillmentProvider = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminRegionsRes>,\n    Error,\n    AdminPostRegionsRegionFulfillmentProvidersReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostRegionsRegionFulfillmentProvidersReq) =>\n      client.admin.regions.addFulfillmentProvider(id, payload),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n\nexport const useAdminRegionDeleteFulfillmentProvider = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminRegionsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (provider_id: string) =>\n      client.admin.regions.deleteFulfillmentProvider(id, provider_id),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n\nexport const useAdminRegionAddPaymentProvider = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminRegionsRes>,\n    Error,\n    AdminPostRegionsRegionPaymentProvidersReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostRegionsRegionPaymentProvidersReq) =>\n      client.admin.regions.addPaymentProvider(id, payload),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n\nexport const useAdminRegionDeletePaymentProvider = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminRegionsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (provider_id: string) =>\n      client.admin.regions.deletePaymentProvider(id, provider_id),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n", "import {\n  AdminReturnReasonsListRes,\n  AdminReturnReasonsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_RETURNS_REASONS_QUERY_KEY = `admin_return_reasons` as const\n\nexport const adminReturnReasonKeys = queryKeysFactory(\n  ADMIN_RETURNS_REASONS_QUERY_KEY\n)\n\ntype ReturnReasonQueryKeys = typeof adminReturnReasonKeys\n\nexport const useAdminReturnReasons = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminReturnReasonsListRes>,\n    Error,\n    ReturnType<ReturnReasonQueryKeys[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminReturnReasonKeys.lists(),\n    () => client.admin.returnReasons.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminReturnReason = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminReturnReasonsRes>,\n    Error,\n    ReturnType<ReturnReasonQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminReturnReasonKeys.detail(id),\n    () => client.admin.returnReasons.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminPostReturnReasonsReasonReq,\n  AdminPostReturnReasonsReq,\n  AdminReturnReasonsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminReturnReasonKeys } from \"./queries\"\n\nexport const useAdminCreateReturnReason = (\n  options?: UseMutationOptions<\n    Response<AdminReturnReasonsRes>,\n    Error,\n    AdminPostReturnReasonsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostReturnReasonsReq) =>\n      client.admin.returnReasons.create(payload),\n    buildOptions(queryClient, adminReturnReasonKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateReturnReason = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminReturnReasonsRes>,\n    Error,\n    AdminPostReturnReasonsReasonReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostReturnReasonsReasonReq) =>\n      client.admin.returnReasons.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminReturnReasonKeys.detail(id), adminReturnReasonKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteReturnReason = (\n  id: string,\n  options?: UseMutationOptions\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.returnReasons.delete(id),\n    buildOptions(\n      queryClient,\n      [adminReturnReasonKeys.detail(id), adminReturnReasonKeys.lists()],\n      options\n    )\n  )\n}\n", "import { AdminReturnsListRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_RETURNS_QUERY_KEY = `admin_returns` as const\n\nexport const adminReturnKeys = queryKeysFactory(ADMIN_RETURNS_QUERY_KEY)\n\ntype ReturnQueryKeys = typeof adminReturnKeys\n\nexport const useAdminReturns = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminReturnsListRes>,\n    Error,\n    ReturnType<ReturnQueryKeys[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminReturnKeys.lists(),\n    () => client.admin.returns.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminPostReturnsReturnReceiveReq,\n  AdminReturnsCancelRes,\n  AdminReturnsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminReturnKeys } from \"./queries\"\n\nexport const useAdminReceiveReturn = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminReturnsRes>,\n    Error,\n    AdminPostReturnsReturnReceiveReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload) => client.admin.returns.receive(id, payload),\n    buildOptions(\n      queryClient,\n      [adminReturnKeys.detail(id), adminReturnKeys.list()],\n      options\n    )\n  )\n}\n\nexport const useAdminCancelReturn = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminReturnsCancelRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.returns.cancel(id),\n    buildOptions(\n      queryClient,\n      [adminReturnKeys.detail(id), adminReturnKeys.list()],\n      options\n    )\n  )\n}\n", "import {\n  AdminPostReservationsReq,\n  AdminPostReservationsReservationReq,\n  AdminReservationsDeleteRes,\n  AdminReservationsRes,\n} from \"@medusajs/medusa\"\nimport {\n  UseMutationOptions,\n  useMutation,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nimport { Response } from \"@medusajs/medusa-js/src\"\nimport { adminReservationsKeys } from \"./queries\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { useMedusa } from \"../../../contexts\"\nimport { adminVariantKeys } from \"../variants\"\n\nexport const useAdminCreateReservation = (\n  options?: UseMutationOptions<\n    Response<AdminReservationsRes>,\n    Error,\n    AdminPostReservationsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostReservationsReq) =>\n      client.admin.reservations.create(payload),\n    buildOptions(\n      queryClient,\n      [adminReservationsKeys.lists(), adminVariantKeys.all],\n      options\n    )\n  )\n}\n\nexport const useAdminUpdateReservation = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminReservationsRes>,\n    Error,\n    AdminPostReservationsReservationReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostReservationsReservationReq) =>\n      client.admin.reservations.update(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminReservationsKeys.lists(),\n        adminReservationsKeys.detail(id),\n        adminVariantKeys.all,\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteReservation = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminReservationsDeleteRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.reservations.delete(id),\n    buildOptions(\n      queryClient,\n      [\n        adminReservationsKeys.lists(),\n        adminReservationsKeys.detail(id),\n        adminVariantKeys.all,\n      ],\n      options\n    )\n  )\n}\n", "import {\n  AdminGetReservationsParams,\n  AdminReservationsListRes,\n  AdminReservationsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ADMIN_RESERVATIONS_QUERY_KEY = `admin_stock_locations` as const\n\nexport const adminReservationsKeys = queryKeysFactory(\n  ADMIN_RESERVATIONS_QUERY_KEY\n)\n\ntype ReservationsQueryKeys = typeof adminReservationsKeys\n\nexport const useAdminReservations = (\n  query?: AdminGetReservationsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminReservationsListRes>,\n    Error,\n    ReturnType<ReservationsQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n\n  const { data, ...rest } = useQuery(\n    adminReservationsKeys.list(query),\n    () => client.admin.reservations.list(query),\n    { ...options }\n  )\n\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminReservation = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminReservationsRes>,\n    Error,\n    ReturnType<ReservationsQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n\n  const { data, ...rest } = useQuery(\n    adminReservationsKeys.detail(id),\n    () => client.admin.reservations.retrieve(id),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminGetSalesChannelsParams,\n  AdminSalesChannelsListRes,\n  AdminSalesChannelsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ADMIN_SALES_CHANNELS_QUERY_KEY = `admin_sales_channels` as const\n\nexport const adminSalesChannelsKeys = queryKeysFactory(\n  ADMIN_SALES_CHANNELS_QUERY_KEY\n)\n\ntype SalesChannelsQueryKeys = typeof adminSalesChannelsKeys\n\n/** retrieve a sales channel\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable feature flag `sales_channels` in your medusa backend project.\n * @description gets a sales channel\n * @returns a medusa sales channel\n */\nexport const useAdminSalesChannel = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminSalesChannelsRes>,\n    Error,\n    ReturnType<SalesChannelsQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminSalesChannelsKeys.detail(id),\n    () => client.admin.salesChannels.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\n/**\n * retrieve a list of sales channels\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable feature flag `sales_channels` in your medusa backend project.\n * @description Retrieve a list of sales channel\n * @returns a list of sales channel as well as the pagination properties\n */\nexport const useAdminSalesChannels = (\n  query?: AdminGetSalesChannelsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminSalesChannelsListRes>,\n    Error,\n    ReturnType<SalesChannelsQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminSalesChannelsKeys.list(query),\n    () => client.admin.salesChannels.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminDeleteSalesChannelsChannelProductsBatchReq,\n  AdminPostSalesChannelsChannelProductsBatchReq,\n  AdminPostSalesChannelsReq,\n  AdminPostSalesChannelsSalesChannelReq,\n  AdminSalesChannelsDeleteRes,\n  AdminSalesChannelsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminProductKeys } from \"../products\"\nimport { adminStockLocationsKeys } from \"../stock-locations\"\nimport { adminSalesChannelsKeys } from \"./queries\"\n\n/**\n * Hook provides a mutation function for creating sales channel.\n *\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable the corresponding feature flag in your medusa backend project.\n */\nexport const useAdminCreateSalesChannel = (\n  options?: UseMutationOptions<\n    Response<AdminSalesChannelsRes>,\n    Error,\n    AdminPostSalesChannelsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostSalesChannelsReq) =>\n      client.admin.salesChannels.create(payload),\n    buildOptions(queryClient, [adminSalesChannelsKeys.list()], options)\n  )\n}\n\n/** update a sales channel\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable feature flag `sales_channels` in your medusa backend project.\n * @description updates a sales channel\n * @returns the updated medusa sales channel\n */\nexport const useAdminUpdateSalesChannel = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminSalesChannelsRes>,\n    Error,\n    AdminPostSalesChannelsSalesChannelReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostSalesChannelsSalesChannelReq) =>\n      client.admin.salesChannels.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminSalesChannelsKeys.lists(), adminSalesChannelsKeys.detail(id)],\n      options\n    )\n  )\n}\n\n/**\n * Delete a sales channel\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n * @param id\n * @param options\n */\nexport const useAdminDeleteSalesChannel = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminSalesChannelsDeleteRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    () => client.admin.salesChannels.delete(id),\n    buildOptions(\n      queryClient,\n      [adminSalesChannelsKeys.lists(), adminSalesChannelsKeys.detail(id)],\n      options\n    )\n  )\n}\n\n/**\n * Remove products from a sales channel\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n * @description remove products from a sales channel\n * @param id\n * @param options\n */\nexport const useAdminDeleteProductsFromSalesChannel = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminSalesChannelsRes>,\n    Error,\n    AdminDeleteSalesChannelsChannelProductsBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminDeleteSalesChannelsChannelProductsBatchReq) => {\n      return client.admin.salesChannels.removeProducts(id, payload)\n    },\n    buildOptions(\n      queryClient,\n      [\n        adminSalesChannelsKeys.lists(),\n        adminSalesChannelsKeys.detail(id),\n        adminProductKeys.list({ sales_channel_id: [id] }),\n      ],\n      options\n    )\n  )\n}\n\n/**\n * Add products to a sales channel\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n * @description Add products to a sales channel\n * @param id\n * @param options\n */\nexport const useAdminAddProductsToSalesChannel = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminSalesChannelsRes>,\n    Error,\n    AdminPostSalesChannelsChannelProductsBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostSalesChannelsChannelProductsBatchReq) => {\n      return client.admin.salesChannels.addProducts(id, payload)\n    },\n    buildOptions(\n      queryClient,\n      [\n        adminSalesChannelsKeys.lists(),\n        adminSalesChannelsKeys.detail(id),\n        adminProductKeys.list({ sales_channel_id: [id] }),\n      ],\n      options\n    )\n  )\n}\n\n/**\n * Add a location to a sales channel\n * @experimental This feature is under development and may change in the future.\n * To use this feature please install the stock location in your medusa backend project.\n * @description Add a location to a sales channel\n * @param options\n */\nexport const useAdminAddLocationToSalesChannel = (\n  options?: UseMutationOptions<\n    Response<AdminSalesChannelsRes>,\n    Error,\n    {\n      sales_channel_id: string\n      location_id: string\n    }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(({ sales_channel_id, location_id }) => {\n    return client.admin.salesChannels.addLocation(sales_channel_id, {\n      location_id,\n    })\n  }, buildOptions(\n    queryClient, \n    [\n      adminSalesChannelsKeys.lists(), \n      adminSalesChannelsKeys.details(), \n      adminStockLocationsKeys.all\n    ], \n    options\n    )\n  )\n}\n\n/**\n * Remove a location from a sales channel\n * @experimental This feature is under development and may change in the future.\n * To use this feature please install the stock location in your medusa backend project.\n * @description Remove a location from a sales channel\n * @param options\n */\nexport const useAdminRemoveLocationFromSalesChannel = (\n  options?: UseMutationOptions<\n    Response<AdminSalesChannelsRes>,\n    Error,\n    {\n      sales_channel_id: string\n      location_id: string\n    }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(({ sales_channel_id, location_id }) => {\n    return client.admin.salesChannels.removeLocation(sales_channel_id, {\n      location_id,\n    })\n  }, buildOptions(\n    queryClient, \n    [\n      adminSalesChannelsKeys.lists(), \n      adminSalesChannelsKeys.details(), \n      adminStockLocationsKeys.all\n    ], \n    options\n    )\n  )\n}\n", "import {\n  AdminGetStockLocationsParams,\n  AdminStockLocationsListRes,\n  AdminStockLocationsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ADMIN_STOCK_LOCATIONS_QUERY_KEY = `admin_stock_locations` as const\n\nexport const adminStockLocationsKeys = queryKeysFactory(\n  ADMIN_STOCK_LOCATIONS_QUERY_KEY\n)\n\ntype StockLocationsQueryKeys = typeof adminStockLocationsKeys\n\nexport const useAdminStockLocations = (\n  query?: AdminGetStockLocationsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminStockLocationsListRes>,\n    Error,\n    ReturnType<StockLocationsQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n\n  const { data, ...rest } = useQuery(\n    adminStockLocationsKeys.list(query),\n    () => client.admin.stockLocations.list(query),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminStockLocation = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminStockLocationsRes>,\n    Error,\n    ReturnType<StockLocationsQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n\n  const { data, ...rest } = useQuery(\n    adminStockLocationsKeys.detail(id),\n    () => client.admin.stockLocations.retrieve(id),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminPostStockLocationsReq,\n  AdminStockLocationsDeleteRes,\n  AdminStockLocationsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminProductKeys } from \"../products\"\nimport { adminVariantKeys } from \"../variants\"\nimport { adminStockLocationsKeys } from \"./queries\"\n\nexport const useAdminCreateStockLocation = (\n  options?: UseMutationOptions<\n    Response<AdminStockLocationsRes>,\n    Error,\n    AdminPostStockLocationsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostStockLocationsReq) =>\n      client.admin.stockLocations.create(payload),\n    buildOptions(queryClient, [adminStockLocationsKeys.lists()], options)\n  )\n}\n\nexport const useAdminUpdateStockLocation = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminStockLocationsRes>,\n    Error,\n    AdminPostStockLocationsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostStockLocationsReq) =>\n      client.admin.stockLocations.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminStockLocationsKeys.lists(), adminStockLocationsKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteStockLocation = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminStockLocationsDeleteRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.stockLocations.delete(id),\n    buildOptions(\n      queryClient,\n      [\n        adminStockLocationsKeys.lists(),\n        adminStockLocationsKeys.detail(id),\n        adminVariantKeys.all,\n        adminProductKeys.lists(),\n      ],\n      options\n    )\n  )\n}\n", "import {\n  AdminGetShippingOptionsParams,\n  AdminShippingOptionsListRes,\n  AdminShippingOptionsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_SHIPPING_OPTIONS_QUERY_KEY = `admin_shipping_options` as const\n\nexport const adminShippingOptionKeys = queryKeysFactory(\n  ADMIN_SHIPPING_OPTIONS_QUERY_KEY\n)\n\ntype ShippingOptionQueryKeys = typeof adminShippingOptionKeys\n\nexport const useAdminShippingOptions = (\n  query?: AdminGetShippingOptionsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminShippingOptionsListRes>,\n    Error,\n    ReturnType<ShippingOptionQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminShippingOptionKeys.list(query),\n    () => client.admin.shippingOptions.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminShippingOption = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminShippingOptionsRes>,\n    Error,\n    ReturnType<ShippingOptionQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminShippingOptionKeys.detail(id),\n    () => client.admin.shippingOptions.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminPostShippingOptionsOptionReq,\n  AdminPostShippingOptionsReq,\n  AdminShippingOptionsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminShippingOptionKeys } from \"./queries\"\n\nexport const useAdminCreateShippingOption = (\n  options?: UseMutationOptions<\n    Response<AdminShippingOptionsRes>,\n    Error,\n    AdminPostShippingOptionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostShippingOptionsReq) =>\n      client.admin.shippingOptions.create(payload),\n    buildOptions(queryClient, adminShippingOptionKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateShippingOption = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminShippingOptionsRes>,\n    Error,\n    AdminPostShippingOptionsOptionReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostShippingOptionsOptionReq) =>\n      client.admin.shippingOptions.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminShippingOptionKeys.lists(), adminShippingOptionKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteShippingOption = (\n  id: string,\n  options?: UseMutationOptions\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.shippingOptions.delete(id),\n    buildOptions(\n      queryClient,\n      [adminShippingOptionKeys.lists(), adminShippingOptionKeys.detail(id)],\n      options\n    )\n  )\n}\n", "import {\n  AdminShippingProfilesListRes,\n  AdminShippingProfilesRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_COLLECTIONS_QUERY_KEY = `admin_shippingProfiles` as const\n\nexport const adminShippingProfileKeys = queryKeysFactory(\n  ADMIN_COLLECTIONS_QUERY_KEY\n)\n\ntype ShippingProfileQueryKeys = typeof adminShippingProfileKeys\n\nexport const useAdminShippingProfiles = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminShippingProfilesListRes>,\n    Error,\n    ReturnType<ShippingProfileQueryKeys[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminShippingProfileKeys.lists(),\n    () => client.admin.shippingProfiles.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminShippingProfile = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminShippingProfilesRes>,\n    Error,\n    ReturnType<ShippingProfileQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminShippingProfileKeys.detail(id),\n    () => client.admin.shippingProfiles.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminDeleteShippingProfileRes,\n  AdminPostShippingProfilesReq,\n  AdminShippingProfilesRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminShippingProfileKeys } from \"./queries\"\n\nexport const useAdminCreateShippingProfile = (\n  options?: UseMutationOptions<\n    Response<AdminShippingProfilesRes>,\n    Error,\n    AdminPostShippingProfilesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostShippingProfilesReq) =>\n      client.admin.shippingProfiles.create(payload),\n    buildOptions(queryClient, adminShippingProfileKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateShippingProfile = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminShippingProfilesRes>,\n    Error,\n    AdminPostShippingProfilesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostShippingProfilesReq) =>\n      client.admin.shippingProfiles.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminShippingProfileKeys.lists(), adminShippingProfileKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteShippingProfile = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDeleteShippingProfileRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.shippingProfiles.delete(id),\n    buildOptions(\n      queryClient,\n      [adminShippingProfileKeys.lists(), adminShippingProfileKeys.detail(id)],\n      options\n    )\n  )\n}\n", "import {\n  AdminExtendedStoresRes,\n  AdminPaymentProvidersList,\n  AdminTaxProvidersList,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_STORE_QUERY_KEY = `admin_store` as const\n\nexport const adminStoreKeys = queryKeysFactory(ADMIN_STORE_QUERY_KEY)\n\ntype StoreQueryKeys = typeof adminStoreKeys\n\nexport const useAdminStorePaymentProviders = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminPaymentProvidersList>,\n    Error,\n    ReturnType<StoreQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminStoreKeys.detail(\"payment_providers\"),\n    () => client.admin.store.listPaymentProviders(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminStoreTaxProviders = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminTaxProvidersList>,\n    Error,\n    ReturnType<StoreQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminStoreKeys.detail(\"tax_providers\"),\n    () => client.admin.store.listTaxProviders(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminStore = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminExtendedStoresRes>,\n    Error,\n    ReturnType<StoreQueryKeys[\"details\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminStoreKeys.details(),\n    () => client.admin.store.retrieve(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import { AdminPostStoreReq, AdminStoresRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminStoreKeys } from \"./queries\"\n\nexport const useAdminUpdateStore = (\n  options?: UseMutationOptions<\n    Response<AdminStoresRes>,\n    Error,\n    AdminPostStoreReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostStoreReq) => client.admin.store.update(payload),\n    buildOptions(queryClient, adminStoreKeys.details(), options)\n  )\n}\n\nexport const useAdminAddStoreCurrency = (\n  options?: UseMutationOptions<Response<AdminStoresRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (currency_code: string) => client.admin.store.deleteCurrency(currency_code),\n    buildOptions(queryClient, adminStoreKeys.details(), options)\n  )\n}\n\nexport const useAdminDeleteStoreCurrency = (\n  options?: UseMutationOptions<Response<AdminStoresRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (currency_code: string) => client.admin.store.deleteCurrency(currency_code),\n    buildOptions(queryClient, adminStoreKeys.details(), options)\n  )\n}\n", "import {\n  AdminGetSwapsParams,\n  AdminSwapsListRes,\n  AdminSwapsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_SWAPS_QUERY_KEY = `admin_swaps` as const\n\nexport const adminSwapKeys = queryKeysFactory(ADMIN_SWAPS_QUERY_KEY)\n\ntype SwapsQueryKey = typeof adminSwapKeys\n\nexport const useAdminSwaps = (\n  query?: AdminGetSwapsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminSwapsListRes>,\n    Error,\n    ReturnType<SwapsQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminSwapKeys.list(query),\n    () => client.admin.swaps.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminSwap = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminSwapsRes>,\n    Error,\n    ReturnType<SwapsQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminSwapKeys.detail(id),\n    () => client.admin.swaps.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminOrdersRes,\n  AdminPostOrdersOrderSwapsReq,\n  AdminPostOrdersOrderSwapsSwapFulfillmentsReq,\n  AdminPostOrdersOrderSwapsSwapShipmentsReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { adminOrderKeys, adminProductKeys, adminVariantKeys } from \"..\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminSwapKeys } from \"./queries\"\n\nexport const useAdminCreateSwap = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderSwapsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostOrdersOrderSwapsReq) =>\n      client.admin.orders.createSwap(orderId, payload),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.detail(orderId), adminSwapKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminCancelSwap = (\n  orderId: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (swapId: string) => client.admin.orders.cancelSwap(orderId, swapId),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.detail(orderId), adminSwapKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminFulfillSwap = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderSwapsSwapFulfillmentsReq & { swap_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      swap_id,\n      ...payload\n    }: AdminPostOrdersOrderSwapsSwapFulfillmentsReq & { swap_id: string }) =>\n      client.admin.orders.fulfillSwap(orderId, swap_id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminOrderKeys.detail(orderId),\n        adminSwapKeys.lists(),\n        adminVariantKeys.all,\n        adminProductKeys.lists(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateSwapShipment = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderSwapsSwapShipmentsReq & { swap_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      swap_id,\n      ...payload\n    }: AdminPostOrdersOrderSwapsSwapShipmentsReq & { swap_id: string }) =>\n      client.admin.orders.createSwapShipment(orderId, swap_id, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminProcessSwapPayment = (\n  orderId: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (swapId: string) => client.admin.orders.processSwapPayment(orderId, swapId),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.detail(orderId), adminSwapKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminCancelSwapFulfillment = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    { swap_id: string; fulfillment_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      swap_id,\n      fulfillment_id,\n    }: {\n      swap_id: string\n      fulfillment_id: string\n    }) =>\n      client.admin.orders.cancelSwapFulfillment(\n        orderId,\n        swap_id,\n        fulfillment_id\n      ),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.detail(orderId), adminSwapKeys.lists()],\n      options\n    )\n  )\n}\n", "import {\n  AdminGetTaxRatesParams,\n  AdminTaxRatesListRes,\n  AdminTaxRatesRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_TAX_RATES_QUERY_KEY = `admin_tax_rates` as const\n\nexport const adminTaxRateKeys = queryKeysFactory(ADMIN_TAX_RATES_QUERY_KEY)\n\ntype TaxRateQueryKeys = typeof adminTaxRateKeys\n\nexport const useAdminTaxRates = (\n  query?: AdminGetTaxRatesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminTaxRatesListRes>,\n    Error,\n    ReturnType<TaxRateQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminTaxRateKeys.list(query),\n    () => client.admin.taxRates.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminTaxRate = (\n  id: string,\n  query?: AdminGetTaxRatesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminTaxRatesRes>,\n    Error,\n    ReturnType<TaxRateQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminTaxRateKeys.detail(id),\n    () => client.admin.taxRates.retrieve(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminDeleteTaxRatesTaxRateProductsReq,\n  AdminDeleteTaxRatesTaxRateProductTypesReq,\n  AdminDeleteTaxRatesTaxRateShippingOptionsReq,\n  AdminPostTaxRatesReq,\n  AdminPostTaxRatesTaxRateProductsReq,\n  AdminPostTaxRatesTaxRateProductTypesReq,\n  AdminPostTaxRatesTaxRateReq,\n  AdminPostTaxRatesTaxRateShippingOptionsReq,\n  AdminTaxRatesDeleteRes,\n  AdminTaxRatesRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminTaxRateKeys } from \"./queries\"\n\nexport const useAdminCreateTaxRate = (\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminPostTaxRatesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostTaxRatesReq) => client.admin.taxRates.create(payload),\n    buildOptions(queryClient, adminTaxRateKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateTaxRate = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminPostTaxRatesTaxRateReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostTaxRatesTaxRateReq) =>\n      client.admin.taxRates.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteTaxRate = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminTaxRatesDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.taxRates.delete(id),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateProductTaxRates = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminPostTaxRatesTaxRateProductsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostTaxRatesTaxRateProductsReq) =>\n      client.admin.taxRates.addProducts(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteProductTaxRates = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminDeleteTaxRatesTaxRateProductsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteTaxRatesTaxRateProductsReq) =>\n      client.admin.taxRates.removeProducts(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateProductTypeTaxRates = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminPostTaxRatesTaxRateProductTypesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostTaxRatesTaxRateProductTypesReq) =>\n      client.admin.taxRates.addProductTypes(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteProductTypeTaxRates = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminDeleteTaxRatesTaxRateProductTypesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteTaxRatesTaxRateProductTypesReq) =>\n      client.admin.taxRates.removeProductTypes(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateShippingTaxRates = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminPostTaxRatesTaxRateShippingOptionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostTaxRatesTaxRateShippingOptionsReq) =>\n      client.admin.taxRates.addShippingOptions(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteShippingTaxRates = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminDeleteTaxRatesTaxRateShippingOptionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteTaxRatesTaxRateShippingOptionsReq) =>\n      client.admin.taxRates.removeShippingOptions(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n", "import {\n  AdminDeleteUploadsReq,\n  AdminDeleteUploadsRes,\n  AdminPostUploadsDownloadUrlReq,\n  AdminUploadsDownloadUrlRes,\n  AdminUploadsRes,\n} from \"@medusajs/medusa\"\nimport { AdminCreateUploadPayload, Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminUploadFile = (\n  options?: UseMutationOptions<\n    Response<AdminUploadsRes>,\n    Error,\n    AdminCreateUploadPayload\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation((payload: AdminCreateUploadPayload) => {\n    return client.admin.uploads.create(payload)\n  }, buildOptions(queryClient, undefined, options))\n}\n\nexport const useAdminUploadProtectedFile = (\n  options?: UseMutationOptions<\n    Response<AdminUploadsRes>,\n    Error,\n    AdminCreateUploadPayload\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation((payload: AdminCreateUploadPayload) => {\n    return client.admin.uploads.createProtected(payload)\n  }, buildOptions(queryClient, undefined, options))\n}\n\nexport const useAdminCreatePresignedDownloadUrl = (\n  options?: UseMutationOptions<\n    Response<AdminUploadsDownloadUrlRes>,\n    Error,\n    AdminPostUploadsDownloadUrlReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostUploadsDownloadUrlReq) =>\n      client.admin.uploads.getPresignedDownloadUrl(payload),\n    buildOptions(queryClient, undefined, options)\n  )\n}\n\nexport const useAdminDeleteFile = (\n  options?: UseMutationOptions<\n    Response<AdminDeleteUploadsRes>,\n    Error,\n    AdminDeleteUploadsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteUploadsReq) => client.admin.uploads.delete(payload),\n    buildOptions(queryClient, undefined, options)\n  )\n}\n", "import { AdminUserRes, AdminUsersListRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_USERS_QUERY_KEY = `admin_users` as const\n\nexport const adminUserKeys = queryKeysFactory(ADMIN_USERS_QUERY_KEY)\n\ntype UserQueryKeys = typeof adminUserKeys\n\nexport const useAdminUsers = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminUsersListRes>,\n    Error,\n    ReturnType<UserQueryKeys[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminUserKeys.lists(),\n    () => client.admin.users.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminUser = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminUserRes>,\n    Error,\n    ReturnType<UserQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminUserKeys.detail(id),\n    () => client.admin.users.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n", "import {\n  AdminDeleteUserRes,\n  AdminResetPasswordRequest,\n  AdminResetPasswordTokenRequest,\n  AdminUserRes,\n} from \"@medusajs/medusa\"\nimport {\n  AdminCreateUserPayload,\n  AdminUpdateUserPayload,\n  Response,\n} from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { adminCustomerKeys } from \"..\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateUser = (\n  options?: UseMutationOptions<\n    Response<AdminUserRes>,\n    Error,\n    AdminCreateUserPayload\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminCreateUserPayload) => client.admin.users.create(payload),\n    buildOptions(queryClient, adminCustomerKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateUser = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminUserRes>,\n    Error,\n    AdminUpdateUserPayload\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminUpdateUserPayload) => client.admin.users.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminCustomerKeys.lists(), adminCustomerKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteUser = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDeleteUserRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.users.delete(id),\n    buildOptions(\n      queryClient,\n      [adminCustomerKeys.detail(id), adminCustomerKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminResetPassword = (\n  options?: UseMutationOptions<\n    Response<AdminUserRes>,\n    Error,\n    AdminResetPasswordRequest\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (payload: AdminResetPasswordRequest) =>\n      client.admin.users.resetPassword(payload),\n    options\n  )\n}\n\nexport const useAdminSendResetPasswordToken = (\n  options?: UseMutationOptions<\n    Response<void>,\n    Error,\n    AdminResetPasswordTokenRequest\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (payload: AdminResetPasswordTokenRequest) =>\n      client.admin.users.sendResetPasswordToken(payload),\n    options\n  )\n}\n", "import { AdminPaymentCollectionsRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst PAYMENT_COLLECTION_QUERY_KEY = `paymentCollection` as const\n\nexport const adminPaymentCollectionQueryKeys = queryKeysFactory<\n  typeof PAYMENT_COLLECTION_QUERY_KEY\n>(PAYMENT_COLLECTION_QUERY_KEY)\n\ntype AdminPaymentCollectionKey = typeof adminPaymentCollectionQueryKeys\n\nexport const useAdminPaymentCollection = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminPaymentCollectionsRes>,\n    Error,\n    ReturnType<AdminPaymentCollectionKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminPaymentCollectionQueryKeys.detail(id),\n    () => client.admin.paymentCollections.retrieve(id),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n", "import { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nimport {\n  AdminPaymentCollectionDeleteRes,\n  AdminPaymentCollectionsRes,\n  AdminUpdatePaymentCollectionsReq,\n} from \"@medusajs/medusa\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminPaymentCollectionQueryKeys } from \"./queries\"\n\nexport const useAdminDeletePaymentCollection = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPaymentCollectionDeleteRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.paymentCollections.delete(id),\n    buildOptions(\n      queryClient,\n      [\n        adminPaymentCollectionQueryKeys.detail(id),\n        adminPaymentCollectionQueryKeys.lists(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminUpdatePaymentCollection = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPaymentCollectionsRes>,\n    Error,\n    AdminUpdatePaymentCollectionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminUpdatePaymentCollectionsReq) =>\n      client.admin.paymentCollections.update(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminPaymentCollectionQueryKeys.detail(id),\n        adminPaymentCollectionQueryKeys.lists(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminMarkPaymentCollectionAsAuthorized = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPaymentCollectionsRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.paymentCollections.markAsAuthorized(id),\n    buildOptions(\n      queryClient,\n      [\n        adminPaymentCollectionQueryKeys.detail(id),\n        adminPaymentCollectionQueryKeys.lists(),\n      ],\n      options\n    )\n  )\n}\n", "import { AdminPaymentRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst PAYMENT_QUERY_KEY = `payment` as const\n\nexport const adminPaymentQueryKeys =\n  queryKeysFactory<typeof PAYMENT_QUERY_KEY>(PAYMENT_QUERY_KEY)\n\ntype AdminPaymentKey = typeof adminPaymentQueryKeys\n\nexport const useAdminPayment = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminPaymentRes>,\n    Error,\n    ReturnType<AdminPaymentKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminPaymentQueryKeys.detail(id),\n    () => client.admin.payments.retrieve(id),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n", "import { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nimport {\n  AdminPaymentRes,\n  AdminPostPaymentRefundsReq,\n  AdminRefundRes,\n} from \"@medusajs/medusa\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminPaymentQueryKeys } from \"./queries\"\n\nexport const useAdminPaymentsCapturePayment = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminPaymentRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.payments.capturePayment(id),\n    buildOptions(\n      queryClient,\n      [adminPaymentQueryKeys.detail(id), adminPaymentQueryKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminPaymentsRefundPayment = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminRefundRes>,\n    Error,\n    AdminPostPaymentRefundsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostPaymentRefundsReq) =>\n      client.admin.payments.refundPayment(id, payload),\n    buildOptions(\n      queryClient,\n      [adminPaymentQueryKeys.detail(id), adminPaymentQueryKeys.lists()],\n      options\n    )\n  )\n}\n"],
  "mappings": "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",
  "names": ["i", "i", "l", "a", "b", "v", "h", "i", "e", "i", "i", "l", "c", "require_axios", "require_axios", "import_axios", "attach", "instance", "axios", "interceptors", "response", "use", "onFulfilled", "onError", "onFulfilled", "res", "normalizeArray", "obj", "arr", "Array", "isArray", "Object", "keys", "forEach", "key", "onError", "err", "axios", "isCancel", "Promise", "reject", "config", "getConfig", "currentRetryAttempt", "retry", "retryDelay", "instance", "backoffType", "httpMethodsToRetry", "noResponseRetries", "checkRetryAfter", "maxRetryAfter", "statusCodesToRetry", "raxConfig", "shouldRetry", "shouldRetryRequest", "onBackoffPromise", "resolve", "delay", "response", "headers", "retryAfter", "header", "value", "Number", "isNaN", "dateTime", "Date", "parse", "now", "retrycount", "Math", "pow", "maxRetryDelay", "min", "setTimeout", "onRetryAttemptPromise", "onRetryAttempt", "then", "request", "method", "indexOf", "toUpperCase", "status", "isInRange", "n", "o", "const", "import_qs", "MedusaError", "type", "ErrorType", "MedusaInvalidRequestError", "MedusaAuthenticationError", "MedusaAPIError", "MedusaPermissionError", "MedusaConnectionError", "KeyManager", "key", "key_manager_default", "unAuthenticatedAdminEndpoints", "defaultConfig", "Client", "config", "err", "numRetries", "maxRetries", "obj", "result", "header", "text", "path", "method", "userHeaders", "customHeaders", "defaultHeaders", "publishableApiKey", "uuidv4", "client", "axios", "cfg", "payload", "options", "reqOpts", "data", "response", "request_default", "BaseResource", "AddressesResource", "address_id", "addresses_default", "AuthResource", "email", "auth_default", "LineItemsResource", "cart_id", "line_id", "line_items_default", "CartsResource", "code", "provider_id", "carts_default", "CollectionsResource", "id", "query", "qs", "collections_default", "PaymentMethodsResource", "payment_methods_default", "CustomerResource", "params", "customers_default", "GiftCardsResource", "gift_cards_default", "OrderEditsResource", "order_edits_default", "OrdersResource", "orders_default", "PaymentCollectionsResource", "queryString", "session_id", "payment_collections_default", "ProductCategoriesResource", "product_categories_default", "ProductTagsResource", "product_tags_default", "ProductTypesResource", "product_types_default", "ProductVariantsResource", "product_variants_default", "ProductsResource", "searchOptions", "products_default", "RegionsResource", "regions_default", "ReturnReasonsResource", "return_reasons_default", "ReturnsResource", "returns_default", "ShippingOptionsResource", "shipping_options_default", "SwapsResource", "swaps_default", "AdminAuthResource", "stringifyNullProperties", "input", "convertProperties", "res", "acc", "AdminBatchJobsResource", "batchJobId", "batch_jobs_default", "AdminCollectionsResource", "AdminCurrenciesResource", "currencies_default", "AdminCustomerGroupsResource", "customer_groups_default", "AdminCustomersResource", "AdminDiscountsResource", "regionId", "discountId", "conditionId", "discounts_default", "AdminDraftOrdersResource", "itemId", "draft_orders_default", "AdminGiftCardsResource", "AdminInventoryItemsResource", "inventoryItemId", "locationId", "inventory_item_default", "AdminInvitesResource", "invites_default", "AdminNotesResource", "notes_default", "AdminNotificationsResource", "notifications_default", "AdminOrderEditsResource", "orderEditId", "itemChangeId", "AdminOrdersResource", "fulfillmentId", "swapId", "claimId", "AdminPaymentCollectionsResource", "AdminPaymentsResource", "payments_default", "AdminPriceListResource", "priceListId", "productId", "variantId", "price_lists_default", "AdminProductCategoriesResource", "productCategoryId", "AdminProductTagsResource", "AdminProductTypesResource", "AdminProductsResource", "optionId", "AdminPublishableApiKeyResource", "publishable_api_keys_default", "AdminRegionsResource", "country_code", "AdminReservationsResource", "reservations_default", "AdminReturnReasonsResource", "AdminReturnsResource", "AdminSalesChannelsResource", "salesChannelId", "sales_channels_default", "AdminShippingOptionsResource", "AdminShippingProfilesResource", "shipping_profiles_default", "AdminStockLocationsResource", "stockLocationId", "stock_locations_default", "AdminStoresResource", "currency_code", "store_default", "AdminSwapsResource", "AdminTaxRatesResource", "tax_rates_default", "AdminUploadsResource", "file", "f", "uploads_default", "AdminUsersResource", "users_default", "AdminVariantsResource", "variants_default", "Admin", "Medusa", "src_default", "import_react", "MedusaContext", "React", "useMedusa", "context", "MedusaProvider", "queryClientProviderProps", "baseUrl", "apiKey", "publishableApiKey", "children", "medusaClient", "Medusa", "QueryClientProvider", "isObject", "input", "isArray", "isEmpty", "formatVariantPrice", "variant", "region", "includeTaxes", "rest", "amount", "computeVariantPrice", "convertToLocale", "getVariantPrice", "computeAmount", "_a", "p", "toDecimal", "convertToDecimal", "taxRate", "getTaxRate", "formatAmount", "taxAwareAmount", "noDivisionCurrencies", "divisor", "currency_code", "minimumFractionDigits", "maximumFractionDigits", "locale", "queryKeysFactory", "globalKey", "queryKeyFactory", "query", "id", "useLocalStorage", "key", "initialState", "item", "setItem", "data", "SessionCartContext", "reducer", "state", "action", "generateCartState", "duplicateVariantIndex", "items", "newItems", "generateItems", "sum", "calculateSessionCartTotal", "total", "defaultInitialState", "SessionCartProvider", "saved", "save", "dispatch", "useEffect", "setRegion", "getItem", "setItems", "addItem", "updateItem", "updateItemQuantity", "quantity", "incrementItemQuantity", "decrementItemQuantity", "removeItem", "clearItems", "useSessionCart", "useContext", "CARTS_QUERY_KEY", "cartKeys", "useGetCart", "options", "client", "useQuery", "useCreateCart", "useMutation", "useUpdateCart", "cartId", "useCompleteCart", "useCreatePaymentSession", "useUpdatePaymentSession", "provider_id", "useRefreshPaymentSession", "useSetPaymentSession", "useAddShippingMethodToCart", "useDeletePaymentSession", "useStartCheckout", "cart", "COLLECTIONS_QUERY_KEY", "collectionKeys", "useCollection", "useCollections", "CUSTOMERS_QUERY_KEY", "customerKeys", "useMeCustomer", "useCustomerOrders", "useCreateCustomer", "useUpdateMe", "GIFT_CARDS_QUERY_KEY", "giftCardKeys", "useGiftCard", "useCreateLineItem", "useUpdateLineItem", "lineId", "useDeleteLineItem", "ORDER_EDITS_QUERY_KEY", "orderEditQueryKeys", "useOrderEdit", "buildOptions", "queryClient", "queryKey", "args", "useDeclineOrderEdit", "useQueryClient", "payload", "useCompleteOrderEdit", "ORDERS_QUERY_KEY", "orderKeys", "useOrder", "useCartOrder", "useOrders", "useRequestOrderAccess", "useGrantOrderAccess", "PAYMENT_COLLECTION_QUERY_KEY", "paymentCollectionQueryKeys", "usePaymentCollection", "useManageMultiplePaymentSessions", "useManagePaymentSession", "useAuthorizePaymentSession", "session_id", "useAuthorizePaymentSessionsBatch", "usePaymentCollectionRefreshPaymentSession", "STORE_PRODUCT_CATEGORIES_QUERY_KEY", "storeProductCategoryKeys", "useProductCategories", "useProductCategory", "PRODUCT_TAGS_QUERY_KEY", "productTagKeys", "useProductTags", "PRODUCT_TYPES_QUERY_KEY", "productTypeKeys", "useProductTypes", "PRODUCTS_QUERY_KEY", "productKeys", "useProducts", "useProduct", "REGIONS_QUERY_KEY", "regionsKey", "useRegions", "useRegion", "RETURNS_REASONS_QUERY_KEY", "returnReasonsKey", "useReturnReasons", "useReturnReason", "useCreateReturn", "SHIPPING_OPTION_QUERY_KEY", "shippingOptionKey", "useShippingOptions", "useCartShippingOptions", "SWAPS_QUERY_KEY", "swapKey", "useCartSwap", "useCreateSwap", "CartContext", "useCart", "CartProvider", "setCart", "useState", "createCart", "updateCart", "addShippingMethod", "startCheckout", "pay", "completeCheckout", "totalItems", "i", "acc", "curr", "ADMIN_AUTH_QUERY_KEY", "adminAuthKeys", "useAdminGetSession", "useAdminLogin", "useAdminDeleteSession", "ADMIN_COLLECTIONS_QUERY_KEY", "adminBatchJobsKeys", "useAdminBatchJobs", "useAdminBatchJob", "useAdminCreateBatchJob", "useAdminCancelBatchJob", "useAdminConfirmBatchJob", "ADMIN_PRODUCTS_QUERY_KEY", "adminProductKeys", "useAdminProducts", "useAdminProduct", "useAdminProductTagUsage", "useAdminCreateProduct", "useAdminUpdateProduct", "useAdminDeleteProduct", "useAdminCreateVariant", "productId", "useAdminUpdateVariant", "variant_id", "useAdminDeleteVariant", "variantId", "useAdminCreateProductOption", "useAdminUpdateProductOption", "option_id", "useAdminDeleteProductOption", "optionId", "ADMIN_VARIANT_QUERY_KEY", "adminVariantKeys", "useAdminVariants", "useAdminVariant", "useAdminVariantsInventory", "ADMIN_ORDERS_QUERY_KEY", "adminOrderKeys", "useAdminOrders", "useAdminOrder", "useAdminCreateClaim", "orderId", "useAdminUpdateClaim", "claim_id", "useAdminCancelClaim", "claimId", "useAdminFulfillClaim", "useAdminCancelClaimFulfillment", "fulfillment_id", "useAdminCreateClaimShipment", "adminCollectionKeys", "useAdminCollections", "useAdminCollection", "useAdminCreateCollection", "useAdminUpdateCollection", "useAdminDeleteCollection", "useAdminAddProductsToCollection", "useAdminRemoveProductsFromCollection", "ADMIN_CURRENCIES_QUERY_KEY", "adminCurrenciesKeys", "useAdminCurrencies", "useAdminUpdateCurrency", "code", "ADMIN_CUSTOMER_GROUPS_QUERY_KEY", "adminCustomerGroupKeys", "useAdminCustomerGroup", "useAdminCustomerGroups", "useAdminCustomerGroupCustomers", "useAdminCreateCustomerGroup", "useAdminUpdateCustomerGroup", "useAdminDeleteCustomerGroup", "useAdminAddCustomersToCustomerGroup", "useAdminRemoveCustomersFromCustomerGroup", "ADMIN_CUSTOMERS_QUERY_KEY", "adminCustomerKeys", "useAdminCustomers", "useAdminCustomer", "useAdminCreateCustomer", "useAdminUpdateCustomer", "ADMIN_DISCOUNTS_QUERY_KEY", "adminDiscountKeys", "useAdminDiscounts", "useAdminDiscount", "useAdminGetDiscountByCode", "useAdminGetDiscountCondition", "conditionId", "useAdminAddDiscountConditionResourceBatch", "discountId", "useAdminDeleteDiscountConditionResourceBatch", "useAdminCreateDiscount", "useAdminUpdateDiscount", "useAdminDeleteDiscount", "useAdminDiscountAddRegion", "regionId", "useAdminDiscountRemoveRegion", "useAdminCreateDynamicDiscountCode", "useAdminDeleteDynamicDiscountCode", "useAdminDiscountCreateCondition", "useAdminDiscountUpdateCondition", "useAdminDiscountRemoveCondition", "ADMIN_DRAFT_ORDERS_QUERY_KEY", "adminDraftOrderKeys", "useAdminDraftOrders", "useAdminDraftOrder", "useAdminCreateDraftOrder", "useAdminUpdateDraftOrder", "useAdminDeleteDraftOrder", "useAdminDraftOrderRegisterPayment", "useAdminDraftOrderAddLineItem", "useAdminDraftOrderRemoveLineItem", "itemId", "useAdminDraftOrderUpdateLineItem", "item_id", "ADMIN_GIFT_CARDS_QUERY_KEY", "adminGiftCardKeys", "useAdminGiftCards", "useAdminGiftCard", "useAdminCreateGiftCard", "useAdminUpdateGiftCard", "useAdminDeleteGiftCard", "ADMIN_INVENTORY_ITEMS_QUERY_KEY", "adminInventoryItemsKeys", "useAdminInventoryItems", "useAdminInventoryItem", "inventoryItemId", "useAdminInventoryItemLocationLevels", "useAdminCreateInventoryItem", "useAdminUpdateInventoryItem", "useAdminDeleteInventoryItem", "useAdminUpdateLocationLevel", "useAdminDeleteLocationLevel", "stockLocationId", "useAdminCreateLocationLevel", "ADMIN_INVITES_QUERY_KEY", "adminInviteKeys", "useAdminInvites", "useAdminAcceptInvite", "useAdminResendInvite", "useAdminCreateInvite", "useAdminDeleteInvite", "ADMIN_NOTE_QUERY_KEY", "adminNoteKeys", "useAdminNotes", "useAdminNote", "useAdminCreateNote", "useAdminUpdateNote", "useAdminDeleteNote", "ADMIN_NOTIFICATIONS_QUERY_KEY", "adminNotificationKeys", "useAdminNotifications", "useAdminResendNotification", "useAdminUpdateOrder", "useAdminCancelOrder", "useAdminCompleteOrder", "useAdminCapturePayment", "useAdminRefundPayment", "useAdminCreateFulfillment", "useAdminCancelFulfillment", "fulfillmentId", "useAdminCreateShipment", "useAdminRequestReturn", "useAdminAddShippingMethod", "useAdminArchiveOrder", "ADMIN_ORDER_EDITS_QUERY_KEY", "adminOrderEditsKeys", "useAdminOrderEdit", "useAdminOrderEdits", "useAdminCreateOrderEdit", "useAdminDeleteOrderEdit", "useAdminDeleteOrderEditItemChange", "orderEditId", "itemChangeId", "useAdminOrderEditUpdateLineItem", "useAdminOrderEditDeleteLineItem", "useAdminUpdateOrderEdit", "useAdminOrderEditAddLineItem", "useAdminRequestOrderEditConfirmation", "useAdminCancelOrderEdit", "useAdminConfirmOrderEdit", "ADMIN_PRICE_LISTS_QUERY_KEY", "adminPriceListKeys", "useAdminPriceLists", "useAdminPriceListProducts", "useAdminPriceList", "useAdminCreatePriceList", "useAdminUpdatePriceList", "useAdminDeletePriceList", "useAdminCreatePriceListPrices", "useAdminDeletePriceListPrices", "useAdminDeletePriceListProductPrices", "useAdminDeletePriceListVariantPrices", "ADMIN_PRODUCT_TAGS_QUERY_KEY", "adminProductTagKeys", "useAdminProductTags", "ADMIN_PRODUCT_TYPES_QUERY_KEY", "adminProductTypeKeys", "useAdminProductTypes", "ADMIN_PRODUCT_CATEGORIES_QUERY_KEY", "adminProductCategoryKeys", "useAdminProductCategories", "useAdminProductCategory", "useAdminCreateProductCategory", "useAdminUpdateProductCategory", "useAdminDeleteProductCategory", "useAdminAddProductsToCategory", "useAdminDeleteProductsFromCategory", "ADMIN_PUBLISHABLE_API_KEYS_QUERY_KEY", "adminPublishableApiKeysKeys", "useAdminPublishableApiKey", "useAdminPublishableApiKeys", "useAdminPublishableApiKeySalesChannels", "useAdminCreatePublishableApiKey", "useAdminUpdatePublishableApiKey", "useAdminDeletePublishableApiKey", "useAdminRevokePublishableApiKey", "useAdminAddPublishableKeySalesChannelsBatch", "useAdminRemovePublishableKeySalesChannelsBatch", "ADMIN_REGIONS_QUERY_KEY", "adminRegionKeys", "useAdminRegions", "useAdminRegion", "useAdminRegionFulfillmentOptions", "useAdminCreateRegion", "useAdminUpdateRegion", "useAdminDeleteRegion", "useAdminRegionAddCountry", "useAdminRegionRemoveCountry", "country_code", "useAdminRegionAddFulfillmentProvider", "useAdminRegionDeleteFulfillmentProvider", "useAdminRegionAddPaymentProvider", "useAdminRegionDeletePaymentProvider", "ADMIN_RETURNS_REASONS_QUERY_KEY", "adminReturnReasonKeys", "useAdminReturnReasons", "useAdminReturnReason", "useAdminCreateReturnReason", "useAdminUpdateReturnReason", "useAdminDeleteReturnReason", "ADMIN_RETURNS_QUERY_KEY", "adminReturnKeys", "useAdminReturns", "useAdminReceiveReturn", "useAdminCancelReturn", "ADMIN_RESERVATIONS_QUERY_KEY", "adminReservationsKeys", "useAdminReservations", "useAdminReservation", "useAdminCreateReservation", "useAdminUpdateReservation", "useAdminDeleteReservation", "ADMIN_SALES_CHANNELS_QUERY_KEY", "adminSalesChannelsKeys", "useAdminSalesChannel", "useAdminSalesChannels", "ADMIN_STOCK_LOCATIONS_QUERY_KEY", "adminStockLocationsKeys", "useAdminStockLocations", "useAdminStockLocation", "useAdminCreateStockLocation", "useAdminUpdateStockLocation", "useAdminDeleteStockLocation", "useAdminCreateSalesChannel", "useAdminUpdateSalesChannel", "useAdminDeleteSalesChannel", "useAdminDeleteProductsFromSalesChannel", "useAdminAddProductsToSalesChannel", "useAdminAddLocationToSalesChannel", "sales_channel_id", "location_id", "useAdminRemoveLocationFromSalesChannel", "ADMIN_SHIPPING_OPTIONS_QUERY_KEY", "adminShippingOptionKeys", "useAdminShippingOptions", "useAdminShippingOption", "useAdminCreateShippingOption", "useAdminUpdateShippingOption", "useAdminDeleteShippingOption", "adminShippingProfileKeys", "useAdminShippingProfiles", "useAdminShippingProfile", "useAdminCreateShippingProfile", "useAdminUpdateShippingProfile", "useAdminDeleteShippingProfile", "ADMIN_STORE_QUERY_KEY", "adminStoreKeys", "useAdminStorePaymentProviders", "useAdminStoreTaxProviders", "useAdminStore", "useAdminUpdateStore", "useAdminAddStoreCurrency", "useAdminDeleteStoreCurrency", "ADMIN_SWAPS_QUERY_KEY", "adminSwapKeys", "useAdminSwaps", "useAdminSwap", "useAdminCreateSwap", "useAdminCancelSwap", "swapId", "useAdminFulfillSwap", "swap_id", "useAdminCreateSwapShipment", "useAdminProcessSwapPayment", "useAdminCancelSwapFulfillment", "ADMIN_TAX_RATES_QUERY_KEY", "adminTaxRateKeys", "useAdminTaxRates", "useAdminTaxRate", "useAdminCreateTaxRate", "useAdminUpdateTaxRate", "useAdminDeleteTaxRate", "useAdminCreateProductTaxRates", "useAdminDeleteProductTaxRates", "useAdminCreateProductTypeTaxRates", "useAdminDeleteProductTypeTaxRates", "useAdminCreateShippingTaxRates", "useAdminDeleteShippingTaxRates", "useAdminUploadFile", "useAdminUploadProtectedFile", "useAdminCreatePresignedDownloadUrl", "useAdminDeleteFile", "ADMIN_USERS_QUERY_KEY", "adminUserKeys", "useAdminUsers", "useAdminUser", "useAdminCreateUser", "useAdminUpdateUser", "useAdminDeleteUser", "useAdminResetPassword", "useAdminSendResetPasswordToken", "adminPaymentCollectionQueryKeys", "useAdminPaymentCollection", "useAdminDeletePaymentCollection", "useAdminUpdatePaymentCollection", "useAdminMarkPaymentCollectionAsAuthorized", "PAYMENT_QUERY_KEY", "adminPaymentQueryKeys", "useAdminPayment", "useAdminPaymentsCapturePayment", "useAdminPaymentsRefundPayment"]
}
