import {
  v4_default
} from "./chunk-CYTO6Z7O.js";
import {
  require_side_channel
} from "./chunk-WDYNPGMB.js";
import {
  QueryClientProvider,
  useMutation,
  useQuery,
  useQueryClient
} from "./chunk-TPRD4WUJ.js";
import "./chunk-JZ3YVIXN.js";
import {
  require_react
} from "./chunk-6CE3F7YD.js";
import {
  __commonJS,
  __toESM
} from "./chunk-TFWDKVI3.js";

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/bind.js"(exports, module) {
    "use strict";
    module.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i4 = 0; i4 < args.length; i4++) {
          args[i4] = arguments[i4];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/utils.js
var require_utils = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/utils.js"(exports, module) {
    "use strict";
    var bind = require_bind();
    var toString = Object.prototype.toString;
    function isArray(val) {
      return toString.call(val) === "[object Array]";
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    function isArrayBuffer(val) {
      return toString.call(val) === "[object ArrayBuffer]";
    }
    function isFormData(val) {
      return typeof FormData !== "undefined" && val instanceof FormData;
    }
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && val.buffer instanceof ArrayBuffer;
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (toString.call(val) !== "[object Object]") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    function isDate(val) {
      return toString.call(val) === "[object Date]";
    }
    function isFile(val) {
      return toString.call(val) === "[object File]";
    }
    function isBlob(val) {
      return toString.call(val) === "[object Blob]";
    }
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isURLSearchParams(val) {
      return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
    }
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i4 = 0, l3 = obj.length; i4 < l3; i4++) {
          fn.call(null, obj[i4], i4, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i4 = 0, l3 = arguments.length; i4 < l3; i4++) {
        forEach(arguments[i4], assignValue);
      }
      return result;
    }
    function extend(a2, b2, thisArg) {
      forEach(b2, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a2[key] = bind(val, thisArg);
        } else {
          a2[key] = val;
        }
      });
      return a2;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    module.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/buildURL.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v2) {
            if (utils.isDate(v2)) {
              v2 = v2.toISOString();
            } else if (utils.isObject(v2)) {
              v2 = JSON.stringify(v2);
            }
            parts.push(encode(key) + "=" + encode(v2));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/InterceptorManager.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h2) {
        if (h2 !== null) {
          fn(h2);
        }
      });
    };
    module.exports = InterceptorManager;
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/enhanceError.js
var require_enhanceError = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/enhanceError.js"(exports, module) {
    "use strict";
    module.exports = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }
      error.request = request;
      error.response = response;
      error.isAxiosError = true;
      error.toJSON = function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      };
      return error;
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/createError.js
var require_createError = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/createError.js"(exports, module) {
    "use strict";
    var enhanceError = require_enhanceError();
    module.exports = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/settle.js"(exports, module) {
    "use strict";
    var createError = require_createError();
    module.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError(
          "Request failed with status code " + response.status,
          response.config,
          null,
          response.request,
          response
        ));
      }
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/cookies.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs support document.cookie
      function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) {
              cookie.push("expires=" + new Date(expires).toGMTString());
            }
            if (utils.isString(path)) {
              cookie.push("path=" + path);
            }
            if (utils.isString(domain)) {
              cookie.push("domain=" + domain);
            }
            if (secure === true) {
              cookie.push("secure");
            }
            document.cookie = cookie.join("; ");
          },
          read: function read(name) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
          },
          remove: function remove(name) {
            this.write(name, "", Date.now() - 864e5);
          }
        };
      }()
    ) : (
      // Non standard browser env (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return {
          write: function write() {
          },
          read: function read() {
            return null;
          },
          remove: function remove() {
          }
        };
      }()
    );
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module) {
    "use strict";
    module.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/combineURLs.js"(exports, module) {
    "use strict";
    module.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/buildFullPath.js"(exports, module) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/parseHeaders.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i4;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i4 = line.indexOf(":");
        key = utils.trim(line.substr(0, i4)).toLowerCase();
        val = utils.trim(line.substr(i4 + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv() {
        var msie = /(msie|trident)/i.test(navigator.userAgent);
        var urlParsingNode = document.createElement("a");
        var originURL;
        function resolveURL(url) {
          var href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin(requestURL) {
          var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      }()
    );
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/cancel/Cancel.js
var require_Cancel = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/cancel/Cancel.js"(exports, module) {
    "use strict";
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module.exports = Cancel;
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/adapters/xhr.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var createError = require_createError();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    module.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData)) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(createError("Request aborted", config, "ECONNABORTED", request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(createError("Network Error", config, null, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          var transitional = config.transitional || defaults.transitional;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError(
            timeoutErrorMessage,
            config,
            transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED",
            request
          ));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken || config.signal) {
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || cancel && cancel.type ? new Cancel("canceled") : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/defaults.js
var require_defaults = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/defaults.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var normalizeHeaderName = require_normalizeHeaderName();
    var enhanceError = require_enhanceError();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_xhr();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e2) {
          if (e2.name !== "SyntaxError") {
            throw e2;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        if (utils.isObject(data) || headers && headers["Content-Type"] === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
          try {
            return JSON.parse(data);
          } catch (e2) {
            if (strictJSONParsing) {
              if (e2.name === "SyntaxError") {
                throw enhanceError(e2, this, "E_JSON_PARSE");
              }
              throw e2;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module.exports = defaults;
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/transformData.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var defaults = require_defaults();
    module.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });
      return data;
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/cancel/isCancel.js"(exports, module) {
    "use strict";
    module.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/dispatchRequest.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new Cancel("canceled");
      }
    }
    module.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );
      utils.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/mergeConfig.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        }
      }
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
      };
      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/env/data.js
var require_data = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/env/data.js"(exports, module) {
    module.exports = {
      "version": "0.24.0"
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/validator.js"(exports, module) {
    "use strict";
    var VERSION = require_data().version;
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i4) {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i4 < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (validator === false) {
          throw new Error(formatMessage(opt, " has been removed" + (version ? " in " + version : "")));
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new TypeError("options must be an object");
      }
      var keys = Object.keys(options);
      var i4 = keys.length;
      while (i4-- > 0) {
        var opt = keys[i4];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === void 0 || validator(value, opt, options);
          if (result !== true) {
            throw new TypeError("option " + opt + " must be " + result);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw Error("Unknown option " + opt);
        }
      }
    }
    module.exports = {
      assertOptions,
      validators
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/Axios.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var validator = require_validator();
    var validators = validator.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(config) {
      if (typeof config === "string") {
        config = arguments[1] || {};
        config.url = arguments[0];
      } else {
        config = config || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data
        }));
      };
    });
    module.exports = Axios;
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/cancel/CancelToken.js"(exports, module) {
    "use strict";
    var Cancel = require_Cancel();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      this.promise.then(function(cancel) {
        if (!token._listeners)
          return;
        var i4;
        var l3 = token._listeners.length;
        for (i4 = 0; i4 < l3; i4++) {
          token._listeners[i4](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c3) {
        cancel = c3;
      });
      return {
        token,
        cancel
      };
    };
    module.exports = CancelToken;
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/spread.js"(exports, module) {
    "use strict";
    module.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/isAxiosError.js"(exports, module) {
    "use strict";
    module.exports = function isAxiosError(payload) {
      return typeof payload === "object" && payload.isAxiosError === true;
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/axios.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults);
    axios.Axios = Axios;
    axios.Cancel = require_Cancel();
    axios.CancelToken = require_CancelToken();
    axios.isCancel = require_isCancel();
    axios.VERSION = require_data().version;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = require_spread();
    axios.isAxiosError = require_isAxiosError();
    module.exports = axios;
    module.exports.default = axios;
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/index.js"(exports, module) {
    module.exports = require_axios();
  }
});

// node_modules/@medusajs/medusa-js/node_modules/qs/lib/formats.js
var require_formats = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/qs/lib/formats.js"(exports, module) {
    "use strict";
    var replace = String.prototype.replace;
    var percentTwenties = /%20/g;
    var Format = {
      RFC1738: "RFC1738",
      RFC3986: "RFC3986"
    };
    module.exports = {
      "default": Format.RFC3986,
      formatters: {
        RFC1738: function(value) {
          return replace.call(value, percentTwenties, "+");
        },
        RFC3986: function(value) {
          return String(value);
        }
      },
      RFC1738: Format.RFC1738,
      RFC3986: Format.RFC3986
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/qs/lib/utils.js
var require_utils2 = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/qs/lib/utils.js"(exports, module) {
    "use strict";
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var hexTable = function() {
      var array = [];
      for (var i4 = 0; i4 < 256; ++i4) {
        array.push("%" + ((i4 < 16 ? "0" : "") + i4.toString(16)).toUpperCase());
      }
      return array;
    }();
    var compactQueue = function compactQueue2(queue) {
      while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];
        if (isArray(obj)) {
          var compacted = [];
          for (var j3 = 0; j3 < obj.length; ++j3) {
            if (typeof obj[j3] !== "undefined") {
              compacted.push(obj[j3]);
            }
          }
          item.obj[item.prop] = compacted;
        }
      }
    };
    var arrayToObject = function arrayToObject2(source, options) {
      var obj = options && options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      for (var i4 = 0; i4 < source.length; ++i4) {
        if (typeof source[i4] !== "undefined") {
          obj[i4] = source[i4];
        }
      }
      return obj;
    };
    var merge = function merge2(target, source, options) {
      if (!source) {
        return target;
      }
      if (typeof source !== "object") {
        if (isArray(target)) {
          target.push(source);
        } else if (target && typeof target === "object") {
          if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
            target[source] = true;
          }
        } else {
          return [target, source];
        }
        return target;
      }
      if (!target || typeof target !== "object") {
        return [target].concat(source);
      }
      var mergeTarget = target;
      if (isArray(target) && !isArray(source)) {
        mergeTarget = arrayToObject(target, options);
      }
      if (isArray(target) && isArray(source)) {
        source.forEach(function(item, i4) {
          if (has.call(target, i4)) {
            var targetItem = target[i4];
            if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
              target[i4] = merge2(targetItem, item, options);
            } else {
              target.push(item);
            }
          } else {
            target[i4] = item;
          }
        });
        return target;
      }
      return Object.keys(source).reduce(function(acc, key) {
        var value = source[key];
        if (has.call(acc, key)) {
          acc[key] = merge2(acc[key], value, options);
        } else {
          acc[key] = value;
        }
        return acc;
      }, mergeTarget);
    };
    var assign = function assignSingleSource(target, source) {
      return Object.keys(source).reduce(function(acc, key) {
        acc[key] = source[key];
        return acc;
      }, target);
    };
    var decode = function(str, decoder, charset) {
      var strWithoutPlus = str.replace(/\+/g, " ");
      if (charset === "iso-8859-1") {
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
      }
      try {
        return decodeURIComponent(strWithoutPlus);
      } catch (e2) {
        return strWithoutPlus;
      }
    };
    var encode = function encode2(str, defaultEncoder, charset, kind, format) {
      if (str.length === 0) {
        return str;
      }
      var string = str;
      if (typeof str === "symbol") {
        string = Symbol.prototype.toString.call(str);
      } else if (typeof str !== "string") {
        string = String(str);
      }
      if (charset === "iso-8859-1") {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
          return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
        });
      }
      var out = "";
      for (var i4 = 0; i4 < string.length; ++i4) {
        var c3 = string.charCodeAt(i4);
        if (c3 === 45 || c3 === 46 || c3 === 95 || c3 === 126 || c3 >= 48 && c3 <= 57 || c3 >= 65 && c3 <= 90 || c3 >= 97 && c3 <= 122 || format === formats.RFC1738 && (c3 === 40 || c3 === 41)) {
          out += string.charAt(i4);
          continue;
        }
        if (c3 < 128) {
          out = out + hexTable[c3];
          continue;
        }
        if (c3 < 2048) {
          out = out + (hexTable[192 | c3 >> 6] + hexTable[128 | c3 & 63]);
          continue;
        }
        if (c3 < 55296 || c3 >= 57344) {
          out = out + (hexTable[224 | c3 >> 12] + hexTable[128 | c3 >> 6 & 63] + hexTable[128 | c3 & 63]);
          continue;
        }
        i4 += 1;
        c3 = 65536 + ((c3 & 1023) << 10 | string.charCodeAt(i4) & 1023);
        out += hexTable[240 | c3 >> 18] + hexTable[128 | c3 >> 12 & 63] + hexTable[128 | c3 >> 6 & 63] + hexTable[128 | c3 & 63];
      }
      return out;
    };
    var compact = function compact2(value) {
      var queue = [{ obj: { o: value }, prop: "o" }];
      var refs = [];
      for (var i4 = 0; i4 < queue.length; ++i4) {
        var item = queue[i4];
        var obj = item.obj[item.prop];
        var keys = Object.keys(obj);
        for (var j3 = 0; j3 < keys.length; ++j3) {
          var key = keys[j3];
          var val = obj[key];
          if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
            queue.push({ obj, prop: key });
            refs.push(val);
          }
        }
      }
      compactQueue(queue);
      return value;
    };
    var isRegExp = function isRegExp2(obj) {
      return Object.prototype.toString.call(obj) === "[object RegExp]";
    };
    var isBuffer = function isBuffer2(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
    };
    var combine = function combine2(a2, b2) {
      return [].concat(a2, b2);
    };
    var maybeMap = function maybeMap2(val, fn) {
      if (isArray(val)) {
        var mapped = [];
        for (var i4 = 0; i4 < val.length; i4 += 1) {
          mapped.push(fn(val[i4]));
        }
        return mapped;
      }
      return fn(val);
    };
    module.exports = {
      arrayToObject,
      assign,
      combine,
      compact,
      decode,
      encode,
      isBuffer,
      isRegExp,
      maybeMap,
      merge
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/qs/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/qs/lib/stringify.js"(exports, module) {
    "use strict";
    var getSideChannel = require_side_channel();
    var utils = require_utils2();
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var arrayPrefixGenerators = {
      brackets: function brackets(prefix) {
        return prefix + "[]";
      },
      comma: "comma",
      indices: function indices(prefix, key) {
        return prefix + "[" + key + "]";
      },
      repeat: function repeat(prefix) {
        return prefix;
      }
    };
    var isArray = Array.isArray;
    var push = Array.prototype.push;
    var pushToArray = function(arr, valueOrArray) {
      push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
    };
    var toISO = Date.prototype.toISOString;
    var defaultFormat = formats["default"];
    var defaults = {
      addQueryPrefix: false,
      allowDots: false,
      charset: "utf-8",
      charsetSentinel: false,
      delimiter: "&",
      encode: true,
      encoder: utils.encode,
      encodeValuesOnly: false,
      format: defaultFormat,
      formatter: formats.formatters[defaultFormat],
      // deprecated
      indices: false,
      serializeDate: function serializeDate(date) {
        return toISO.call(date);
      },
      skipNulls: false,
      strictNullHandling: false
    };
    var isNonNullishPrimitive = function isNonNullishPrimitive2(v2) {
      return typeof v2 === "string" || typeof v2 === "number" || typeof v2 === "boolean" || typeof v2 === "symbol" || typeof v2 === "bigint";
    };
    var sentinel = {};
    var stringify = function stringify2(object, prefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
      var obj = object;
      var tmpSc = sideChannel;
      var step = 0;
      var findFlag = false;
      while ((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag) {
        var pos = tmpSc.get(object);
        step += 1;
        if (typeof pos !== "undefined") {
          if (pos === step) {
            throw new RangeError("Cyclic object value");
          } else {
            findFlag = true;
          }
        }
        if (typeof tmpSc.get(sentinel) === "undefined") {
          step = 0;
        }
      }
      if (typeof filter === "function") {
        obj = filter(prefix, obj);
      } else if (obj instanceof Date) {
        obj = serializeDate(obj);
      } else if (generateArrayPrefix === "comma" && isArray(obj)) {
        obj = utils.maybeMap(obj, function(value2) {
          if (value2 instanceof Date) {
            return serializeDate(value2);
          }
          return value2;
        });
      }
      if (obj === null) {
        if (strictNullHandling) {
          return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format) : prefix;
        }
        obj = "";
      }
      if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
          var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format);
          return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format))];
        }
        return [formatter(prefix) + "=" + formatter(String(obj))];
      }
      var values = [];
      if (typeof obj === "undefined") {
        return values;
      }
      var objKeys;
      if (generateArrayPrefix === "comma" && isArray(obj)) {
        if (encodeValuesOnly && encoder) {
          obj = utils.maybeMap(obj, encoder);
        }
        objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
      } else if (isArray(filter)) {
        objKeys = filter;
      } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
      }
      var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? prefix + "[]" : prefix;
      for (var j3 = 0; j3 < objKeys.length; ++j3) {
        var key = objKeys[j3];
        var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
        if (skipNulls && value === null) {
          continue;
        }
        var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + key : "[" + key + "]");
        sideChannel.set(object, step);
        var valueSideChannel = getSideChannel();
        valueSideChannel.set(sentinel, sideChannel);
        pushToArray(values, stringify2(
          value,
          keyPrefix,
          generateArrayPrefix,
          commaRoundTrip,
          strictNullHandling,
          skipNulls,
          generateArrayPrefix === "comma" && encodeValuesOnly && isArray(obj) ? null : encoder,
          filter,
          sort,
          allowDots,
          serializeDate,
          format,
          formatter,
          encodeValuesOnly,
          charset,
          valueSideChannel
        ));
      }
      return values;
    };
    var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
        throw new TypeError("Encoder has to be a function.");
      }
      var charset = opts.charset || defaults.charset;
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var format = formats["default"];
      if (typeof opts.format !== "undefined") {
        if (!has.call(formats.formatters, opts.format)) {
          throw new TypeError("Unknown format option provided.");
        }
        format = opts.format;
      }
      var formatter = formats.formatters[format];
      var filter = defaults.filter;
      if (typeof opts.filter === "function" || isArray(opts.filter)) {
        filter = opts.filter;
      }
      return {
        addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
        encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter,
        format,
        formatter,
        serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === "function" ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module.exports = function(object, opts) {
      var obj = object;
      var options = normalizeStringifyOptions(opts);
      var objKeys;
      var filter;
      if (typeof options.filter === "function") {
        filter = options.filter;
        obj = filter("", obj);
      } else if (isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
      }
      var keys = [];
      if (typeof obj !== "object" || obj === null) {
        return "";
      }
      var arrayFormat;
      if (opts && opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
      } else if (opts && "indices" in opts) {
        arrayFormat = opts.indices ? "indices" : "repeat";
      } else {
        arrayFormat = "indices";
      }
      var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
      if (opts && "commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") {
        throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
      }
      var commaRoundTrip = generateArrayPrefix === "comma" && opts && opts.commaRoundTrip;
      if (!objKeys) {
        objKeys = Object.keys(obj);
      }
      if (options.sort) {
        objKeys.sort(options.sort);
      }
      var sideChannel = getSideChannel();
      for (var i4 = 0; i4 < objKeys.length; ++i4) {
        var key = objKeys[i4];
        if (options.skipNulls && obj[key] === null) {
          continue;
        }
        pushToArray(keys, stringify(
          obj[key],
          key,
          generateArrayPrefix,
          commaRoundTrip,
          options.strictNullHandling,
          options.skipNulls,
          options.encode ? options.encoder : null,
          options.filter,
          options.sort,
          options.allowDots,
          options.serializeDate,
          options.format,
          options.formatter,
          options.encodeValuesOnly,
          options.charset,
          sideChannel
        ));
      }
      var joined = keys.join(options.delimiter);
      var prefix = options.addQueryPrefix === true ? "?" : "";
      if (options.charsetSentinel) {
        if (options.charset === "iso-8859-1") {
          prefix += "utf8=%26%2310003%3B&";
        } else {
          prefix += "utf8=%E2%9C%93&";
        }
      }
      return joined.length > 0 ? prefix + joined : "";
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/qs/lib/parse.js
var require_parse = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/qs/lib/parse.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var defaults = {
      allowDots: false,
      allowPrototypes: false,
      allowSparse: false,
      arrayLimit: 20,
      charset: "utf-8",
      charsetSentinel: false,
      comma: false,
      decoder: utils.decode,
      delimiter: "&",
      depth: 5,
      ignoreQueryPrefix: false,
      interpretNumericEntities: false,
      parameterLimit: 1e3,
      parseArrays: true,
      plainObjects: false,
      strictNullHandling: false
    };
    var interpretNumericEntities = function(str) {
      return str.replace(/&#(\d+);/g, function($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
      });
    };
    var parseArrayValue = function(val, options) {
      if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
        return val.split(",");
      }
      return val;
    };
    var isoSentinel = "utf8=%26%2310003%3B";
    var charsetSentinel = "utf8=%E2%9C%93";
    var parseValues = function parseQueryStringValues(str, options) {
      var obj = { __proto__: null };
      var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
      var limit = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
      var parts = cleanStr.split(options.delimiter, limit);
      var skipIndex = -1;
      var i4;
      var charset = options.charset;
      if (options.charsetSentinel) {
        for (i4 = 0; i4 < parts.length; ++i4) {
          if (parts[i4].indexOf("utf8=") === 0) {
            if (parts[i4] === charsetSentinel) {
              charset = "utf-8";
            } else if (parts[i4] === isoSentinel) {
              charset = "iso-8859-1";
            }
            skipIndex = i4;
            i4 = parts.length;
          }
        }
      }
      for (i4 = 0; i4 < parts.length; ++i4) {
        if (i4 === skipIndex) {
          continue;
        }
        var part = parts[i4];
        var bracketEqualsPos = part.indexOf("]=");
        var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
        var key, val;
        if (pos === -1) {
          key = options.decoder(part, defaults.decoder, charset, "key");
          val = options.strictNullHandling ? null : "";
        } else {
          key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
          val = utils.maybeMap(
            parseArrayValue(part.slice(pos + 1), options),
            function(encodedVal) {
              return options.decoder(encodedVal, defaults.decoder, charset, "value");
            }
          );
        }
        if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
          val = interpretNumericEntities(val);
        }
        if (part.indexOf("[]=") > -1) {
          val = isArray(val) ? [val] : val;
        }
        if (has.call(obj, key)) {
          obj[key] = utils.combine(obj[key], val);
        } else {
          obj[key] = val;
        }
      }
      return obj;
    };
    var parseObject = function(chain, val, options, valuesParsed) {
      var leaf = valuesParsed ? val : parseArrayValue(val, options);
      for (var i4 = chain.length - 1; i4 >= 0; --i4) {
        var obj;
        var root = chain[i4];
        if (root === "[]" && options.parseArrays) {
          obj = [].concat(leaf);
        } else {
          obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
          var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
          var index = parseInt(cleanRoot, 10);
          if (!options.parseArrays && cleanRoot === "") {
            obj = { 0: leaf };
          } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
            obj = [];
            obj[index] = leaf;
          } else if (cleanRoot !== "__proto__") {
            obj[cleanRoot] = leaf;
          }
        }
        leaf = obj;
      }
      return leaf;
    };
    var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
      if (!givenKey) {
        return;
      }
      var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
      var brackets = /(\[[^[\]]*])/;
      var child = /(\[[^[\]]*])/g;
      var segment = options.depth > 0 && brackets.exec(key);
      var parent = segment ? key.slice(0, segment.index) : key;
      var keys = [];
      if (parent) {
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(parent);
      }
      var i4 = 0;
      while (options.depth > 0 && (segment = child.exec(key)) !== null && i4 < options.depth) {
        i4 += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(segment[1]);
      }
      if (segment) {
        keys.push("[" + key.slice(segment.index) + "]");
      }
      return parseObject(keys, val, options, valuesParsed);
    };
    var normalizeParseOptions = function normalizeParseOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (opts.decoder !== null && opts.decoder !== void 0 && typeof opts.decoder !== "function") {
        throw new TypeError("Decoder has to be a function.");
      }
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
      return {
        allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
        allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
        allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
        arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
        decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module.exports = function(str, opts) {
      var options = normalizeParseOptions(opts);
      if (str === "" || str === null || typeof str === "undefined") {
        return options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      }
      var tempObj = typeof str === "string" ? parseValues(str, options) : str;
      var obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      var keys = Object.keys(tempObj);
      for (var i4 = 0; i4 < keys.length; ++i4) {
        var key = keys[i4];
        var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
        obj = utils.merge(obj, newObj, options);
      }
      if (options.allowSparse === true) {
        return obj;
      }
      return utils.compact(obj);
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/qs/lib/index.js
var require_lib = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/qs/lib/index.js"(exports, module) {
    "use strict";
    var stringify = require_stringify();
    var parse = require_parse();
    var formats = require_formats();
    module.exports = {
      formats,
      parse,
      stringify
    };
  }
});

// node_modules/@medusajs/medusa-js/dist/index.mjs
var import_axios2 = __toESM(require_axios2(), 1);

// node_modules/@medusajs/medusa-js/node_modules/retry-axios/dist/index.module.js
var import_axios = __toESM(require_axios2());
function r(r2) {
  return (r2 = r2 || import_axios.default).interceptors.response.use(n, s);
}
function n(e2) {
  return e2;
}
function o(e2) {
  var r2 = [];
  if (e2)
    return Array.isArray(e2) ? e2 : ("object" == typeof e2 && Object.keys(e2).forEach(function(t) {
      "number" == typeof t && (r2[t] = e2[t]);
    }), r2);
}
function s(r2) {
  if (import_axios.default.isCancel(r2))
    return Promise.reject(r2);
  var t = i(r2) || {};
  if (t.currentRetryAttempt = t.currentRetryAttempt || 0, t.retry = "number" == typeof t.retry ? t.retry : 3, t.retryDelay = "number" == typeof t.retryDelay ? t.retryDelay : 100, t.instance = t.instance || import_axios.default, t.backoffType = t.backoffType || "exponential", t.httpMethodsToRetry = o(t.httpMethodsToRetry) || ["GET", "HEAD", "PUT", "OPTIONS", "DELETE"], t.noResponseRetries = "number" == typeof t.noResponseRetries ? t.noResponseRetries : 2, t.checkRetryAfter = "boolean" != typeof t.checkRetryAfter || t.checkRetryAfter, t.maxRetryAfter = "number" == typeof t.maxRetryAfter ? t.maxRetryAfter : 3e5, t.statusCodesToRetry = o(t.statusCodesToRetry) || [[100, 199], [429, 429], [500, 599]], r2.config = r2.config || {}, r2.config.raxConfig = Object.assign({}, t), !(t.shouldRetry || f)(r2))
    return Promise.reject(r2);
  var n3 = new Promise(function(e2, n4) {
    var o2 = 0;
    if (t.checkRetryAfter && r2.response && r2.response.headers["retry-after"]) {
      var s3 = function(e3) {
        var r3 = Number(e3);
        if (!Number.isNaN(r3))
          return 1e3 * r3;
        var t2 = Date.parse(e3);
        return Number.isNaN(t2) ? void 0 : t2 - Date.now();
      }(r2.response.headers["retry-after"]);
      if (!(s3 && s3 > 0 && s3 <= t.maxRetryAfter))
        return n4(r2);
      o2 = s3;
    }
    r2.config.raxConfig.currentRetryAttempt += 1;
    var f4 = r2.config.raxConfig.currentRetryAttempt;
    0 === o2 && (o2 = "linear" === t.backoffType ? 1e3 * f4 : "static" === t.backoffType ? t.retryDelay : (Math.pow(2, f4) - 1) / 2 * 1e3, "number" == typeof t.maxRetryDelay && (o2 = Math.min(o2, t.maxRetryDelay))), setTimeout(e2, o2);
  }), s2 = t.onRetryAttempt ? Promise.resolve(t.onRetryAttempt(r2)) : Promise.resolve();
  return Promise.resolve().then(function() {
    return n3;
  }).then(function() {
    return s2;
  }).then(function() {
    return t.instance.request(r2.config);
  });
}
function f(e2) {
  var r2 = e2.config.raxConfig;
  if (!r2 || 0 === r2.retry)
    return false;
  if (!e2.response && (r2.currentRetryAttempt || 0) >= r2.noResponseRetries)
    return false;
  if (!e2.config.method || r2.httpMethodsToRetry.indexOf(e2.config.method.toUpperCase()) < 0)
    return false;
  if (e2.response && e2.response.status) {
    for (var t = false, n3 = 0, o2 = r2.statusCodesToRetry; n3 < o2.length; n3 += 1) {
      var s2 = o2[n3], f4 = e2.response.status;
      if (f4 >= s2[0] && f4 <= s2[1]) {
        t = true;
        break;
      }
    }
    if (!t)
      return false;
  }
  return r2.currentRetryAttempt = r2.currentRetryAttempt || 0, !(r2.currentRetryAttempt >= r2.retry);
}
function i(e2) {
  if (e2 && e2.config)
    return e2.config.raxConfig;
}

// node_modules/@medusajs/medusa-js/dist/index.mjs
var import_qs = __toESM(require_lib(), 1);
var import_qs2 = __toESM(require_lib(), 1);
var import_qs3 = __toESM(require_lib(), 1);
var import_qs4 = __toESM(require_lib(), 1);
var import_qs5 = __toESM(require_lib(), 1);
var import_qs6 = __toESM(require_lib(), 1);
var import_qs7 = __toESM(require_lib(), 1);
var import_qs8 = __toESM(require_lib(), 1);
var import_qs9 = __toESM(require_lib(), 1);
var import_qs10 = __toESM(require_lib(), 1);
var import_qs11 = __toESM(require_lib(), 1);
var import_qs12 = __toESM(require_lib(), 1);
var import_qs13 = __toESM(require_lib(), 1);
var import_qs14 = __toESM(require_lib(), 1);
var import_qs15 = __toESM(require_lib(), 1);
var import_qs16 = __toESM(require_lib(), 1);
var import_qs17 = __toESM(require_lib(), 1);
var import_qs18 = __toESM(require_lib(), 1);
var import_qs19 = __toESM(require_lib(), 1);
var import_qs20 = __toESM(require_lib(), 1);
var import_qs21 = __toESM(require_lib(), 1);
var import_qs22 = __toESM(require_lib(), 1);
var import_qs23 = __toESM(require_lib(), 1);
var import_qs24 = __toESM(require_lib(), 1);
var import_qs25 = __toESM(require_lib(), 1);
var import_qs26 = __toESM(require_lib(), 1);
var import_qs27 = __toESM(require_lib(), 1);
var import_qs28 = __toESM(require_lib(), 1);
var import_qs29 = __toESM(require_lib(), 1);
var import_qs30 = __toESM(require_lib(), 1);
var import_qs31 = __toESM(require_lib(), 1);
var import_qs32 = __toESM(require_lib(), 1);
var import_qs33 = __toESM(require_lib(), 1);
var import_qs34 = __toESM(require_lib(), 1);
var import_qs35 = __toESM(require_lib(), 1);
var import_qs36 = __toESM(require_lib(), 1);
var import_qs37 = __toESM(require_lib(), 1);
var import_qs38 = __toESM(require_lib(), 1);
var import_qs39 = __toESM(require_lib(), 1);
var import_qs40 = __toESM(require_lib(), 1);
var d = class extends Error {
  constructor() {
    super();
  }
  static factory(s2) {
    switch (s2) {
      case p.INVALID_REQUEST:
        return new f2();
      case p.AUTHENTICATION:
        return new y();
      case p.API:
        return new A();
      case p.PERMISSION:
        return new q();
      case p.CONNECTION:
        return new S();
    }
  }
};
var p = ((n3) => (n3[n3.INVALID_REQUEST = 0] = "INVALID_REQUEST", n3[n3.API = 1] = "API", n3[n3.AUTHENTICATION = 2] = "AUTHENTICATION", n3[n3.PERMISSION = 3] = "PERMISSION", n3[n3.CONNECTION = 4] = "CONNECTION", n3))(p || {});
var f2 = class extends d {
};
var A = class extends d {
};
var y = class extends d {
};
var q = class extends d {
};
var S = class extends d {
};
var C = class {
  constructor() {
    this.publishableApiKey = null;
  }
  registerPublishableApiKey(s2) {
    this.publishableApiKey = s2;
  }
  getPublishableApiKey() {
    return this.publishableApiKey;
  }
};
var R = new C();
var Js = { "/admin/auth": "POST", "/admin/users/password-token": "POST", "/admin/users/reset-password": "POST", "/admin/invites/accept": "POST" };
var Ye = { maxRetries: 0, baseUrl: "http://localhost:9000" };
var T = class {
  constructor(s2) {
    this.axiosClient = this.createClient({ ...Ye, ...s2 }), this.config = { ...Ye, ...s2 };
  }
  shouldRetryCondition(s2, e2, t) {
    return e2 >= t ? false : !s2.response || s2.response.status === 409 || s2.response.status > 500 && s2.response.status <= 599;
  }
  normalizeHeaders(s2) {
    return s2 && typeof s2 == "object" ? Object.keys(s2).reduce((e2, t) => (e2[this.normalizeHeader(t)] = s2[t], e2), {}) : s2;
  }
  normalizeHeader(s2) {
    return s2.split("-").map((e2) => e2.charAt(0).toUpperCase() + e2.substr(1).toLowerCase()).join("-");
  }
  requiresAuthentication(s2, e2) {
    return s2.startsWith("/admin") && Js[s2] !== e2;
  }
  setHeaders(s2, e2, t, r2 = {}) {
    let n3 = { Accept: "application/json", "Content-Type": "application/json" };
    this.config.apiKey && this.requiresAuthentication(t, e2) && (n3 = { ...n3, Authorization: `Bearer ${this.config.apiKey}` });
    let a2 = this.config.publishableApiKey || R.getPublishableApiKey();
    return a2 && (n3["x-publishable-api-key"] = a2), this.config.maxRetries > 0 && e2 === "POST" && (n3["Idempotency-Key"] = v4_default()), Object.assign({}, n3, this.normalizeHeaders(s2), r2);
  }
  createClient(s2) {
    let e2 = import_axios2.default.create({ baseURL: s2.baseUrl });
    return r(e2), e2.defaults.raxConfig = { instance: e2, retry: s2.maxRetries, backoffType: "exponential", shouldRetry: (t) => {
      let r2 = i(t);
      return r2 ? this.shouldRetryCondition(t, r2.currentRetryAttempt ?? 1, r2.retry ?? 3) : false;
    } }, e2;
  }
  async request(s2, e2, t = {}, r2 = {}, n3 = {}) {
    let a2 = { method: s2, withCredentials: true, url: e2, json: true, headers: this.setHeaders(r2, s2, e2, n3) };
    ["POST", "DELETE"].includes(s2) && (a2.data = t);
    let { data: u, ...zs2 } = await this.axiosClient(a2);
    return { ...u, response: zs2 };
  }
};
var O = T;
var i2 = class {
  constructor(s2) {
    this.client = s2;
  }
};
var $ = class extends i2 {
  addAddress(s2, e2 = {}) {
    let t = "/store/customers/me/addresses";
    return this.client.request("POST", t, s2, {}, e2);
  }
  deleteAddress(s2, e2 = {}) {
    let t = `/store/customers/me/addresses/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  updateAddress(s2, e2, t = {}) {
    let r2 = `/store/customers/me/addresses/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
};
var E = $;
var G = class extends i2 {
  authenticate(s2, e2 = {}) {
    let t = "/store/auth";
    return this.client.request("POST", t, s2, {}, e2);
  }
  deleteSession(s2 = {}) {
    let e2 = "/store/auth";
    return this.client.request("DELETE", e2, {}, {}, s2);
  }
  getSession(s2 = {}) {
    let e2 = "/store/auth";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
  exists(s2, e2 = {}) {
    let t = `/store/auth/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
};
var x = G;
var L = class extends i2 {
  create(s2, e2, t = {}) {
    let r2 = `/store/carts/${s2}/line-items`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  update(s2, e2, t, r2 = {}) {
    let n3 = `/store/carts/${s2}/line-items/${e2}`;
    return this.client.request("POST", n3, t, {}, r2);
  }
  delete(s2, e2, t = {}) {
    let r2 = `/store/carts/${s2}/line-items/${e2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
};
var D = L;
var b = class extends i2 {
  constructor() {
    super(...arguments);
    this.lineItems = new D(this.client);
  }
  addShippingMethod(e2, t, r2 = {}) {
    let n3 = `/store/carts/${e2}/shipping-methods`;
    return this.client.request("POST", n3, t, {}, r2);
  }
  complete(e2, t = {}) {
    let r2 = `/store/carts/${e2}/complete`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
  create(e2, t = {}) {
    let r2 = "/store/carts";
    return this.client.request("POST", r2, e2, {}, t);
  }
  createPaymentSessions(e2, t = {}) {
    let r2 = `/store/carts/${e2}/payment-sessions`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
  deleteDiscount(e2, t, r2 = {}) {
    let n3 = `/store/carts/${e2}/discounts/${t}`;
    return this.client.request("DELETE", n3, void 0, {}, r2);
  }
  deletePaymentSession(e2, t, r2 = {}) {
    let n3 = `/store/carts/${e2}/payment-sessions/${t}`;
    return this.client.request("DELETE", n3, void 0, {}, r2);
  }
  refreshPaymentSession(e2, t, r2 = {}) {
    let n3 = `/store/carts/${e2}/payment-sessions/${t}/refresh`;
    return this.client.request("POST", n3, void 0, {}, r2);
  }
  retrieve(e2, t = {}) {
    let r2 = `/store/carts/${e2}`;
    return this.client.request("GET", r2, void 0, {}, t);
  }
  setPaymentSession(e2, t, r2 = {}) {
    let n3 = `/store/carts/${e2}/payment-session`;
    return this.client.request("POST", n3, t, {}, r2);
  }
  update(e2, t, r2 = {}) {
    let n3 = `/store/carts/${e2}`;
    return this.client.request("POST", n3, t, {}, r2);
  }
  updatePaymentSession(e2, t, r2, n3 = {}) {
    let a2 = `/store/carts/${e2}/payment-sessions/${t}`;
    return this.client.request("POST", a2, r2, {}, n3);
  }
};
var v = b;
var w = class extends i2 {
  retrieve(s2, e2 = {}) {
    let t = `/store/collections/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/store/collections";
    return s2 && (t = `/store/collections?${import_qs.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
};
var I = w;
var B = class extends i2 {
  list(s2 = {}) {
    let e2 = "/store/customers/me/payment-methods";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
};
var l = B;
var k = class extends i2 {
  constructor() {
    super(...arguments);
    this.paymentMethods = new l(this.client);
    this.addresses = new E(this.client);
  }
  create(e2, t = {}) {
    let r2 = "/store/customers";
    return this.client.request("POST", r2, e2, {}, t);
  }
  retrieve(e2 = {}) {
    let t = "/store/customers/me";
    return this.client.request("GET", t, void 0, {}, e2);
  }
  update(e2, t = {}) {
    let r2 = "/store/customers/me";
    return this.client.request("POST", r2, e2, {}, t);
  }
  listOrders(e2, t = {}) {
    let r2 = "/store/customers/me/orders";
    if (e2) {
      let n3 = import_qs2.default.stringify(e2);
      n3 && (r2 += `?${n3}`);
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  resetPassword(e2, t = {}) {
    let r2 = "/store/customers/password-reset";
    return this.client.request("POST", r2, e2, {}, t);
  }
  generatePasswordToken(e2, t = {}) {
    let r2 = "/store/customers/password-token";
    return this.client.request("POST", r2, e2, {}, t);
  }
};
var U = k;
var K = class extends i2 {
  retrieve(s2, e2 = {}) {
    let t = `/store/gift-cards/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
};
var N = K;
var V = class extends i2 {
  retrieve(s2, e2 = {}) {
    let t = `/store/order-edits/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  decline(s2, e2, t = {}) {
    let r2 = `/store/order-edits/${s2}/decline`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  complete(s2, e2 = {}) {
    let t = `/store/order-edits/${s2}/complete`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
};
var F = V;
var M = class extends i2 {
  retrieve(s2, e2 = {}) {
    let t = `/store/orders/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  retrieveByCartId(s2, e2 = {}) {
    let t = `/store/orders/cart/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  lookupOrder(s2, e2 = {}) {
    let t = "/store/orders?";
    return t = `/store/orders?${import_qs3.default.stringify(s2)}`, this.client.request("GET", t, s2, {}, e2);
  }
  requestCustomerOrders(s2, e2 = {}) {
    let t = "/store/orders/batch/customer/token";
    return this.client.request("POST", t, s2, {}, e2);
  }
  confirmRequest(s2, e2 = {}) {
    let t = "/store/orders/customer/confirm";
    return this.client.request("POST", t, s2, {}, e2);
  }
};
var z = M;
var H = class extends i2 {
  retrieve(s2, e2, t = {}) {
    let r2 = `/store/payment-collections/${s2}`;
    if (e2) {
      let n3 = import_qs4.default.stringify(e2);
      r2 += `?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  authorizePaymentSession(s2, e2, t = {}) {
    let r2 = `/store/payment-collections/${s2}/sessions/${e2}/authorize`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
  authorizePaymentSessionsBatch(s2, e2, t = {}) {
    let r2 = `/store/payment-collections/${s2}/sessions/batch/authorize`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  managePaymentSessionsBatch(s2, e2, t = {}) {
    let r2 = `/store/payment-collections/${s2}/sessions/batch`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  managePaymentSession(s2, e2, t = {}) {
    let r2 = `/store/payment-collections/${s2}/sessions`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  refreshPaymentSession(s2, e2, t = {}) {
    let r2 = `/store/payment-collections/${s2}/sessions/${e2}`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
};
var j = H;
var J = class extends i2 {
  retrieve(s2, e2, t = {}) {
    let r2 = `/store/product-categories/${s2}`;
    if (e2) {
      let n3 = import_qs5.default.stringify(e2);
      r2 = `${r2}?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  list(s2, e2 = {}) {
    let t = "/store/product-categories";
    if (s2) {
      let r2 = import_qs5.default.stringify(s2);
      t = `${t}?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
};
var _ = J;
var W = class extends i2 {
  list(s2, e2 = {}) {
    let t = "/store/product-tags";
    if (s2) {
      let r2 = import_qs6.default.stringify(s2);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
};
var Q = W;
var X = class extends i2 {
  list(s2, e2 = {}) {
    let t = "/store/product-types";
    if (s2) {
      let r2 = import_qs7.default.stringify(s2);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
};
var Y = X;
var Z = class extends i2 {
  retrieve(s2, e2 = {}) {
    let t = `/store/variants/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/store/variants";
    if (s2) {
      let r2 = import_qs9.default.stringify(s2);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
};
var es = Z;
var ee = class extends i2 {
  constructor() {
    super(...arguments);
    this.variants = new es(this.client);
  }
  retrieve(e2, t = {}) {
    let r2 = `/store/products/${e2}`;
    return this.client.request("GET", r2, void 0, {}, t);
  }
  search(e2, t = {}) {
    let r2 = "/store/products/search";
    return this.client.request("POST", r2, e2, {}, t);
  }
  list(e2, t = {}) {
    let r2 = "/store/products";
    return e2 && (r2 = `/store/products?${import_qs8.default.stringify(e2)}`), this.client.request("GET", r2, void 0, {}, t);
  }
};
var se = ee;
var te = class extends i2 {
  list(s2 = {}) {
    let e2 = "/store/regions";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/store/regions/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
};
var re = te;
var ne = class extends i2 {
  retrieve(s2, e2 = {}) {
    let t = `/store/return-reasons/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2 = {}) {
    let e2 = "/store/return-reasons";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
};
var ie = ne;
var oe = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/store/returns";
    return this.client.request("POST", t, s2, {}, e2);
  }
};
var ae = oe;
var de = class extends i2 {
  listCartOptions(s2, e2 = {}) {
    let t = `/store/shipping-options/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/store/shipping-options";
    return s2 && (t = `/store/shipping-options?${import_qs10.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
};
var me = de;
var ce = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/store/swaps";
    return this.client.request("POST", t, s2, {}, e2);
  }
  retrieveByCartId(s2, e2 = {}) {
    let t = `/store/swaps/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
};
var ue = ce;
var pe = class extends i2 {
  getSession(s2 = {}) {
    let e2 = "/admin/auth";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
  deleteSession(s2 = {}) {
    let e2 = "/admin/auth";
    return this.client.request("DELETE", e2, void 0, {}, s2);
  }
  createSession(s2, e2 = {}) {
    let t = "/admin/auth";
    return this.client.request("POST", t, s2, {}, e2);
  }
};
var ss = pe;
function ts(o2) {
  let s2 = (e2) => {
    let t = {};
    return Object.keys(e2).reduce((r2, n3) => (e2[n3] === null ? r2[n3] = "null" : typeof e2[n3] == "object" ? r2[n3] = s2(e2[n3]) : r2[n3] = e2[n3], r2), t), t;
  };
  return s2(o2);
}
var Re = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/batch-jobs";
    return this.client.request("POST", t, s2, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/batch-jobs";
    return s2 && (t = `/admin/batch-jobs?${import_qs11.default.stringify(ts(s2))}`), this.client.request("GET", t, void 0, {}, e2);
  }
  cancel(s2, e2 = {}) {
    let t = `/admin/batch-jobs/${s2}/cancel`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
  confirm(s2, e2 = {}) {
    let t = `/admin/batch-jobs/${s2}/confirm`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/batch-jobs/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
};
var rs = Re;
var le = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/collections";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/collections/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/collections/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/collections/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/collections";
    return s2 && (t = `/admin/collections?${import_qs12.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
  addProducts(s2, e2, t = {}) {
    let r2 = `/admin/collections/${s2}/products/batch`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  removeProducts(s2, e2, t = {}) {
    let r2 = `/admin/collections/${s2}/products/batch`;
    return this.client.request("DELETE", r2, e2, {}, t);
  }
};
var ns = le;
var Pe = class extends i2 {
  list(s2, e2 = {}) {
    let t = "/admin/currencies";
    if (s2) {
      let r2 = import_qs13.default.stringify(s2);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/currencies/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
};
var is = Pe;
var ge = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/customer-groups";
    return this.client.request("POST", t, s2, {}, e2);
  }
  retrieve(s2, e2, t = {}) {
    let r2 = `/admin/customer-groups/${s2}`;
    if (e2) {
      let n3 = import_qs14.default.stringify(e2);
      r2 += `?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/customer-groups/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/customer-groups/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/customer-groups";
    return s2 && (t = `/admin/customer-groups?${import_qs14.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
  addCustomers(s2, e2, t = {}) {
    let r2 = `/admin/customer-groups/${s2}/customers/batch`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  removeCustomers(s2, e2, t = {}) {
    let r2 = `/admin/customer-groups/${s2}/customers/batch`;
    return this.client.request("DELETE", r2, e2, {}, t);
  }
  listCustomers(s2, e2, t = {}) {
    let r2 = `/admin/customer-groups/${s2}/customers`;
    if (e2) {
      let n3 = import_qs14.default.stringify(e2);
      r2 += `?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
};
var os = ge;
var fe = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/customers";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/customers/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/customers/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/customers";
    return s2 && (t = `/admin/customers?${import_qs15.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
};
var as = fe;
var Ae = class extends i2 {
  addRegion(s2, e2, t = {}) {
    let r2 = `/admin/discounts/${s2}/regions/${e2}`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
  create(s2, e2 = {}) {
    let t = "/admin/discounts";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/discounts/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  createDynamicCode(s2, e2, t = {}) {
    let r2 = `/admin/discounts/${s2}/dynamic-codes`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/discounts/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  deleteDynamicCode(s2, e2, t = {}) {
    let r2 = `/admin/discounts/${s2}/dynamic-codes/${e2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/discounts/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  retrieveByCode(s2, e2 = {}) {
    let t = `/admin/discounts/code/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/discounts";
    if (s2) {
      let r2 = import_qs16.default.stringify(s2);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
  removeRegion(s2, e2, t = {}) {
    let r2 = `/admin/discounts/${s2}/regions/${e2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  createCondition(s2, e2, t = {}, r2 = {}) {
    let n3 = `/admin/discounts/${s2}/conditions`;
    if (t) {
      let a2 = import_qs16.default.stringify(t);
      n3 += `?${a2}`;
    }
    return this.client.request("POST", n3, e2, {}, r2);
  }
  updateCondition(s2, e2, t, r2 = {}, n3 = {}) {
    let a2 = `/admin/discounts/${s2}/conditions/${e2}`;
    if (r2) {
      let u = import_qs16.default.stringify(r2);
      a2 += `?${u}`;
    }
    return this.client.request("POST", a2, t, {}, n3);
  }
  deleteCondition(s2, e2, t = {}) {
    let r2 = `/admin/discounts/${s2}/conditions/${e2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  getCondition(s2, e2, t, r2 = {}) {
    let n3 = `/admin/discounts/${s2}/conditions/${e2}`;
    if (t) {
      let a2 = import_qs16.default.stringify(t);
      n3 += `?${a2}`;
    }
    return this.client.request("GET", n3, void 0, {}, r2);
  }
  addConditionResourceBatch(s2, e2, t, r2, n3 = {}) {
    let a2 = `/admin/discounts/${s2}/conditions/${e2}/batch`;
    if (r2) {
      let u = import_qs16.default.stringify(r2);
      a2 += `?${u}`;
    }
    return this.client.request("POST", a2, t, {}, n3);
  }
  deleteConditionResourceBatch(s2, e2, t, r2 = {}) {
    let n3 = `/admin/discounts/${s2}/conditions/${e2}/batch`;
    return this.client.request("DELETE", n3, t, {}, r2);
  }
};
var ds = Ae;
var ye = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/draft-orders";
    return this.client.request("POST", t, s2, {}, e2);
  }
  addLineItem(s2, e2, t = {}) {
    let r2 = `/admin/draft-orders/${s2}/line-items`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/draft-orders/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  removeLineItem(s2, e2, t = {}) {
    let r2 = `/admin/draft-orders/${s2}/line-items/${e2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/draft-orders/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/draft-orders";
    return s2 && (t = `/admin/draft-orders?${import_qs17.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
  markPaid(s2, e2 = {}) {
    let t = `/admin/draft-orders/${s2}/pay`;
    return this.client.request("POST", t, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/draft-orders/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  updateLineItem(s2, e2, t, r2 = {}) {
    let n3 = `/admin/draft-orders/${s2}/line-items/${e2}`;
    return this.client.request("POST", n3, t, {}, r2);
  }
};
var ms = ye;
var qe = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/gift-cards";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/gift-cards/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/gift-cards/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/gift-cards/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/gift-cards/";
    return s2 && (t = `/admin/gift-cards?${import_qs18.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
};
var cs = qe;
var Se = class extends i2 {
  retrieve(s2, e2, t = {}) {
    let r2 = `/admin/inventory-items/${s2}`;
    if (e2) {
      let n3 = import_qs19.default.stringify(e2);
      r2 += `?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  update(s2, e2, t, r2 = {}) {
    let n3 = `/admin/inventory-items/${s2}`;
    if (t) {
      let a2 = import_qs19.default.stringify(t);
      n3 += `?${a2}`;
    }
    return this.client.request("POST", n3, e2, {}, r2);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/inventory-items/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  create(s2, e2, t = {}) {
    let r2 = "/admin/inventory-items";
    if (e2) {
      let n3 = import_qs19.default.stringify(e2);
      r2 += `?${n3}`;
    }
    return this.client.request("POST", r2, s2, {}, t);
  }
  list(s2, e2 = {}) {
    let t = "/admin/inventory-items";
    if (s2) {
      let r2 = import_qs19.default.stringify(s2);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
  updateLocationLevel(s2, e2, t, r2, n3 = {}) {
    let a2 = `/admin/inventory-items/${s2}/location-levels/${e2}`;
    if (r2) {
      let u = import_qs19.default.stringify(r2);
      a2 += `?${u}`;
    }
    return this.client.request("POST", a2, t, {}, n3);
  }
  createLocationLevel(s2, e2, t, r2 = {}) {
    let n3 = `/admin/inventory-items/${s2}/location-levels`;
    if (t) {
      let a2 = import_qs19.default.stringify(t);
      n3 += `?${a2}`;
    }
    return this.client.request("POST", n3, e2, {}, r2);
  }
  deleteLocationLevel(s2, e2, t, r2 = {}) {
    let n3 = `/admin/inventory-items/${s2}/location-levels/${e2}`;
    if (t) {
      let a2 = import_qs19.default.stringify(t);
      n3 += `?${a2}`;
    }
    return this.client.request("DELETE", n3, void 0, {}, r2);
  }
  listLocationLevels(s2, e2, t = {}) {
    let r2 = `/admin/inventory-items/${s2}`;
    if (e2) {
      let n3 = import_qs19.default.stringify(e2);
      r2 += `?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
};
var us = Se;
var Ce = class extends i2 {
  accept(s2, e2 = {}) {
    let t = "/admin/invites/accept";
    return this.client.request("POST", t, s2, {}, e2);
  }
  create(s2, e2 = {}) {
    let t = "/admin/invites";
    return this.client.request("POST", t, s2, {}, e2);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/invites/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  list(s2 = {}) {
    let e2 = "/admin/invites";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
  resend(s2, e2 = {}) {
    let t = `/admin/invites/${s2}`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
};
var ps = Ce;
var Te = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/notes";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/notes/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/notes/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/notes/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/notes/";
    return s2 && (t = `/admin/notes?${import_qs20.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
};
var Rs = Te;
var Oe = class extends i2 {
  list(s2, e2 = {}) {
    let t = "/admin/notifications";
    return s2 && (t = `/admin/notifications?${import_qs21.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
  resend(s2, e2, t = {}) {
    let r2 = `/admin/notifications/${s2}/resend`;
    return this.client.request("POST", r2, e2, {}, t);
  }
};
var ls = Oe;
var $e = class extends i2 {
  retrieve(s2, e2, t = {}) {
    let r2 = `/admin/order-edits/${s2}`;
    if (e2) {
      let n3 = import_qs22.default.stringify(e2);
      r2 += `?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  list(s2, e2 = {}) {
    let t = "/admin/order-edits";
    if (s2) {
      let r2 = import_qs22.default.stringify(s2);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
  create(s2, e2 = {}) {
    let t = "/admin/order-edits";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/order-edits/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/order-edits/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  addLineItem(s2, e2, t = {}) {
    let r2 = `/admin/order-edits/${s2}/items`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  deleteItemChange(s2, e2, t = {}) {
    let r2 = `/admin/order-edits/${s2}/changes/${e2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  requestConfirmation(s2, e2 = {}) {
    let t = `/admin/order-edits/${s2}/request`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
  cancel(s2, e2 = {}) {
    let t = `/admin/order-edits/${s2}/cancel`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
  confirm(s2, e2 = {}) {
    let t = `/admin/order-edits/${s2}/confirm`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
  updateLineItem(s2, e2, t, r2 = {}) {
    let n3 = `/admin/order-edits/${s2}/items/${e2}`;
    return this.client.request("POST", n3, t, {}, r2);
  }
  removeLineItem(s2, e2, t = {}) {
    let r2 = `/admin/order-edits/${s2}/items/${e2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
};
var hs = $e;
var Ee = class extends i2 {
  update(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  retrieve(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}`;
    if (e2) {
      let n3 = import_qs23.default.stringify(e2);
      r2 = `/admin/orders/${s2}?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  list(s2, e2 = {}) {
    let t = "/admin/orders";
    return s2 && (t = `/admin/orders?${import_qs23.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
  complete(s2, e2 = {}) {
    let t = `/admin/orders/${s2}/complete`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
  capturePayment(s2, e2 = {}) {
    let t = `/admin/orders/${s2}/capture`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
  refundPayment(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}/refund`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  createFulfillment(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}/fulfillment`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  cancelFulfillment(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}/fulfillments/${e2}/cancel`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
  cancelSwapFulfillment(s2, e2, t, r2 = {}) {
    let n3 = `/admin/orders/${s2}/swaps/${e2}/fulfillments/${t}/cancel`;
    return this.client.request("POST", n3, void 0, {}, r2);
  }
  cancelClaimFulfillment(s2, e2, t, r2 = {}) {
    let n3 = `/admin/orders/${s2}/claims/${e2}/fulfillments/${t}/cancel`;
    return this.client.request("POST", n3, void 0, {}, r2);
  }
  createShipment(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}/shipment`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  requestReturn(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}/return`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  cancel(s2, e2 = {}) {
    let t = `/admin/orders/${s2}/cancel`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
  addShippingMethod(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}/shipping-methods`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  archive(s2, e2 = {}) {
    let t = `/admin/orders/${s2}/archive`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
  createSwap(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}/swaps`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  cancelSwap(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}/swaps/${e2}/cancel`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
  fulfillSwap(s2, e2, t, r2 = {}) {
    let n3 = `/admin/orders/${s2}/swaps/${e2}/fulfillments`;
    return this.client.request("POST", n3, t, {}, r2);
  }
  createSwapShipment(s2, e2, t, r2 = {}) {
    let n3 = `/admin/orders/${s2}/swaps/${e2}/shipments`;
    return this.client.request("POST", n3, t, {}, r2);
  }
  processSwapPayment(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}/swaps/${e2}/process-payment`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
  createClaim(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}/claims`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  cancelClaim(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}/claims/${e2}/cancel`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
  updateClaim(s2, e2, t, r2 = {}) {
    let n3 = `/admin/orders/${s2}/claims/${e2}`;
    return this.client.request("POST", n3, t, {}, r2);
  }
  fulfillClaim(s2, e2, t, r2 = {}) {
    let n3 = `/admin/orders/${s2}/claims/${e2}/fulfillments`;
    return this.client.request("POST", n3, t, {}, r2);
  }
  createClaimShipment(s2, e2, t, r2 = {}) {
    let n3 = `/admin/orders/${s2}/claims/${e2}/shipments`;
    return this.client.request("POST", n3, t, {}, r2);
  }
};
var fs = Ee;
var Ge = class extends i2 {
  retrieve(s2, e2, t = {}) {
    let r2 = `/admin/payment-collections/${s2}`;
    if (e2) {
      let n3 = import_qs24.default.stringify(e2);
      r2 += `?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/payment-collections/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/payment-collections/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  markAsAuthorized(s2, e2 = {}) {
    let t = `/admin/payment-collections/${s2}/authorize`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
};
var As = Ge;
var xe = class extends i2 {
  retrieve(s2, e2, t = {}) {
    let r2 = `/admin/payments/${s2}`;
    if (e2) {
      let n3 = import_qs25.default.stringify(e2);
      r2 = `/admin/payments/${s2}?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  capturePayment(s2, e2 = {}) {
    let t = `/admin/payments/${s2}/capture`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
  refundPayment(s2, e2, t = {}) {
    let r2 = `/admin/payments/${s2}/refund`;
    return this.client.request("POST", r2, e2, {}, t);
  }
};
var ys = xe;
var Le = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/price-lists";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/price-lists/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/price-lists/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/price-lists/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/price-lists/";
    return s2 && (t = `/admin/price-lists?${import_qs26.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
  listProducts(s2, e2, t = {}) {
    let r2 = `/admin/price-lists/${s2}/products`;
    if (e2) {
      let n3 = import_qs26.default.stringify(e2);
      r2 = `/admin/price-lists/${s2}/products?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  addPrices(s2, e2, t = {}) {
    let r2 = `/admin/price-lists/${s2}/prices/batch`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  deletePrices(s2, e2, t = {}) {
    let r2 = `/admin/price-lists/${s2}/prices/batch`;
    return this.client.request("DELETE", r2, e2, {}, t);
  }
  deleteProductPrices(s2, e2, t = {}) {
    let r2 = `/admin/price-lists/${s2}/products/${e2}/prices`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  deleteVariantPrices(s2, e2, t = {}) {
    let r2 = `/admin/price-lists/${s2}/variants/${e2}/prices`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
};
var Ss = Le;
var De = class extends i2 {
  retrieve(s2, e2, t = {}) {
    let r2 = `/admin/product-categories/${s2}`;
    if (e2) {
      let n3 = import_qs27.default.stringify(e2);
      r2 = `${r2}?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  create(s2, e2 = {}) {
    let t = "/admin/product-categories";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/product-categories/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  list(s2, e2 = {}) {
    let t = "/admin/product-categories";
    if (s2) {
      let r2 = import_qs27.default.stringify(s2);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/product-categories/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  removeProducts(s2, e2, t = {}) {
    let r2 = `/admin/product-categories/${s2}/products/batch`;
    return this.client.request("DELETE", r2, e2, {}, t);
  }
  addProducts(s2, e2, t = {}) {
    let r2 = `/admin/product-categories/${s2}/products/batch`;
    return this.client.request("POST", r2, e2, {}, t);
  }
};
var Ts = De;
var be = class extends i2 {
  list(s2) {
    let e2 = "/admin/product-tags";
    return s2 && (e2 = `/admin/product-tags?${import_qs28.default.stringify(s2)}`), this.client.request("GET", e2);
  }
};
var Os = be;
var ve = class extends i2 {
  list(s2, e2 = {}) {
    let t = "/admin/product-types";
    if (s2) {
      let r2 = import_qs29.default.stringify(s2);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
};
var $s = ve;
var we = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/products/";
    return this.client.request("POST", t, s2, {}, e2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/products/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/products/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/products/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/products";
    return s2 && (t = `/admin/products?${import_qs30.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
  listTypes(s2 = {}) {
    let e2 = "/admin/products/types";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
  listTags(s2 = {}) {
    let e2 = "/admin/products/tag-usage";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
  setMetadata(s2, e2, t = {}) {
    let r2 = `/admin/products/${s2}/metadata`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  createVariant(s2, e2, t = {}) {
    let r2 = `/admin/products/${s2}/variants`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  updateVariant(s2, e2, t, r2 = {}) {
    let n3 = `/admin/products/${s2}/variants/${e2}`;
    return this.client.request("POST", n3, t, {}, r2);
  }
  deleteVariant(s2, e2, t = {}) {
    let r2 = `/admin/products/${s2}/variants/${e2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  addOption(s2, e2, t = {}) {
    let r2 = `/admin/products/${s2}/options`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  updateOption(s2, e2, t, r2 = {}) {
    let n3 = `/admin/products/${s2}/options/${e2}`;
    return this.client.request("POST", n3, t, {}, r2);
  }
  deleteOption(s2, e2, t = {}) {
    let r2 = `/admin/products/${s2}/options/${e2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
};
var Es = we;
var Be = class extends i2 {
  retrieve(s2, e2, t = {}) {
    let r2 = `/admin/publishable-api-keys/${s2}`;
    if (e2) {
      let n3 = import_qs31.default.stringify(e2);
      r2 += `?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  list(s2, e2 = {}) {
    let t = "/admin/publishable-api-keys";
    if (s2) {
      let r2 = import_qs31.default.stringify(s2);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
  create(s2, e2 = {}) {
    let t = "/admin/publishable-api-keys";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/publishable-api-keys/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/publishable-api-keys/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  revoke(s2, e2 = {}) {
    let t = `/admin/publishable-api-keys/${s2}/revoke`;
    return this.client.request("POST", t, {}, {}, e2);
  }
  addSalesChannelsBatch(s2, e2, t = {}) {
    let r2 = `/admin/publishable-api-keys/${s2}/sales-channels/batch`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  deleteSalesChannelsBatch(s2, e2, t = {}) {
    let r2 = `/admin/publishable-api-keys/${s2}/sales-channels/batch`;
    return this.client.request("DELETE", r2, e2, {}, t);
  }
  listSalesChannels(s2, e2, t = {}) {
    let r2 = `/admin/publishable-api-keys/${s2}/sales-channels`;
    if (e2) {
      let n3 = import_qs31.default.stringify(e2);
      r2 += `?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
};
var Gs = Be;
var ke = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/regions";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/regions/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/regions/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/regions/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/regions";
    return s2 && (t = `/admin/regions?${import_qs32.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
  addCountry(s2, e2, t = {}) {
    let r2 = `/admin/regions/${s2}/countries`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  deleteCountry(s2, e2, t = {}) {
    let r2 = `/admin/regions/${s2}/countries/${e2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  addFulfillmentProvider(s2, e2, t = {}) {
    let r2 = `/admin/regions/${s2}/fulfillment-providers`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  deleteFulfillmentProvider(s2, e2, t = {}) {
    let r2 = `/admin/regions/${s2}/fulfillment-providers/${e2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  retrieveFulfillmentOptions(s2, e2 = {}) {
    let t = `/admin/regions/${s2}/fulfillment-options`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  addPaymentProvider(s2, e2, t = {}) {
    let r2 = `/admin/regions/${s2}/payment-providers`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  deletePaymentProvider(s2, e2, t = {}) {
    let r2 = `/admin/regions/${s2}/payment-providers/${e2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
};
var xs = ke;
var Ue = class extends i2 {
  retrieve(s2, e2 = {}) {
    let t = `/admin/reservations/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/reservations";
    if (s2) {
      let r2 = import_qs33.default.stringify(s2);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
  create(s2, e2 = {}) {
    let t = "/admin/reservations";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/reservations/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/reservations/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
};
var Ls = Ue;
var Ke = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/return-reasons";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/return-reasons/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/return-reasons/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/return-reasons/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2 = {}) {
    let e2 = "/admin/return-reasons";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
};
var Ds = Ke;
var Ne = class extends i2 {
  cancel(s2, e2 = {}) {
    let t = `/admin/returns/${s2}/cancel`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
  receive(s2, e2, t = {}) {
    let r2 = `/admin/returns/${s2}/receive`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  list(s2, e2 = {}) {
    let t = "/admin/returns/";
    return s2 && (t = `/admin/returns?${import_qs34.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
};
var bs = Ne;
var Ve = class extends i2 {
  retrieve(s2, e2 = {}) {
    let t = `/admin/sales-channels/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  create(s2, e2 = {}) {
    let t = "/admin/sales-channels";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/sales-channels/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  list(s2, e2 = {}) {
    let t = "/admin/sales-channels";
    if (s2) {
      let r2 = import_qs35.default.stringify(s2);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/sales-channels/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  removeProducts(s2, e2, t = {}) {
    let r2 = `/admin/sales-channels/${s2}/products/batch`;
    return this.client.request("DELETE", r2, e2, {}, t);
  }
  addProducts(s2, e2, t = {}) {
    let r2 = `/admin/sales-channels/${s2}/products/batch`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  addLocation(s2, e2, t = {}) {
    let r2 = `/admin/sales-channels/${s2}/stock-locations`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  removeLocation(s2, e2, t = {}) {
    let r2 = `/admin/sales-channels/${s2}/stock-locations`;
    return this.client.request("DELETE", r2, e2, {}, t);
  }
};
var vs = Ve;
var Fe = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/shipping-options";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/shipping-options/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/shipping-options/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/shipping-options/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/shipping-options";
    return s2 && (t = `/admin/shipping-options?${import_qs36.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
};
var ws = Fe;
var Me = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/shipping-profiles/";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/shipping-profiles/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/shipping-profiles/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/shipping-profiles/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2 = {}) {
    let e2 = "/admin/shipping-profiles/";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
};
var Is = Me;
var ze = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/stock-locations";
    return this.client.request("POST", t, s2, {}, e2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/stock-locations/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/stock-locations/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/stock-locations/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/stock-locations";
    if (s2) {
      let r2 = import_qs37.default.stringify(s2);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
};
var Bs = ze;
var He = class extends i2 {
  update(s2, e2 = {}) {
    let t = "/admin/store/";
    return this.client.request("POST", t, s2, {}, e2);
  }
  addCurrency(s2, e2 = {}) {
    let t = `/admin/store/${s2}`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
  deleteCurrency(s2, e2 = {}) {
    let t = `/admin/store/currencies/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  retrieve(s2 = {}) {
    let e2 = "/admin/store/";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
  listPaymentProviders(s2 = {}) {
    let e2 = "/admin/store/payment-providers";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
  listTaxProviders(s2 = {}) {
    let e2 = "/admin/store/tax-providers";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
};
var ks = He;
var je = class extends i2 {
  retrieve(s2, e2 = {}) {
    let t = `/admin/swaps/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/swaps/";
    return s2 && (t = `/admin/swaps?${import_qs38.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
};
var Us = je;
var Je = class extends i2 {
  retrieve(s2, e2, t = {}) {
    let r2 = `/admin/tax-rates/${s2}`;
    if (e2) {
      let n3 = import_qs39.default.stringify(e2);
      r2 = `/admin/tax-rates/${s2}?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  list(s2, e2 = {}) {
    let t = "/admin/tax-rates";
    return s2 && (t = `/admin/tax-rates?${import_qs39.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
  create(s2, e2, t = {}) {
    let r2 = "/admin/tax-rates";
    return e2 && (r2 = `/admin/tax-rates?${import_qs39.default.stringify(e2)}`), this.client.request("POST", r2, s2, {}, t);
  }
  update(s2, e2, t, r2 = {}) {
    let n3 = `/admin/tax-rates/${s2}`;
    if (t) {
      let a2 = import_qs39.default.stringify(t);
      n3 = `/admin/tax-rates/${s2}?${a2}`;
    }
    return this.client.request("POST", n3, e2, {}, r2);
  }
  addProducts(s2, e2, t, r2 = {}) {
    let n3 = `/admin/tax-rates/${s2}/products/batch`;
    if (t) {
      let a2 = import_qs39.default.stringify(t);
      n3 = `/admin/tax-rates/${s2}/products/batch?${a2}`;
    }
    return this.client.request("POST", n3, e2, {}, r2);
  }
  addProductTypes(s2, e2, t, r2 = {}) {
    let n3 = `/admin/tax-rates/${s2}/product-types/batch`;
    if (t) {
      let a2 = import_qs39.default.stringify(t);
      n3 = `/admin/tax-rates/${s2}/product-types/batch?${a2}`;
    }
    return this.client.request("POST", n3, e2, {}, r2);
  }
  addShippingOptions(s2, e2, t, r2 = {}) {
    let n3 = `/admin/tax-rates/${s2}/shipping-options/batch`;
    if (t) {
      let a2 = import_qs39.default.stringify(t);
      n3 = `/admin/tax-rates/${s2}/shipping-options/batch?${a2}`;
    }
    return this.client.request("POST", n3, e2, {}, r2);
  }
  removeProducts(s2, e2, t, r2 = {}) {
    let n3 = `/admin/tax-rates/${s2}/products/batch`;
    if (t) {
      let a2 = import_qs39.default.stringify(t);
      n3 = `/admin/tax-rates/${s2}/products/batch?${a2}`;
    }
    return this.client.request("DELETE", n3, e2, {}, r2);
  }
  removeProductTypes(s2, e2, t, r2 = {}) {
    let n3 = `/admin/tax-rates/${s2}/product-types/batch`;
    if (t) {
      let a2 = import_qs39.default.stringify(t);
      n3 = `/admin/tax-rates/${s2}/product-types/batch?${a2}`;
    }
    return this.client.request("DELETE", n3, e2, {}, r2);
  }
  removeShippingOptions(s2, e2, t, r2 = {}) {
    let n3 = `/admin/tax-rates/${s2}/shipping-options/batch`;
    if (t) {
      let a2 = import_qs39.default.stringify(t);
      n3 = `/admin/tax-rates/${s2}/shipping-options/batch?${a2}`;
    }
    return this.client.request("DELETE", n3, e2, {}, r2);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/tax-rates/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
};
var Ks = Je;
var _e = class extends i2 {
  constructor() {
    super(...arguments);
    this.headers = { "Content-Type": "multipart/form-data" };
  }
  create(e2) {
    let t = "/admin/uploads", r2 = this._createPayload(e2);
    return this.client.request("POST", t, r2, {}, this.headers);
  }
  createProtected(e2) {
    let t = "/admin/uploads/protected", r2 = this._createPayload(e2);
    return this.client.request("POST", t, r2, {}, this.headers);
  }
  delete(e2, t = {}) {
    let r2 = "/admin/uploads";
    return this.client.request("DELETE", r2, e2, {}, t);
  }
  getPresignedDownloadUrl(e2, t = {}) {
    let r2 = "/admin/uploads/download-url";
    return this.client.request("POST", r2, e2, {}, t);
  }
  _createPayload(e2) {
    let t = new FormData();
    return Array.isArray(e2) ? e2.forEach((r2) => t.append("files", r2)) : t.append("files", e2), t;
  }
};
var Ns = _e;
var We = class extends i2 {
  sendResetPasswordToken(s2, e2 = {}) {
    let t = "/admin/users/password-token";
    return this.client.request("POST", t, s2, {}, e2);
  }
  resetPassword(s2, e2 = {}) {
    let t = "admin/users/reset-password";
    return this.client.request("POST", t, s2, {}, e2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/users/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  create(s2, e2 = {}) {
    let t = "/admin/users";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/users/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/users/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  list(s2 = {}) {
    let e2 = "/admin/users";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
};
var Vs = We;
var Qe = class extends i2 {
  list(s2, e2 = {}) {
    let t = "/admin/variants";
    return s2 && (t = `/admin/variants?${import_qs40.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
  retrieve(s2, e2, t = {}) {
    let r2 = `/admin/variants/${s2}`;
    return e2 && (r2 = `/admin/variants?${import_qs40.default.stringify(e2)}`), this.client.request("GET", r2, void 0, {}, t);
  }
  getInventory(s2, e2 = {}) {
    let t = `/admin/variants/${s2}/inventory`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
};
var Ms = Qe;
var g = class extends i2 {
  constructor() {
    super(...arguments);
    this.auth = new ss(this.client);
    this.batchJobs = new rs(this.client);
    this.customers = new as(this.client);
    this.customerGroups = new os(this.client);
    this.discounts = new ds(this.client);
    this.currencies = new is(this.client);
    this.collections = new ns(this.client);
    this.draftOrders = new ms(this.client);
    this.giftCards = new cs(this.client);
    this.invites = new ps(this.client);
    this.inventoryItems = new us(this.client);
    this.notes = new Rs(this.client);
    this.priceLists = new Ss(this.client);
    this.products = new Es(this.client);
    this.productTags = new Os(this.client);
    this.productTypes = new $s(this.client);
    this.users = new Vs(this.client);
    this.returns = new bs(this.client);
    this.orders = new fs(this.client);
    this.orderEdits = new hs(this.client);
    this.publishableApiKeys = new Gs(this.client);
    this.returnReasons = new Ds(this.client);
    this.variants = new Ms(this.client);
    this.salesChannels = new vs(this.client);
    this.swaps = new Us(this.client);
    this.shippingProfiles = new Is(this.client);
    this.stockLocations = new Bs(this.client);
    this.store = new ks(this.client);
    this.shippingOptions = new ws(this.client);
    this.regions = new xs(this.client);
    this.reservations = new Ls(this.client);
    this.notifications = new ls(this.client);
    this.taxRates = new Ks(this.client);
    this.uploads = new Ns(this.client);
    this.paymentCollections = new As(this.client);
    this.payments = new ys(this.client);
    this.productCategories = new Ts(this.client);
  }
};
var Xe = class {
  constructor(s2) {
    this.client = new O(s2), this.admin = new g(this.client), this.auth = new x(this.client), this.carts = new v(this.client), this.customers = new U(this.client), this.errors = new d(), this.orders = new z(this.client), this.orderEdits = new F(this.client), this.products = new se(this.client), this.productTypes = new Y(this.client), this.regions = new re(this.client), this.returnReasons = new ie(this.client), this.returns = new ae(this.client), this.shippingOptions = new me(this.client), this.swaps = new ue(this.client), this.collections = new I(this.client), this.giftCards = new N(this.client), this.paymentMethods = new l(this.client), this.paymentCollections = new j(this.client), this.productTags = new Q(this.client), this.productCategories = new _(this.client);
  }
  setPublishableKey(s2) {
    R.registerPublishableApiKey(s2);
  }
};
var _o = Xe;

// node_modules/medusa-react/dist/index.mjs
var import_react = __toESM(require_react(), 1);
var import_react2 = __toESM(require_react(), 1);
var Dt = __toESM(require_react(), 1);
var import_react3 = __toESM(require_react(), 1);
var Qt = import_react.default.createContext(null);
var n2 = () => {
  let e2 = import_react.default.useContext(Qt);
  if (!e2)
    throw new Error("useMedusa must be used within a MedusaProvider");
  return e2;
};
var qo = ({ queryClientProviderProps: e2, baseUrl: t, apiKey: s2, publishableApiKey: r2, children: o2 }) => {
  let m2 = new _o({ baseUrl: t, maxRetries: 0, apiKey: s2, publishableApiKey: r2 });
  return import_react.default.createElement(QueryClientProvider, { ...e2 }, import_react.default.createElement(Qt.Provider, { value: { client: m2 } }, o2));
};
var De2 = (e2) => e2 instanceof Object;
var Ve2 = (e2) => Array.isArray(e2);
var me2 = (e2) => e2 == null || De2(e2) && Object.keys(e2).length === 0 || Ve2(e2) && e2.length === 0 || typeof e2 == "string" && e2.trim().length === 0;
var ho = ({ variant: e2, region: t, includeTaxes: s2 = true, ...r2 }) => {
  let o2 = Gs2({ variant: e2, region: t, includeTaxes: s2 });
  return Tt({ amount: o2, currency_code: t == null ? void 0 : t.currency_code, ...r2 });
};
var Gs2 = ({ variant: e2, region: t, includeTaxes: s2 = true }) => {
  let r2 = ke2(e2, t);
  return ht2({ amount: r2, region: t, includeTaxes: s2 });
};
var ke2 = (e2, t) => {
  var _a2, _b;
  return ((_b = (_a2 = e2 == null ? void 0 : e2.prices) == null ? void 0 : _a2.find((r2) => {
    var _a3;
    return r2.currency_code.toLowerCase() === ((_a3 = t == null ? void 0 : t.currency_code) == null ? void 0 : _a3.toLowerCase());
  })) == null ? void 0 : _b.amount) || 0;
};
var ht2 = ({ amount: e2, region: t, includeTaxes: s2 = true }) => {
  let r2 = Ns2(e2, t), o2 = s2 ? Ys2(t) : 0;
  return r2 * (1 + o2);
};
var To = ({ amount: e2, region: t, includeTaxes: s2 = true, ...r2 }) => {
  let o2 = ht2({ amount: e2, region: t, includeTaxes: s2 });
  return Tt({ amount: o2, currency_code: t.currency_code, ...r2 });
};
var Ws2 = ["krw", "jpy", "vnd"];
var Ns2 = (e2, t) => {
  var _a2;
  let s2 = Ws2.includes((_a2 = t == null ? void 0 : t.currency_code) == null ? void 0 : _a2.toLowerCase()) ? 1 : 100;
  return Math.floor(e2) / s2;
};
var Ys2 = (e2) => e2 && !me2(e2) ? (e2 == null ? void 0 : e2.tax_rate) / 100 : 0;
var Tt = ({ amount: e2, currency_code: t, minimumFractionDigits: s2, maximumFractionDigits: r2, locale: o2 = "en-US" }) => t && !me2(t) ? new Intl.NumberFormat(o2, { style: "currency", currency: t, minimumFractionDigits: s2, maximumFractionDigits: r2 }).format(e2) : e2.toString();
var a = (e2) => {
  let t = { all: [e2], lists: () => [...t.all, "list"], list: (s2) => [...t.lists(), { query: s2 }], details: () => [...t.all, "detail"], detail: (s2) => [...t.details(), s2] };
  return t;
};
var vt = (e2, t) => {
  let [s2, r2] = Dt.useState(() => {
    try {
      return typeof window < "u" && window.localStorage.getItem(e2) || t;
    } catch {
      return t;
    }
  });
  return [s2, (S2) => {
    r2(S2), typeof window < "u" && window.localStorage.setItem(e2, S2);
  }, () => {
    typeof window < "u" && window.localStorage.removeItem(e2);
  }];
};
var _t = import_react2.default.createContext(null);
var Bs2 = (e2, t) => {
  switch (t.type) {
    case 0:
      return e2;
    case 6:
      return ge2({ ...e2, region: t.payload }, e2.items);
    case 1: {
      let s2 = e2.items.findIndex((o2) => {
        var _a2, _b;
        return o2.variant.id === ((_b = (_a2 = t.payload) == null ? void 0 : _a2.variant) == null ? void 0 : _b.id);
      });
      s2 !== -1 && e2.items.splice(s2, 1);
      let r2 = [...e2.items, t.payload];
      return ge2(e2, r2);
    }
    case 4: {
      let s2 = e2.items.map((r2) => r2.variant.id === t.payload.id ? { ...r2, ...t.payload.item } : r2);
      return ge2(e2, s2);
    }
    case 3: {
      let s2 = e2.items.filter((r2) => r2.variant.id !== t.payload.id);
      return ge2(e2, s2);
    }
    case 2:
      return ge2(e2, t.payload);
    case 5:
      return { ...e2, items: [], total: 0, totalItems: 0 };
    default:
      return e2;
  }
};
var ge2 = (e2, t) => {
  let s2 = Vs2(e2.region, t);
  return { ...e2, items: s2, totalItems: t.reduce((r2, o2) => r2 + o2.quantity, 0), total: ks2(s2) };
};
var Vs2 = (e2, t) => t.map((s2) => ({ ...s2, total: ke2(s2.variant, e2) }));
var ks2 = (e2) => e2.reduce((t, s2) => t + s2.quantity * (s2.total || 0), 0);
var Js2 = { region: {}, items: [], total: 0, totalItems: 0 };
var wo = ({ initialState: e2 = Js2, children: t }) => {
  let [s2, r2] = vt("medusa-session-cart", JSON.stringify(e2)), [o2, m2] = import_react2.default.useReducer(Bs2, JSON.parse(s2));
  (0, import_react2.useEffect)(() => {
    r2(JSON.stringify(o2));
  }, [o2, r2]);
  let S2 = (u) => {
    if (!De2(u) || me2(u))
      throw new Error("region must be a non-empty object");
    m2({ type: 6, payload: u });
  }, ae2 = (u) => o2.items.find((A2) => A2.variant.id === u), Ne2 = (u) => {
    if (!Ve2(u))
      throw new Error("items must be an array of items");
    m2({ type: 2, payload: u });
  }, Ye2 = (u) => {
    if (!De2(u) || me2(u))
      throw new Error("item must be a non-empty object");
    m2({ type: 1, payload: u });
  }, we2 = (u, A2) => {
    m2({ type: 4, payload: { id: u, item: A2 } });
  }, C2 = (u, A2) => {
    let Be2 = ae2(u);
    !Be2 || (A2 = A2 <= 0 ? 1 : A2, m2({ type: 4, payload: { id: u, item: { ...Be2, quantity: Math.min(Be2.variant.inventory_quantity, A2) } } }));
  }, Fe2 = (u) => {
    let A2 = ae2(u);
    !A2 || m2({ type: 4, payload: { id: u, item: { ...A2, quantity: Math.min(A2.variant.inventory_quantity, A2.quantity + 1) } } });
  }, vs2 = (u) => {
    let A2 = ae2(u);
    !A2 || m2({ type: 4, payload: { id: u, item: { ...A2, quantity: Math.max(0, A2.quantity - 1) } } });
  }, _s2 = (u) => {
    m2({ type: 3, payload: { id: u } });
  }, Is2 = () => {
    m2({ type: 5 });
  };
  return import_react2.default.createElement(_t.Provider, { value: { ...o2, setRegion: S2, addItem: Ye2, updateItem: we2, updateItemQuantity: C2, incrementItemQuantity: Fe2, decrementItemQuantity: vs2, removeItem: _s2, getItem: ae2, setItems: Ne2, clearItems: Is2 } }, t);
};
var Fo = () => {
  let e2 = (0, import_react2.useContext)(_t);
  if (!e2)
    throw new Error("useSessionCart should be used as a child of SessionCartProvider");
  return e2;
};
var zs = "carts";
var Hs2 = a(zs);
var jo = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(Hs2.detail(e2), () => s2.carts.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var It = (e2) => {
  let { client: t } = n2();
  return useMutation((s2) => t.carts.create(s2), e2);
};
var Lt = (e2, t) => {
  let { client: s2 } = n2();
  return useMutation((r2) => s2.carts.update(e2, r2), t);
};
var bt = (e2, t) => {
  let { client: s2 } = n2();
  return useMutation(() => s2.carts.complete(e2), t);
};
var Gt = (e2, t) => {
  let { client: s2 } = n2();
  return useMutation(() => s2.carts.createPaymentSessions(e2), t);
};
var Zo = (e2, t) => {
  let { client: s2 } = n2();
  return useMutation(({ data: r2, provider_id: o2 }) => s2.carts.updatePaymentSession(e2, o2, { data: r2 }), t);
};
var en = (e2, t) => {
  let { client: s2 } = n2();
  return useMutation(({ provider_id: r2 }) => s2.carts.refreshPaymentSession(e2, r2), t);
};
var Wt = (e2, t) => {
  let { client: s2 } = n2();
  return useMutation((r2) => s2.carts.setPaymentSession(e2, r2), t);
};
var Nt = (e2, t) => {
  let { client: s2 } = n2();
  return useMutation((r2) => s2.carts.addShippingMethod(e2, r2), t);
};
var tn = (e2, t) => {
  let { client: s2 } = n2();
  return useMutation(({ provider_id: r2 }) => s2.carts.deletePaymentSession(e2, r2), t);
};
var sn = (e2) => {
  let { client: t } = n2();
  return useMutation(async (r2) => {
    let { cart: o2 } = await t.carts.create(r2);
    return (await t.carts.createPaymentSessions(o2.id)).cart;
  }, e2);
};
var Xs2 = "collections";
var wt = a(Xs2);
var un = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(wt.detail(e2), () => s2.collections.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var cn = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(wt.list(e2), () => s2.collections.list(e2), t);
  return { ...r2, ...o2 };
};
var $s2 = "customers";
var je2 = { ...a($s2), orders: (e2) => [...je2.detail(e2), "orders"] };
var Cn = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(je2.detail("me"), () => t.customers.retrieve(), e2);
  return { ...s2, ...r2 };
};
var On = (e2 = { limit: 10, offset: 0 }, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(je2.orders("me"), () => s2.customers.listOrders(e2), t);
  return { ...r2, ...o2 };
};
var Un = (e2) => {
  let { client: t } = n2();
  return useMutation((s2) => t.customers.create(s2), e2);
};
var qn = (e2) => {
  let { client: t } = n2();
  return useMutation(({ id: s2, ...r2 }) => t.customers.update(r2), e2);
};
var er = "gift_cards";
var tr = a(er);
var _n = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(tr.detail(e2), () => s2.giftCards.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var Yn = (e2, t) => {
  let { client: s2 } = n2();
  return useMutation((r2) => s2.carts.lineItems.create(e2, r2), t);
};
var wn = (e2, t) => {
  let { client: s2 } = n2();
  return useMutation(({ lineId: r2, ...o2 }) => s2.carts.lineItems.update(e2, r2, o2), t);
};
var Fn = (e2, t) => {
  let { client: s2 } = n2();
  return useMutation(({ lineId: r2 }) => s2.carts.lineItems.delete(e2, r2), t);
};
var rr = "orderEdit";
var pe2 = a(rr);
var Hn = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(pe2.detail(e2), () => s2.orderEdits.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var i3 = (e2, t, s2) => ({ ...s2, onSuccess: (...r2) => {
  if (s2 == null ? void 0 : s2.onSuccess)
    return s2.onSuccess(...r2);
  t !== void 0 && t.forEach((o2) => {
    e2.invalidateQueries({ queryKey: o2 });
  });
} });
var oi = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.orderEdits.decline(e2, o2), i3(r2, [pe2.lists(), pe2.detail(e2)], t));
};
var ni = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.orderEdits.complete(e2), i3(r2, [pe2.lists(), pe2.detail(e2)], t));
};
var or = "orders";
var Z2 = { ...a(or), cart: (e2) => [...Z2.details(), "cart", e2] };
var li = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(Z2.detail(e2), () => s2.orders.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var Ri = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(Z2.cart(e2), () => s2.orders.retrieveByCartId(e2), t);
  return { ...r2, ...o2 };
};
var yi = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(Z2.list(e2), () => s2.orders.lookupOrder(e2), t);
  return { ...r2, ...o2 };
};
var xi = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.orders.requestCustomerOrders(r2), i3(s2, [Z2.all], e2));
};
var Ei = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.orders.confirmRequest(r2), i3(s2, [Z2.all], e2));
};
var ir = "paymentCollection";
var U2 = a(ir);
var Ti = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(U2.detail(e2), () => s2.paymentCollections.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var Gi = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.paymentCollections.managePaymentSessionsBatch(e2, o2), i3(r2, [U2.lists(), U2.detail(e2)], t));
};
var Wi = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.paymentCollections.managePaymentSession(e2, o2), i3(r2, [U2.lists(), U2.detail(e2)], t));
};
var Ni = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.paymentCollections.authorizePaymentSession(e2, o2), i3(r2, [U2.lists(), U2.detail(e2)], t));
};
var Yi = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.paymentCollections.authorizePaymentSessionsBatch(e2, o2), i3(r2, [U2.lists(), U2.detail(e2)], t));
};
var wi = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.paymentCollections.refreshPaymentSession(e2, o2), i3(r2, [U2.lists(), U2.detail(e2)], t));
};
var ar = "product_categories";
var Ht = a(ar);
var Hi = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(Ht.list(e2), () => s2.productCategories.list(e2), t);
  return { ...r2, ...o2 };
};
var Xi = (e2, t, s2) => {
  let { client: r2 } = n2(), { data: o2, ...m2 } = useQuery(Ht.detail(e2), () => r2.productCategories.retrieve(e2, t), s2);
  return { ...o2, ...m2 };
};
var pr = "product_tags";
var dr = a(pr);
var oa = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(dr.list(e2), () => s2.productTags.list(e2), t);
  return { ...r2, ...o2 };
};
var cr = "product_types";
var lr = a(cr);
var ua = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(lr.list(e2), () => s2.productTypes.list(e2), t);
  return { ...r2, ...o2 };
};
var Rr = "products";
var $t = a(Rr);
var Pa = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery($t.list(e2), () => s2.products.list(e2), t);
  return { ...r2, ...o2 };
};
var Ca = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery($t.detail(e2), () => s2.products.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var yr = "regions";
var es2 = a(yr);
var qa = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(es2.lists(), () => t.regions.list(), e2);
  return { ...s2, ...r2 };
};
var Ma = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(es2.detail(e2), () => s2.regions.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var Ar = "return_reasons";
var ss2 = a(Ar);
var _a = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(ss2.lists(), () => t.returnReasons.list(), e2);
  return { ...s2, ...r2 };
};
var Ia = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(ss2.detail(e2), () => s2.returnReasons.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var wa = (e2) => {
  let { client: t } = n2();
  return useMutation((s2) => t.returns.create(s2), e2);
};
var Pr = "shipping_options";
var Xe2 = { ...a(Pr), cart: (e2) => [...Xe2.all, "cart", e2] };
var za = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(Xe2.list(e2), async () => s2.shippingOptions.list(e2), t);
  return { ...r2, ...o2 };
};
var Ha = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(Xe2.cart(e2), async () => s2.shippingOptions.listCartOptions(e2), t);
  return { ...r2, ...o2 };
};
var Or = "swaps";
var os2 = { ...a(Or), cart: (e2) => [...os2.all, "cart", e2] };
var rm = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(os2.cart(e2), () => s2.swaps.retrieveByCartId(e2), t);
  return { ...r2, ...o2 };
};
var mm = (e2) => {
  let { client: t } = n2();
  return useMutation((s2) => t.swaps.create(s2), e2);
};
var ns2 = import_react3.default.createContext(null);
var vm = () => {
  let e2 = import_react3.default.useContext(ns2);
  if (!e2)
    throw new Error("useCart must be used within a CartProvider");
  return e2;
};
var Er = { id: "", items: [] };
var _m = ({ children: e2, initialState: t = Er }) => {
  let [s2, r2] = (0, import_react3.useState)(t), o2 = It({ onSuccess: ({ cart: C2 }) => r2(C2) }), m2 = Lt(s2 == null ? void 0 : s2.id, { onSuccess: ({ cart: C2 }) => r2(C2) }), S2 = Nt(s2 == null ? void 0 : s2.id, { onSuccess: ({ cart: C2 }) => r2(C2) }), ae2 = Gt(s2 == null ? void 0 : s2.id, { onSuccess: ({ cart: C2 }) => r2(C2) }), Ne2 = Wt(s2 == null ? void 0 : s2.id, { onSuccess: ({ cart: C2 }) => {
    r2(C2);
  } }), Ye2 = bt(s2 == null ? void 0 : s2.id), we2 = s2 == null ? void 0 : s2.items.map((C2) => C2.quantity).reduce((C2, Fe2) => C2 + Fe2, 0);
  return import_react3.default.createElement(ns2.Provider, { value: { cart: s2, setCart: r2, createCart: o2, pay: Ne2, startCheckout: ae2, completeCheckout: Ye2, updateCart: m2, addShippingMethod: S2, totalItems: we2 || 0 } }, e2);
};
var Ur = "admin_auth";
var ve2 = a(Ur);
var Fm = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(ve2.details(), () => t.admin.auth.getSession(), e2);
  return { ...s2, ...r2 };
};
var Hm = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.auth.createSession(r2), i3(s2, ve2.details(), e2));
};
var Xm = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation(() => t.admin.auth.deleteSession(), i3(s2, ve2.details(), e2));
};
var qr = "admin_batches";
var B2 = a(qr);
var np = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(B2.list(e2), () => s2.admin.batchJobs.list(e2), t);
  return { ...r2, ...o2 };
};
var ip = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(B2.detail(e2), () => s2.admin.batchJobs.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var lp = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.batchJobs.create(r2), i3(s2, B2.lists(), e2));
};
var Rp = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.batchJobs.cancel(e2), i3(r2, [B2.lists(), B2.detail(e2)], t));
};
var yp = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.batchJobs.confirm(e2), i3(r2, [B2.lists(), B2.detail(e2)], t));
};
var Mr = "admin_products";
var d2 = a(Mr);
var Ep = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(d2.list(e2), () => s2.admin.products.list(e2), t);
  return { ...r2, ...o2 };
};
var Sp = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(d2.detail(e2), () => s2.admin.products.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var Up = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(d2.detail("tags"), () => t.admin.products.listTags(), e2);
  return { ...s2, ...r2 };
};
var Dp = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.products.create(r2), i3(s2, d2.lists(), e2));
};
var vp = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.products.update(e2, o2), i3(r2, [d2.lists(), d2.detail(e2)], t));
};
var _p = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.products.delete(e2), i3(r2, [d2.lists(), d2.detail(e2)], t));
};
var Ip = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.products.createVariant(e2, o2), i3(r2, [d2.lists(), d2.detail(e2)], t));
};
var Lp = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(({ variant_id: o2, ...m2 }) => s2.admin.products.updateVariant(e2, o2, m2), i3(r2, [d2.lists(), d2.detail(e2)], t));
};
var bp = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.products.deleteVariant(e2, o2), i3(r2, [d2.lists(), d2.detail(e2)], t));
};
var Gp = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.products.addOption(e2, o2), i3(r2, d2.detail(e2), t));
};
var Wp = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(({ option_id: o2, ...m2 }) => s2.admin.products.updateOption(e2, o2, m2), i3(r2, d2.detail(e2), t));
};
var Np = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.products.deleteOption(e2, o2), i3(r2, d2.detail(e2), t));
};
var Kr = "admin_variants";
var f3 = a(Kr);
var jp = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(f3.list(e2), () => s2.admin.variants.list(e2), t);
  return { ...r2, ...o2 };
};
var zp = (e2, t, s2) => {
  let { client: r2 } = n2(), { data: o2, ...m2 } = useQuery(f3.detail(e2), () => r2.admin.variants.retrieve(e2, t), s2);
  return { ...o2, ...m2 };
};
var Hp = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(f3.detail(e2), () => s2.admin.variants.getInventory(e2), t);
  return { ...r2, ...o2 };
};
var Qr = "admin_orders";
var p2 = { ...a(Qr), detailOrder(e2, t) {
  return [...this.detail(e2), { ...t || {} }];
} };
var rd = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(p2.list(e2), () => s2.admin.orders.list(e2), t);
  return { ...r2, ...o2 };
};
var od = (e2, t, s2) => {
  let { client: r2 } = n2(), { data: o2, ...m2 } = useQuery(p2.detailOrder(e2, t), () => r2.admin.orders.retrieve(e2, t), s2);
  return { ...o2, ...m2 };
};
var ld = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orders.createClaim(e2, o2), i3(r2, p2.detail(e2), t));
};
var Rd = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(({ claim_id: o2, ...m2 }) => s2.admin.orders.updateClaim(e2, o2, m2), i3(r2, p2.detail(e2), t));
};
var yd = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orders.cancelClaim(e2, o2), i3(r2, p2.detail(e2), t));
};
var Ad = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(({ claim_id: o2, ...m2 }) => s2.admin.orders.fulfillClaim(e2, o2, m2), i3(r2, [p2.detail(e2), f3.all, d2.lists()], t));
};
var fd = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(({ claim_id: o2, fulfillment_id: m2 }) => s2.admin.orders.cancelClaimFulfillment(e2, o2, m2), i3(r2, p2.detail(e2), t));
};
var Pd = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(({ claim_id: o2, ...m2 }) => s2.admin.orders.createClaimShipment(e2, o2, m2), i3(r2, p2.detail(e2), t));
};
var hr = "admin_collections";
var q2 = a(hr);
var Ud = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(q2.list(e2), () => s2.admin.collections.list(e2), t);
  return { ...r2, ...o2 };
};
var qd = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(q2.detail(e2), () => s2.admin.collections.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var vd = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.collections.create(r2), i3(s2, q2.lists(), e2));
};
var _d = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.collections.update(e2, o2), i3(r2, [q2.lists(), q2.detail(e2)], t));
};
var Id = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.collections.delete(e2), i3(r2, [q2.lists(), q2.detail(e2)], t));
};
var Ld = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.collections.addProducts(e2, o2), i3(r2, [q2.lists(), q2.detail(e2)], t));
};
var bd = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.collections.removeProducts(e2, o2), i3(r2, [q2.lists(), q2.detail(e2)], t));
};
var Dr = "admin_currencies";
var _e2 = a(Dr);
var Vd = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(_e2.list(e2), () => s2.admin.currencies.list(e2), t);
  return { ...r2, ...o2 };
};
var $d = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.currencies.update(e2, o2), i3(r2, [_e2.lists(), _e2.detail(e2)], t));
};
var Ir = "admin_customer_groups";
var x2 = { ...a(Ir), detailCustomer(e2, t) {
  return [...this.detail(e2), "customers", { ...t || {} }];
} };
var iu = (e2, t, s2) => {
  let { client: r2 } = n2(), { data: o2, ...m2 } = useQuery(x2.detail(e2), () => r2.admin.customerGroups.retrieve(e2, t), s2);
  return { ...o2, ...m2 };
};
var au = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(x2.list(e2), () => s2.admin.customerGroups.list(e2), t);
  return { ...r2, ...o2 };
};
var mu = (e2, t, s2) => {
  let { client: r2 } = n2(), { data: o2, ...m2 } = useQuery(x2.detailCustomer(e2, t), () => r2.admin.customerGroups.listCustomers(e2, t), s2);
  return { ...o2, ...m2 };
};
var yu = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.customerGroups.create(r2), i3(s2, x2.lists(), e2));
};
var Au = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.customerGroups.update(e2, o2), i3(r2, [x2.lists(), x2.detail(e2)], t));
};
var fu = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.customerGroups.delete(e2), i3(r2, [x2.lists(), x2.detail(e2)], t));
};
var Pu = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.customerGroups.addCustomers(e2, o2), i3(r2, [x2.lists(), x2.detailCustomer(e2)], t));
};
var Cu = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.customerGroups.removeCustomers(e2, o2), i3(r2, [x2.lists(), x2.detailCustomer(e2)], t));
};
var Lr = "admin_customers";
var M2 = a(Lr);
var Mu = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(M2.list(e2), () => s2.admin.customers.list(e2), t);
  return { ...r2, ...o2 };
};
var Ku = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(M2.detail(e2), () => s2.admin.customers.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var Iu = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.customers.create(r2), i3(s2, M2.lists(), e2));
};
var Lu = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.customers.update(e2, o2), i3(r2, [M2.lists(), M2.detail(e2)], t));
};
var br = "admin_discounts";
var R2 = { ...a(br), detailCondition(e2, t) {
  return [...this.detail(e2), "condition", { ...t || {} }];
} };
var Bu = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(R2.list(e2), () => s2.admin.discounts.list(e2), t);
  return { ...r2, ...o2 };
};
var Vu = (e2, t, s2) => {
  let { client: r2 } = n2(), { data: o2, ...m2 } = useQuery(R2.detail(e2), () => r2.admin.discounts.retrieve(e2, t), s2);
  return { ...o2, ...m2 };
};
var ku = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(R2.detail(e2), () => s2.admin.discounts.retrieveByCode(e2), t);
  return { ...r2, ...o2 };
};
var Ju = (e2, t, s2, r2) => {
  let { client: o2 } = n2(), { data: m2, ...S2 } = useQuery(R2.detailCondition(t), () => o2.admin.discounts.getCondition(e2, t, s2), r2);
  return { ...m2, ...S2 };
};
var ec = (e2, t, s2, r2) => {
  let { client: o2 } = n2(), m2 = useQueryClient();
  return useMutation((S2) => o2.admin.discounts.addConditionResourceBatch(e2, t, S2, s2), i3(m2, R2.detail(e2), r2));
};
var tc = (e2, t, s2) => {
  let { client: r2 } = n2(), o2 = useQueryClient();
  return useMutation((m2) => r2.admin.discounts.deleteConditionResourceBatch(e2, t, m2), i3(o2, [R2.detail(e2)], s2));
};
var sc = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.discounts.create(r2), i3(s2, R2.lists(), e2));
};
var rc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.discounts.update(e2, o2), i3(r2, R2.detail(e2), t));
};
var oc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.discounts.delete(e2), i3(r2, R2.lists(), t));
};
var nc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.discounts.addRegion(e2, o2), i3(r2, R2.detail(e2), t));
};
var ic = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.discounts.removeRegion(e2, o2), i3(r2, R2.detail(e2), t));
};
var ac = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.discounts.createDynamicCode(e2, o2), i3(r2, [R2.lists(), R2.detail(e2)], t));
};
var mc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.discounts.deleteDynamicCode(e2, o2), i3(r2, [R2.lists(), R2.detail(e2)], t));
};
var pc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.discounts.createCondition(e2, o2), i3(r2, R2.detail(e2), t));
};
var dc = (e2, t, s2) => {
  let { client: r2 } = n2(), o2 = useQueryClient();
  return useMutation((m2) => r2.admin.discounts.updateCondition(e2, t, m2), i3(o2, R2.detail(e2), s2));
};
var uc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.discounts.deleteCondition(e2, o2), i3(r2, R2.detail(e2), t));
};
var Gr = "admin_draft_orders";
var h = a(Gr);
var Cc = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(h.list(e2), () => s2.admin.draftOrders.list(e2), t);
  return { ...r2, ...o2 };
};
var Oc = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(h.detail(e2), () => s2.admin.draftOrders.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var Mc = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.draftOrders.create(r2), i3(s2, h.lists(), e2));
};
var Kc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.draftOrders.update(e2, o2), i3(r2, [h.detail(e2), h.lists()], t));
};
var Qc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.draftOrders.delete(e2), i3(r2, [h.detail(e2), h.lists()], t));
};
var hc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.draftOrders.markPaid(e2), i3(r2, h.detail(e2), t));
};
var Tc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.draftOrders.addLineItem(e2, o2), i3(r2, h.detail(e2), t));
};
var Dc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.draftOrders.removeLineItem(e2, o2), i3(r2, h.detail(e2), t));
};
var vc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(({ item_id: o2, ...m2 }) => s2.admin.draftOrders.updateLineItem(e2, o2, m2), i3(r2, h.detail(e2), t));
};
var Wr = "admin_gift_cards";
var V2 = a(Wr);
var Yc = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(V2.list(e2), () => s2.admin.giftCards.list(e2), t);
  return { ...r2, ...o2 };
};
var wc = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(V2.detail(e2), () => s2.admin.giftCards.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var zc = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.giftCards.create(r2), i3(s2, V2.lists(), e2));
};
var Hc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.giftCards.update(e2, o2), i3(r2, [V2.lists(), V2.detail(e2)], t));
};
var Xc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.giftCards.delete(e2), i3(r2, [V2.lists(), V2.detail(e2)], t));
};
var Nr = "admin_inventory_items";
var E2 = a(Nr);
var nl = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(E2.list(e2), () => s2.admin.inventoryItems.list(e2), { ...t });
  return { ...r2, ...o2 };
};
var il = (e2, t, s2) => {
  let { client: r2 } = n2(), { data: o2, ...m2 } = useQuery(E2.detail(e2), () => r2.admin.inventoryItems.retrieve(e2, t), { ...s2 });
  return { ...o2, ...m2 };
};
var al = (e2, t, s2) => {
  let { client: r2 } = n2(), { data: o2, ...m2 } = useQuery(E2.detail(e2), () => r2.admin.inventoryItems.listLocationLevels(e2, t), { ...s2 });
  return { ...o2, ...m2 };
};
var Rl = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2, o2) => t.admin.inventoryItems.create(r2, o2), i3(s2, [E2.lists()], e2));
};
var yl = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.inventoryItems.update(e2, o2), i3(r2, [E2.detail(e2)], t));
};
var Al = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.inventoryItems.delete(e2), i3(r2, [E2.detail(e2)], t));
};
var fl = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.inventoryItems.updateLocationLevel(e2, o2.stockLocationId, { incoming_quantity: o2.incoming_quantity, stocked_quantity: o2.stocked_quantity }), i3(r2, [E2.detail(e2), E2.lists()], t));
};
var Pl = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.inventoryItems.deleteLocationLevel(e2, o2), i3(r2, [E2.detail(e2), E2.lists()], t));
};
var Cl = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.inventoryItems.createLocationLevel(e2, o2), i3(r2, [E2.detail(e2), E2.lists()], t));
};
var wr = "admin_invites";
var Re2 = a(wr);
var Ml = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(Re2.lists(), () => t.admin.invites.list(), e2);
  return { ...s2, ...r2 };
};
var _l = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.invites.accept(r2), i3(s2, Re2.lists(), e2));
};
var Il = (e2, t) => {
  let { client: s2 } = n2();
  return useMutation(() => s2.admin.invites.resend(e2), t);
};
var Ll = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.invites.create(r2), i3(s2, Re2.lists(), e2));
};
var bl = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.invites.delete(e2), i3(r2, [Re2.lists(), Re2.detail(e2)], t));
};
var Fr = "admin_notes";
var k2 = a(Fr);
var Vl = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(k2.list(e2), () => s2.admin.notes.list(e2), t);
  return { ...r2, ...o2 };
};
var kl = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(k2.detail(e2), () => s2.admin.notes.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var Zl = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.notes.create(r2), i3(s2, k2.lists(), e2));
};
var eR = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.notes.update(e2, o2), i3(r2, [k2.detail(e2), k2.lists()], t));
};
var tR = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.notes.delete(e2), i3(r2, [k2.detail(e2), k2.lists()], t));
};
var Vr = "admin_notifications";
var be2 = a(Vr);
var pR = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(be2.list(e2), () => s2.admin.notifications.list(e2), t);
  return { ...r2, ...o2 };
};
var AR = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.notifications.resend(e2, o2), i3(r2, [be2.lists(), be2.detail(e2)], t));
};
var KR = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orders.update(e2, o2), i3(r2, [p2.lists(), p2.detail(e2)], t));
};
var QR = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.orders.cancel(e2), i3(r2, [p2.lists(), p2.detail(e2)], t));
};
var hR = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.orders.complete(e2), i3(r2, [p2.lists(), p2.detail(e2)], t));
};
var TR = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.orders.capturePayment(e2), i3(r2, [p2.lists(), p2.detail(e2)], t));
};
var DR = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orders.refundPayment(e2, o2), i3(r2, [p2.lists(), p2.detail(e2)], t));
};
var vR = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orders.createFulfillment(e2, o2), i3(r2, [p2.lists(), p2.detail(e2), f3.all, d2.lists()], t));
};
var _R = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orders.cancelFulfillment(e2, o2), i3(r2, [p2.lists(), p2.detail(e2)], t));
};
var IR = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orders.createShipment(e2, o2), i3(r2, p2.detail(e2), t));
};
var LR = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orders.requestReturn(e2, o2), i3(r2, p2.detail(e2), t));
};
var bR = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orders.addShippingMethod(e2, o2), i3(r2, p2.detail(e2), t));
};
var GR = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.orders.archive(e2), i3(r2, [p2.lists(), p2.detail(e2)], t));
};
var jr = "admin_order_edits";
var c2 = a(jr);
var kR = (e2, t, s2) => {
  let { client: r2 } = n2(), { data: o2, ...m2 } = useQuery(c2.detail(e2), () => r2.admin.orderEdits.retrieve(e2, t), s2);
  return { ...o2, ...m2 };
};
var JR = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(c2.list(e2), () => s2.admin.orderEdits.list(e2), t);
  return { ...r2, ...o2 };
};
var ty = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.orderEdits.create(r2), i3(s2, [c2.lists(), p2.details()], e2));
};
var sy = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.orderEdits.delete(e2), i3(r2, [c2.detail(e2), c2.lists(), p2.details()], t));
};
var ry = (e2, t, s2) => {
  let { client: r2 } = n2(), o2 = useQueryClient();
  return useMutation(() => r2.admin.orderEdits.deleteItemChange(e2, t), i3(o2, [c2.detail(e2), c2.lists()], s2));
};
var oy = (e2, t, s2) => {
  let { client: r2 } = n2(), o2 = useQueryClient();
  return useMutation((m2) => r2.admin.orderEdits.updateLineItem(e2, t, m2), i3(o2, [c2.detail(e2), c2.lists()], s2));
};
var ny = (e2, t, s2) => {
  let { client: r2 } = n2(), o2 = useQueryClient();
  return useMutation(() => r2.admin.orderEdits.removeLineItem(e2, t), i3(o2, [c2.detail(e2), c2.lists()], s2));
};
var iy = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orderEdits.update(e2, o2), i3(r2, [c2.lists(), c2.detail(e2), p2.details()], t));
};
var ay = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orderEdits.addLineItem(e2, o2), i3(r2, [c2.lists(), c2.detail(e2)], t));
};
var my = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.orderEdits.requestConfirmation(e2), i3(r2, [c2.lists(), c2.detail(e2), p2.details()], t));
};
var py = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.orderEdits.cancel(e2), i3(r2, [c2.lists(), c2.detail(e2), p2.details()], t));
};
var dy = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.orderEdits.confirm(e2), i3(r2, [c2.lists(), c2.detail(e2), p2.details()], t));
};
var zr = "admin_price_lists";
var y2 = { ...a(zr), detailProducts(e2, t) {
  return [...this.detail(e2), "products", { ...t || {} }];
} };
var Py = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(y2.list(e2), () => s2.admin.priceLists.list(e2), t);
  return { ...r2, ...o2 };
};
var Cy = (e2, t, s2) => {
  let { client: r2 } = n2(), { data: o2, ...m2 } = useQuery(y2.detailProducts(e2, t), () => r2.admin.priceLists.listProducts(e2, t), s2);
  return { ...o2, ...m2 };
};
var Oy = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(y2.detail(e2), () => s2.admin.priceLists.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var Qy = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.priceLists.create(r2), i3(s2, y2.lists(), e2));
};
var hy = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.priceLists.update(e2, o2), i3(r2, [y2.detail(e2), y2.lists(), y2.detailProducts(e2)], t));
};
var Ty = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.priceLists.delete(e2), i3(r2, [y2.detail(e2), y2.lists()], t));
};
var Dy = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.priceLists.addPrices(e2, o2), i3(r2, [y2.lists(), y2.detailProducts(e2)], t));
};
var vy = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.priceLists.deletePrices(e2, o2), i3(r2, [y2.detail(e2), y2.lists(), y2.detailProducts(e2)], t));
};
var _y = (e2, t, s2) => {
  let { client: r2 } = n2(), o2 = useQueryClient();
  return useMutation(() => r2.admin.priceLists.deleteProductPrices(e2, t), i3(o2, [y2.detail(e2), y2.lists(), d2.detail(t)], s2));
};
var Iy = (e2, t, s2) => {
  let { client: r2 } = n2(), o2 = useQueryClient();
  return useMutation(() => r2.admin.priceLists.deleteVariantPrices(e2, t), i3(o2, [y2.detail(e2), y2.lists(), f3.detail(t)], s2));
};
var Xr = "admin_product_tags";
var $r = a(Xr);
var Fy = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery($r.list(e2), () => s2.admin.productTags.list(e2), t);
  return { ...r2, ...o2 };
};
var eo = "admin_product_types";
var to = a(eo);
var Hy = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(to.list(e2), () => s2.admin.productTypes.list(e2), t);
  return { ...r2, ...o2 };
};
var so = "product_categories";
var T2 = a(so);
var rA = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(T2.list(e2), () => s2.admin.productCategories.list(e2), t);
  return { ...r2, ...o2 };
};
var oA = (e2, t, s2) => {
  let { client: r2 } = n2(), { data: o2, ...m2 } = useQuery(T2.detail(e2), () => r2.admin.productCategories.retrieve(e2, t), s2);
  return { ...o2, ...m2 };
};
var cA = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.productCategories.create(r2), i3(s2, [T2.list(), d2.details()], e2));
};
var lA = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.productCategories.update(e2, o2), i3(r2, [T2.lists(), T2.detail(e2), d2.details()], t));
};
var RA = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.productCategories.delete(e2), i3(r2, [T2.lists(), T2.detail(e2), d2.all], t));
};
var yA = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.productCategories.addProducts(e2, o2), i3(r2, [T2.lists(), T2.detail(e2), d2.list({ product_category_id: [e2] })], t));
};
var AA = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.productCategories.removeProducts(e2, o2), i3(r2, [T2.lists(), T2.detail(e2), d2.list({ product_category_id: [e2] })], t));
};
var ro = "admin_publishable_api_keys";
var g2 = { ...a(ro), detailSalesChannels(e2, t) {
  return [...this.detail(e2), "sales_channels", { ...t || {} }];
} };
var SA = (e2, t, s2) => {
  let { client: r2 } = n2(), { data: o2, ...m2 } = useQuery(g2.detail(e2), () => r2.admin.publishableApiKeys.retrieve(e2, t), s2);
  return { ...o2, ...m2 };
};
var UA = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(g2.list(e2), () => s2.admin.publishableApiKeys.list(e2), t);
  return { ...r2, ...o2 };
};
var qA = (e2, t, s2) => {
  let { client: r2 } = n2(), { data: o2, ...m2 } = useQuery(g2.detailSalesChannels(e2, t), () => r2.admin.publishableApiKeys.listSalesChannels(e2, t), s2);
  return { ...o2, ...m2 };
};
var vA = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.publishableApiKeys.create(r2), i3(s2, [g2.lists()], e2));
};
var _A = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.publishableApiKeys.update(e2, o2), i3(r2, [g2.lists(), g2.detail(e2), g2.details()], t));
};
var IA = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.publishableApiKeys.delete(e2), i3(r2, [g2.detail(e2), g2.lists()], t));
};
var LA = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.publishableApiKeys.revoke(e2), i3(r2, [g2.lists(), g2.detail(e2)], t));
};
var bA = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.publishableApiKeys.addSalesChannelsBatch(e2, o2), i3(r2, [g2.detailSalesChannels(e2)], t));
};
var GA = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.publishableApiKeys.deleteSalesChannelsBatch(e2, o2), i3(r2, [g2.detailSalesChannels(e2)], t));
};
var oo = "admin_regions";
var O2 = a(oo);
var kA = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(O2.list(e2), () => s2.admin.regions.list(e2), t);
  return { ...r2, ...o2 };
};
var JA = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(O2.detail(e2), () => s2.admin.regions.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var jA = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(O2.detail(`${e2}_fullfillment-options`), () => s2.admin.regions.retrieveFulfillmentOptions(e2), t);
  return { ...r2, ...o2 };
};
var tf = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.regions.create(r2), i3(s2, O2.lists(), e2));
};
var sf = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.regions.update(e2, o2), i3(r2, [O2.lists(), O2.detail(e2)], t));
};
var rf = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.regions.delete(e2), i3(r2, [O2.lists(), O2.detail(e2)], t));
};
var of = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.regions.addCountry(e2, o2), i3(r2, O2.detail(e2), t));
};
var nf = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.regions.deleteCountry(e2, o2), i3(r2, O2.detail(e2), t));
};
var af = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.regions.addFulfillmentProvider(e2, o2), i3(r2, O2.detail(e2), t));
};
var mf = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.regions.deleteFulfillmentProvider(e2, o2), i3(r2, O2.detail(e2), t));
};
var pf = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.regions.addPaymentProvider(e2, o2), i3(r2, O2.detail(e2), t));
};
var df = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.regions.deletePaymentProvider(e2, o2), i3(r2, O2.detail(e2), t));
};
var no = "admin_return_reasons";
var J2 = a(no);
var Pf = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(J2.lists(), () => t.admin.returnReasons.list(), e2);
  return { ...s2, ...r2 };
};
var Cf = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(J2.detail(e2), () => s2.admin.returnReasons.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var qf = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.returnReasons.create(r2), i3(s2, J2.lists(), e2));
};
var Mf = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.returnReasons.update(e2, o2), i3(r2, [J2.detail(e2), J2.lists()], t));
};
var Kf = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.returnReasons.delete(e2), i3(r2, [J2.detail(e2), J2.lists()], t));
};
var ao = "admin_returns";
var fe2 = a(ao);
var Lf = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(fe2.lists(), () => t.admin.returns.list(), e2);
  return { ...s2, ...r2 };
};
var Ff = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.returns.receive(e2, o2), i3(r2, [fe2.detail(e2), fe2.list()], t));
};
var Bf = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.returns.cancel(e2), i3(r2, [fe2.detail(e2), fe2.list()], t));
};
var mo = "admin_stock_locations";
var j2 = a(mo);
var $f = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(j2.list(e2), () => s2.admin.reservations.list(e2), { ...t });
  return { ...r2, ...o2 };
};
var Zf = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(j2.detail(e2), () => s2.admin.reservations.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var aP = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.reservations.create(r2), i3(s2, [j2.lists(), f3.all], e2));
};
var mP = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.reservations.update(e2, o2), i3(r2, [j2.lists(), j2.detail(e2), f3.all], t));
};
var pP = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.reservations.delete(e2), i3(r2, [j2.lists(), j2.detail(e2), f3.all], t));
};
var po = "admin_sales_channels";
var P2 = a(po);
var fP = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(P2.detail(e2), () => s2.admin.salesChannels.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var PP = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(P2.list(e2), () => s2.admin.salesChannels.list(e2), t);
  return { ...r2, ...o2 };
};
var uo = "admin_stock_locations";
var _2 = a(uo);
var EP = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(_2.list(e2), () => s2.admin.stockLocations.list(e2), t);
  return { ...r2, ...o2 };
};
var SP = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(_2.detail(e2), () => s2.admin.stockLocations.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var vP = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.stockLocations.create(r2), i3(s2, [_2.lists()], e2));
};
var _P = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.stockLocations.update(e2, o2), i3(r2, [_2.lists(), _2.detail(e2)], t));
};
var IP = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.stockLocations.delete(e2), i3(r2, [_2.lists(), _2.detail(e2), f3.all, d2.lists()], t));
};
var JP = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.salesChannels.create(r2), i3(s2, [P2.list()], e2));
};
var jP = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.salesChannels.update(e2, o2), i3(r2, [P2.lists(), P2.detail(e2)], t));
};
var zP = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.salesChannels.delete(e2), i3(r2, [P2.lists(), P2.detail(e2)], t));
};
var HP = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.salesChannels.removeProducts(e2, o2), i3(r2, [P2.lists(), P2.detail(e2), d2.list({ sales_channel_id: [e2] })], t));
};
var XP = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.salesChannels.addProducts(e2, o2), i3(r2, [P2.lists(), P2.detail(e2), d2.list({ sales_channel_id: [e2] })], t));
};
var $P = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation(({ sales_channel_id: r2, location_id: o2 }) => t.admin.salesChannels.addLocation(r2, { location_id: o2 }), i3(s2, [P2.lists(), P2.details(), _2.all], e2));
};
var ZP = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation(({ sales_channel_id: r2, location_id: o2 }) => t.admin.salesChannels.removeLocation(r2, { location_id: o2 }), i3(s2, [P2.lists(), P2.details(), _2.all], e2));
};
var co = "admin_shipping_options";
var z2 = a(co);
var aC = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(z2.list(e2), () => s2.admin.shippingOptions.list(e2), t);
  return { ...r2, ...o2 };
};
var mC = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(z2.detail(e2), () => s2.admin.shippingOptions.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var yC = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.shippingOptions.create(r2), i3(s2, z2.lists(), e2));
};
var AC = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.shippingOptions.update(e2, o2), i3(r2, [z2.lists(), z2.detail(e2)], t));
};
var fC = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.shippingOptions.delete(e2), i3(r2, [z2.lists(), z2.detail(e2)], t));
};
var lo = "admin_shippingProfiles";
var H2 = a(lo);
var UC = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(H2.lists(), () => t.admin.shippingProfiles.list(), e2);
  return { ...s2, ...r2 };
};
var qC = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(H2.detail(e2), () => s2.admin.shippingProfiles.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var vC = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.shippingProfiles.create(r2), i3(s2, H2.lists(), e2));
};
var _C = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.shippingProfiles.update(e2, o2), i3(r2, [H2.lists(), H2.detail(e2)], t));
};
var IC = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.shippingProfiles.delete(e2), i3(r2, [H2.lists(), H2.detail(e2)], t));
};
var Ro = "admin_store";
var ie2 = a(Ro);
var FC = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(ie2.detail("payment_providers"), () => t.admin.store.listPaymentProviders(), e2);
  return { ...s2, ...r2 };
};
var BC = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(ie2.detail("tax_providers"), () => t.admin.store.listTaxProviders(), e2);
  return { ...s2, ...r2 };
};
var VC = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(ie2.details(), () => t.admin.store.retrieve(), e2);
  return { ...s2, ...r2 };
};
var $C = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.store.update(r2), i3(s2, ie2.details(), e2));
};
var ZC = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.store.deleteCurrency(r2), i3(s2, ie2.details(), e2));
};
var eO = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.store.deleteCurrency(r2), i3(s2, ie2.details(), e2));
};
var yo = "admin_swaps";
var X2 = a(yo);
var mO = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(X2.list(e2), () => s2.admin.swaps.list(e2), t);
  return { ...r2, ...o2 };
};
var pO = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(X2.detail(e2), () => s2.admin.swaps.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var fO = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orders.createSwap(e2, o2), i3(r2, [p2.detail(e2), X2.lists()], t));
};
var PO = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orders.cancelSwap(e2, o2), i3(r2, [p2.detail(e2), X2.lists()], t));
};
var CO = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(({ swap_id: o2, ...m2 }) => s2.admin.orders.fulfillSwap(e2, o2, m2), i3(r2, [p2.detail(e2), X2.lists(), f3.all, d2.lists()], t));
};
var OO = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(({ swap_id: o2, ...m2 }) => s2.admin.orders.createSwapShipment(e2, o2, m2), i3(r2, p2.detail(e2), t));
};
var gO = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orders.processSwapPayment(e2, o2), i3(r2, [p2.detail(e2), X2.lists()], t));
};
var xO = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(({ swap_id: o2, fulfillment_id: m2 }) => s2.admin.orders.cancelSwapFulfillment(e2, o2, m2), i3(r2, [p2.detail(e2), X2.lists()], t));
};
var Ao = "admin_tax_rates";
var l2 = a(Ao);
var hO = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(l2.list(e2), () => s2.admin.taxRates.list(e2), t);
  return { ...r2, ...o2 };
};
var TO = (e2, t, s2) => {
  let { client: r2 } = n2(), { data: o2, ...m2 } = useQuery(l2.detail(e2), () => r2.admin.taxRates.retrieve(e2, t), s2);
  return { ...o2, ...m2 };
};
var GO = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.taxRates.create(r2), i3(s2, l2.lists(), e2));
};
var WO = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.taxRates.update(e2, o2), i3(r2, [l2.lists(), l2.detail(e2)], t));
};
var NO = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.taxRates.delete(e2), i3(r2, [l2.lists(), l2.detail(e2)], t));
};
var YO = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.taxRates.addProducts(e2, o2), i3(r2, [l2.lists(), l2.detail(e2)], t));
};
var wO = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.taxRates.removeProducts(e2, o2), i3(r2, [l2.lists(), l2.detail(e2)], t));
};
var FO = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.taxRates.addProductTypes(e2, o2), i3(r2, [l2.lists(), l2.detail(e2)], t));
};
var BO = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.taxRates.removeProductTypes(e2, o2), i3(r2, [l2.lists(), l2.detail(e2)], t));
};
var VO = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.taxRates.addShippingOptions(e2, o2), i3(r2, [l2.lists(), l2.detail(e2)], t));
};
var kO = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.taxRates.removeShippingOptions(e2, o2), i3(r2, [l2.lists(), l2.detail(e2)], t));
};
var tg = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.uploads.create(r2), i3(s2, void 0, e2));
};
var sg = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.uploads.createProtected(r2), i3(s2, void 0, e2));
};
var rg = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.uploads.getPresignedDownloadUrl(r2), i3(s2, void 0, e2));
};
var og = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.uploads.delete(r2), i3(s2, void 0, e2));
};
var fo = "admin_users";
var hs2 = a(fo);
var ug = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(hs2.lists(), () => t.admin.users.list(), e2);
  return { ...s2, ...r2 };
};
var cg = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(hs2.detail(e2), () => s2.admin.users.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var Cg = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.users.create(r2), i3(s2, M2.lists(), e2));
};
var Og = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.users.update(e2, o2), i3(r2, [M2.lists(), M2.detail(e2)], t));
};
var gg = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.users.delete(e2), i3(r2, [M2.detail(e2), M2.lists()], t));
};
var xg = (e2) => {
  let { client: t } = n2();
  return useMutation((s2) => t.admin.users.resetPassword(s2), e2);
};
var Eg = (e2) => {
  let { client: t } = n2();
  return useMutation((s2) => t.admin.users.sendResetPasswordToken(s2), e2);
};
var Co = "paymentCollection";
var $2 = a(Co);
var Tg = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery($2.detail(e2), () => s2.admin.paymentCollections.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var Gg = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.paymentCollections.delete(e2), i3(r2, [$2.detail(e2), $2.lists()], t));
};
var Wg = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.paymentCollections.update(e2, o2), i3(r2, [$2.detail(e2), $2.lists()], t));
};
var Ng = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.paymentCollections.markAsAuthorized(e2), i3(r2, [$2.detail(e2), $2.lists()], t));
};
var go = "payment";
var Oe2 = a(go);
var jg = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(Oe2.detail(e2), () => s2.admin.payments.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var tx = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.payments.capturePayment(e2), i3(r2, [Oe2.detail(e2), Oe2.lists()], t));
};
var sx = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.payments.refundPayment(e2, o2), i3(r2, [Oe2.detail(e2), Oe2.lists()], t));
};
export {
  _m as CartProvider,
  qo as MedusaProvider,
  wo as SessionCartProvider,
  ve2 as adminAuthKeys,
  B2 as adminBatchJobsKeys,
  q2 as adminCollectionKeys,
  _e2 as adminCurrenciesKeys,
  x2 as adminCustomerGroupKeys,
  M2 as adminCustomerKeys,
  R2 as adminDiscountKeys,
  h as adminDraftOrderKeys,
  V2 as adminGiftCardKeys,
  E2 as adminInventoryItemsKeys,
  Re2 as adminInviteKeys,
  k2 as adminNoteKeys,
  be2 as adminNotificationKeys,
  c2 as adminOrderEditsKeys,
  p2 as adminOrderKeys,
  $2 as adminPaymentCollectionQueryKeys,
  Oe2 as adminPaymentQueryKeys,
  y2 as adminPriceListKeys,
  T2 as adminProductCategoryKeys,
  d2 as adminProductKeys,
  $r as adminProductTagKeys,
  to as adminProductTypeKeys,
  g2 as adminPublishableApiKeysKeys,
  O2 as adminRegionKeys,
  j2 as adminReservationsKeys,
  fe2 as adminReturnKeys,
  J2 as adminReturnReasonKeys,
  P2 as adminSalesChannelsKeys,
  z2 as adminShippingOptionKeys,
  H2 as adminShippingProfileKeys,
  _2 as adminStockLocationsKeys,
  ie2 as adminStoreKeys,
  X2 as adminSwapKeys,
  l2 as adminTaxRateKeys,
  hs2 as adminUserKeys,
  f3 as adminVariantKeys,
  Hs2 as cartKeys,
  wt as collectionKeys,
  ht2 as computeAmount,
  Gs2 as computeVariantPrice,
  je2 as customerKeys,
  To as formatAmount,
  ho as formatVariantPrice,
  ge2 as generateCartState,
  ke2 as getVariantPrice,
  tr as giftCardKeys,
  pe2 as orderEditQueryKeys,
  Z2 as orderKeys,
  U2 as paymentCollectionQueryKeys,
  $t as productKeys,
  dr as productTagKeys,
  lr as productTypeKeys,
  Ht as storeProductCategoryKeys,
  Nt as useAddShippingMethodToCart,
  _l as useAdminAcceptInvite,
  Pu as useAdminAddCustomersToCustomerGroup,
  ec as useAdminAddDiscountConditionResourceBatch,
  $P as useAdminAddLocationToSalesChannel,
  yA as useAdminAddProductsToCategory,
  Ld as useAdminAddProductsToCollection,
  XP as useAdminAddProductsToSalesChannel,
  bA as useAdminAddPublishableKeySalesChannelsBatch,
  bR as useAdminAddShippingMethod,
  ZC as useAdminAddStoreCurrency,
  GR as useAdminArchiveOrder,
  ip as useAdminBatchJob,
  np as useAdminBatchJobs,
  Rp as useAdminCancelBatchJob,
  yd as useAdminCancelClaim,
  fd as useAdminCancelClaimFulfillment,
  _R as useAdminCancelFulfillment,
  QR as useAdminCancelOrder,
  py as useAdminCancelOrderEdit,
  Bf as useAdminCancelReturn,
  PO as useAdminCancelSwap,
  xO as useAdminCancelSwapFulfillment,
  TR as useAdminCapturePayment,
  qd as useAdminCollection,
  Ud as useAdminCollections,
  hR as useAdminCompleteOrder,
  yp as useAdminConfirmBatchJob,
  dy as useAdminConfirmOrderEdit,
  lp as useAdminCreateBatchJob,
  ld as useAdminCreateClaim,
  Pd as useAdminCreateClaimShipment,
  vd as useAdminCreateCollection,
  Iu as useAdminCreateCustomer,
  yu as useAdminCreateCustomerGroup,
  sc as useAdminCreateDiscount,
  Mc as useAdminCreateDraftOrder,
  ac as useAdminCreateDynamicDiscountCode,
  vR as useAdminCreateFulfillment,
  zc as useAdminCreateGiftCard,
  Rl as useAdminCreateInventoryItem,
  Ll as useAdminCreateInvite,
  Cl as useAdminCreateLocationLevel,
  Zl as useAdminCreateNote,
  ty as useAdminCreateOrderEdit,
  rg as useAdminCreatePresignedDownloadUrl,
  Qy as useAdminCreatePriceList,
  Dy as useAdminCreatePriceListPrices,
  Dp as useAdminCreateProduct,
  cA as useAdminCreateProductCategory,
  Gp as useAdminCreateProductOption,
  YO as useAdminCreateProductTaxRates,
  FO as useAdminCreateProductTypeTaxRates,
  vA as useAdminCreatePublishableApiKey,
  tf as useAdminCreateRegion,
  aP as useAdminCreateReservation,
  qf as useAdminCreateReturnReason,
  JP as useAdminCreateSalesChannel,
  IR as useAdminCreateShipment,
  yC as useAdminCreateShippingOption,
  vC as useAdminCreateShippingProfile,
  VO as useAdminCreateShippingTaxRates,
  vP as useAdminCreateStockLocation,
  fO as useAdminCreateSwap,
  OO as useAdminCreateSwapShipment,
  GO as useAdminCreateTaxRate,
  Cg as useAdminCreateUser,
  Ip as useAdminCreateVariant,
  Vd as useAdminCurrencies,
  Ku as useAdminCustomer,
  iu as useAdminCustomerGroup,
  mu as useAdminCustomerGroupCustomers,
  au as useAdminCustomerGroups,
  Mu as useAdminCustomers,
  Id as useAdminDeleteCollection,
  fu as useAdminDeleteCustomerGroup,
  oc as useAdminDeleteDiscount,
  tc as useAdminDeleteDiscountConditionResourceBatch,
  Qc as useAdminDeleteDraftOrder,
  mc as useAdminDeleteDynamicDiscountCode,
  og as useAdminDeleteFile,
  Xc as useAdminDeleteGiftCard,
  Al as useAdminDeleteInventoryItem,
  bl as useAdminDeleteInvite,
  Pl as useAdminDeleteLocationLevel,
  tR as useAdminDeleteNote,
  sy as useAdminDeleteOrderEdit,
  ry as useAdminDeleteOrderEditItemChange,
  Gg as useAdminDeletePaymentCollection,
  Ty as useAdminDeletePriceList,
  vy as useAdminDeletePriceListPrices,
  _y as useAdminDeletePriceListProductPrices,
  Iy as useAdminDeletePriceListVariantPrices,
  _p as useAdminDeleteProduct,
  RA as useAdminDeleteProductCategory,
  Np as useAdminDeleteProductOption,
  wO as useAdminDeleteProductTaxRates,
  BO as useAdminDeleteProductTypeTaxRates,
  AA as useAdminDeleteProductsFromCategory,
  HP as useAdminDeleteProductsFromSalesChannel,
  IA as useAdminDeletePublishableApiKey,
  rf as useAdminDeleteRegion,
  pP as useAdminDeleteReservation,
  Kf as useAdminDeleteReturnReason,
  zP as useAdminDeleteSalesChannel,
  Xm as useAdminDeleteSession,
  fC as useAdminDeleteShippingOption,
  IC as useAdminDeleteShippingProfile,
  kO as useAdminDeleteShippingTaxRates,
  IP as useAdminDeleteStockLocation,
  eO as useAdminDeleteStoreCurrency,
  NO as useAdminDeleteTaxRate,
  gg as useAdminDeleteUser,
  bp as useAdminDeleteVariant,
  Vu as useAdminDiscount,
  nc as useAdminDiscountAddRegion,
  pc as useAdminDiscountCreateCondition,
  uc as useAdminDiscountRemoveCondition,
  ic as useAdminDiscountRemoveRegion,
  dc as useAdminDiscountUpdateCondition,
  Bu as useAdminDiscounts,
  Oc as useAdminDraftOrder,
  Tc as useAdminDraftOrderAddLineItem,
  hc as useAdminDraftOrderRegisterPayment,
  Dc as useAdminDraftOrderRemoveLineItem,
  vc as useAdminDraftOrderUpdateLineItem,
  Cc as useAdminDraftOrders,
  Ad as useAdminFulfillClaim,
  CO as useAdminFulfillSwap,
  ku as useAdminGetDiscountByCode,
  Ju as useAdminGetDiscountCondition,
  Fm as useAdminGetSession,
  wc as useAdminGiftCard,
  Yc as useAdminGiftCards,
  il as useAdminInventoryItem,
  al as useAdminInventoryItemLocationLevels,
  nl as useAdminInventoryItems,
  Ml as useAdminInvites,
  Hm as useAdminLogin,
  Ng as useAdminMarkPaymentCollectionAsAuthorized,
  kl as useAdminNote,
  Vl as useAdminNotes,
  pR as useAdminNotifications,
  od as useAdminOrder,
  kR as useAdminOrderEdit,
  ay as useAdminOrderEditAddLineItem,
  ny as useAdminOrderEditDeleteLineItem,
  oy as useAdminOrderEditUpdateLineItem,
  JR as useAdminOrderEdits,
  rd as useAdminOrders,
  jg as useAdminPayment,
  Tg as useAdminPaymentCollection,
  tx as useAdminPaymentsCapturePayment,
  sx as useAdminPaymentsRefundPayment,
  Oy as useAdminPriceList,
  Cy as useAdminPriceListProducts,
  Py as useAdminPriceLists,
  gO as useAdminProcessSwapPayment,
  Sp as useAdminProduct,
  rA as useAdminProductCategories,
  oA as useAdminProductCategory,
  Up as useAdminProductTagUsage,
  Fy as useAdminProductTags,
  Hy as useAdminProductTypes,
  Ep as useAdminProducts,
  SA as useAdminPublishableApiKey,
  qA as useAdminPublishableApiKeySalesChannels,
  UA as useAdminPublishableApiKeys,
  Ff as useAdminReceiveReturn,
  DR as useAdminRefundPayment,
  JA as useAdminRegion,
  of as useAdminRegionAddCountry,
  af as useAdminRegionAddFulfillmentProvider,
  pf as useAdminRegionAddPaymentProvider,
  mf as useAdminRegionDeleteFulfillmentProvider,
  df as useAdminRegionDeletePaymentProvider,
  jA as useAdminRegionFulfillmentOptions,
  nf as useAdminRegionRemoveCountry,
  kA as useAdminRegions,
  Cu as useAdminRemoveCustomersFromCustomerGroup,
  ZP as useAdminRemoveLocationFromSalesChannel,
  bd as useAdminRemoveProductsFromCollection,
  GA as useAdminRemovePublishableKeySalesChannelsBatch,
  my as useAdminRequestOrderEditConfirmation,
  LR as useAdminRequestReturn,
  Il as useAdminResendInvite,
  AR as useAdminResendNotification,
  Zf as useAdminReservation,
  $f as useAdminReservations,
  xg as useAdminResetPassword,
  Cf as useAdminReturnReason,
  Pf as useAdminReturnReasons,
  Lf as useAdminReturns,
  LA as useAdminRevokePublishableApiKey,
  fP as useAdminSalesChannel,
  PP as useAdminSalesChannels,
  Eg as useAdminSendResetPasswordToken,
  mC as useAdminShippingOption,
  aC as useAdminShippingOptions,
  qC as useAdminShippingProfile,
  UC as useAdminShippingProfiles,
  SP as useAdminStockLocation,
  EP as useAdminStockLocations,
  VC as useAdminStore,
  FC as useAdminStorePaymentProviders,
  BC as useAdminStoreTaxProviders,
  pO as useAdminSwap,
  mO as useAdminSwaps,
  TO as useAdminTaxRate,
  hO as useAdminTaxRates,
  Rd as useAdminUpdateClaim,
  _d as useAdminUpdateCollection,
  $d as useAdminUpdateCurrency,
  Lu as useAdminUpdateCustomer,
  Au as useAdminUpdateCustomerGroup,
  rc as useAdminUpdateDiscount,
  Kc as useAdminUpdateDraftOrder,
  Hc as useAdminUpdateGiftCard,
  yl as useAdminUpdateInventoryItem,
  fl as useAdminUpdateLocationLevel,
  eR as useAdminUpdateNote,
  KR as useAdminUpdateOrder,
  iy as useAdminUpdateOrderEdit,
  Wg as useAdminUpdatePaymentCollection,
  hy as useAdminUpdatePriceList,
  vp as useAdminUpdateProduct,
  lA as useAdminUpdateProductCategory,
  Wp as useAdminUpdateProductOption,
  _A as useAdminUpdatePublishableApiKey,
  sf as useAdminUpdateRegion,
  mP as useAdminUpdateReservation,
  Mf as useAdminUpdateReturnReason,
  jP as useAdminUpdateSalesChannel,
  AC as useAdminUpdateShippingOption,
  _C as useAdminUpdateShippingProfile,
  _P as useAdminUpdateStockLocation,
  $C as useAdminUpdateStore,
  WO as useAdminUpdateTaxRate,
  Og as useAdminUpdateUser,
  Lp as useAdminUpdateVariant,
  tg as useAdminUploadFile,
  sg as useAdminUploadProtectedFile,
  cg as useAdminUser,
  ug as useAdminUsers,
  zp as useAdminVariant,
  jp as useAdminVariants,
  Hp as useAdminVariantsInventory,
  Ni as useAuthorizePaymentSession,
  Yi as useAuthorizePaymentSessionsBatch,
  vm as useCart,
  Ri as useCartOrder,
  Ha as useCartShippingOptions,
  rm as useCartSwap,
  un as useCollection,
  cn as useCollections,
  bt as useCompleteCart,
  ni as useCompleteOrderEdit,
  It as useCreateCart,
  Un as useCreateCustomer,
  Yn as useCreateLineItem,
  Gt as useCreatePaymentSession,
  wa as useCreateReturn,
  mm as useCreateSwap,
  On as useCustomerOrders,
  oi as useDeclineOrderEdit,
  Fn as useDeleteLineItem,
  tn as useDeletePaymentSession,
  jo as useGetCart,
  _n as useGiftCard,
  Ei as useGrantOrderAccess,
  Gi as useManageMultiplePaymentSessions,
  Wi as useManagePaymentSession,
  Cn as useMeCustomer,
  n2 as useMedusa,
  li as useOrder,
  Hn as useOrderEdit,
  yi as useOrders,
  Ti as usePaymentCollection,
  wi as usePaymentCollectionRefreshPaymentSession,
  Ca as useProduct,
  Hi as useProductCategories,
  Xi as useProductCategory,
  oa as useProductTags,
  ua as useProductTypes,
  Pa as useProducts,
  en as useRefreshPaymentSession,
  Ma as useRegion,
  qa as useRegions,
  xi as useRequestOrderAccess,
  Ia as useReturnReason,
  _a as useReturnReasons,
  Fo as useSessionCart,
  Wt as useSetPaymentSession,
  za as useShippingOptions,
  sn as useStartCheckout,
  Lt as useUpdateCart,
  wn as useUpdateLineItem,
  qn as useUpdateMe,
  Zo as useUpdatePaymentSession
};
//# sourceMappingURL=medusa-react.js.map
