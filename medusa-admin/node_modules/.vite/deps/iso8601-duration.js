import "./chunk-TFWDKVI3.js";

// node_modules/iso8601-duration/src/index.js
var numbers = "\\d+(?:[\\.,]\\d+)?";
var weekPattern = `(${numbers}W)`;
var datePattern = `(${numbers}Y)?(${numbers}M)?(${numbers}D)?`;
var timePattern = `T(${numbers}H)?(${numbers}M)?(${numbers}S)?`;
var iso8601 = `P(?:${weekPattern}|${datePattern}(?:${timePattern})?)`;
var objMap = ["weeks", "years", "months", "days", "hours", "minutes", "seconds"];
var defaultDuration = Object.freeze({
  years: 0,
  months: 0,
  weeks: 0,
  days: 0,
  hours: 0,
  minutes: 0,
  seconds: 0
});
var pattern = new RegExp(iso8601);
var parse = (durationString) => {
  return durationString.match(pattern).slice(1).reduce((prev, next, idx) => {
    prev[objMap[idx]] = parseFloat(next) || 0;
    return prev;
  }, {});
};
var end = (duration, startDate) => {
  duration = Object.assign({}, defaultDuration, duration);
  const timestamp = startDate ? startDate.getTime() : Date.now();
  const then = new Date(timestamp);
  then.setFullYear(then.getFullYear() + duration.years);
  then.setMonth(then.getMonth() + duration.months);
  then.setDate(then.getDate() + duration.days);
  then.setHours(then.getHours() + duration.hours);
  then.setMinutes(then.getMinutes() + duration.minutes);
  then.setMilliseconds(then.getMilliseconds() + duration.seconds * 1e3);
  then.setDate(then.getDate() + duration.weeks * 7);
  return then;
};
var toSeconds = (duration, startDate) => {
  duration = Object.assign({}, defaultDuration, duration);
  const timestamp = startDate ? startDate.getTime() : Date.now();
  const now = new Date(timestamp);
  const then = end(duration, now);
  const seconds = (then.getTime() - now.getTime()) / 1e3;
  return seconds;
};
var src_default = {
  end,
  toSeconds,
  pattern,
  parse
};
export {
  src_default as default,
  end,
  parse,
  pattern,
  toSeconds
};
//# sourceMappingURL=iso8601-duration.js.map
