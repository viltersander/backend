import {
  require_classnames
} from "./chunk-EFTG4AWR.js";
import {
  require_prop_types
} from "./chunk-PPLKJ7N6.js";
import {
  require_object_assign
} from "./chunk-V66CRQXE.js";
import {
  require_react
} from "./chunk-6CE3F7YD.js";
import {
  __commonJS
} from "./chunk-TFWDKVI3.js";

// node_modules/react-addons-shallow-compare/index.js
var require_react_addons_shallow_compare = __commonJS({
  "node_modules/react-addons-shallow-compare/index.js"(exports, module) {
    "use strict";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function is(x, y) {
      if (x === y) {
        return x !== 0 || y !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    }
    function shallowEqual(objA, objB) {
      if (is(objA, objB)) {
        return true;
      }
      if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
        return false;
      }
      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) {
        return false;
      }
      for (var i = 0; i < keysA.length; i++) {
        if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
          return false;
        }
      }
      return true;
    }
    function shallowCompare(instance, nextProps, nextState) {
      return !shallowEqual(instance.props, nextProps) || !shallowEqual(instance.state, nextState);
    }
    module.exports = shallowCompare;
  }
});

// node_modules/react-addons-update/index.js
var require_react_addons_update = __commonJS({
  "node_modules/react-addons-update/index.js"(exports, module) {
    "use strict";
    var _assign = require_object_assign();
    var hasOwnProperty = {}.hasOwnProperty;
    var validateFormat = function validateFormat2(format) {
    };
    if (true) {
      validateFormat = function validateFormat2(format) {
        if (format === void 0) {
          throw new Error("invariant requires an error message argument");
        }
      };
    }
    function invariant(condition, format, a, b, c, d, e, f) {
      validateFormat(format);
      if (!condition) {
        var error;
        if (format === void 0) {
          error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(format.replace(/%s/g, function() {
            return args[argIndex++];
          }));
          error.name = "Invariant Violation";
        }
        error.framesToPop = 1;
        throw error;
      }
    }
    function shallowCopy(x) {
      if (Array.isArray(x)) {
        return x.concat();
      } else if (x && typeof x === "object") {
        return _assign(new x.constructor(), x);
      } else {
        return x;
      }
    }
    var COMMAND_PUSH = "$push";
    var COMMAND_UNSHIFT = "$unshift";
    var COMMAND_SPLICE = "$splice";
    var COMMAND_SET = "$set";
    var COMMAND_MERGE = "$merge";
    var COMMAND_APPLY = "$apply";
    var ALL_COMMANDS_LIST = [
      COMMAND_PUSH,
      COMMAND_UNSHIFT,
      COMMAND_SPLICE,
      COMMAND_SET,
      COMMAND_MERGE,
      COMMAND_APPLY
    ];
    var ALL_COMMANDS_SET = {};
    ALL_COMMANDS_LIST.forEach(function(command) {
      ALL_COMMANDS_SET[command] = true;
    });
    function invariantArrayCase(value, spec, command) {
      invariant(
        Array.isArray(value),
        "update(): expected target of %s to be an array; got %s.",
        command,
        value
      );
      var specValue = spec[command];
      invariant(
        Array.isArray(specValue),
        "update(): expected spec of %s to be an array; got %s. Did you forget to wrap your parameter in an array?",
        command,
        specValue
      );
    }
    function update(value, spec) {
      invariant(
        typeof spec === "object",
        "update(): You provided a key path to update() that did not contain one of %s. Did you forget to include {%s: ...}?",
        ALL_COMMANDS_LIST.join(", "),
        COMMAND_SET
      );
      if (hasOwnProperty.call(spec, COMMAND_SET)) {
        invariant(
          Object.keys(spec).length === 1,
          "Cannot have more than one key in an object with %s",
          COMMAND_SET
        );
        return spec[COMMAND_SET];
      }
      var nextValue = shallowCopy(value);
      if (hasOwnProperty.call(spec, COMMAND_MERGE)) {
        var mergeObj = spec[COMMAND_MERGE];
        invariant(
          mergeObj && typeof mergeObj === "object",
          "update(): %s expects a spec of type 'object'; got %s",
          COMMAND_MERGE,
          mergeObj
        );
        invariant(
          nextValue && typeof nextValue === "object",
          "update(): %s expects a target of type 'object'; got %s",
          COMMAND_MERGE,
          nextValue
        );
        _assign(nextValue, spec[COMMAND_MERGE]);
      }
      if (hasOwnProperty.call(spec, COMMAND_PUSH)) {
        invariantArrayCase(value, spec, COMMAND_PUSH);
        spec[COMMAND_PUSH].forEach(function(item) {
          nextValue.push(item);
        });
      }
      if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {
        invariantArrayCase(value, spec, COMMAND_UNSHIFT);
        spec[COMMAND_UNSHIFT].forEach(function(item) {
          nextValue.unshift(item);
        });
      }
      if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {
        invariant(
          Array.isArray(value),
          "Expected %s target to be an array; got %s",
          COMMAND_SPLICE,
          value
        );
        invariant(
          Array.isArray(spec[COMMAND_SPLICE]),
          "update(): expected spec of %s to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?",
          COMMAND_SPLICE,
          spec[COMMAND_SPLICE]
        );
        spec[COMMAND_SPLICE].forEach(function(args) {
          invariant(
            Array.isArray(args),
            "update(): expected spec of %s to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?",
            COMMAND_SPLICE,
            spec[COMMAND_SPLICE]
          );
          nextValue.splice.apply(nextValue, args);
        });
      }
      if (hasOwnProperty.call(spec, COMMAND_APPLY)) {
        invariant(
          typeof spec[COMMAND_APPLY] === "function",
          "update(): expected spec of %s to be a function; got %s.",
          COMMAND_APPLY,
          spec[COMMAND_APPLY]
        );
        nextValue = spec[COMMAND_APPLY](nextValue);
      }
      for (var k in spec) {
        if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {
          nextValue[k] = update(value[k], spec[k]);
        }
      }
      return nextValue;
    }
    module.exports = update;
  }
});

// node_modules/react-nestable/dist/utils.js
var require_utils = __commonJS({
  "node_modules/react-nestable/dist/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getAllNonEmptyNodesIds = exports.listWithChildren = exports.getTransformProps = exports.getTotalScroll = exports.getOffsetRect = exports.closest = exports.isArray = exports.isString = exports.isNumber = exports.isFunction = exports.isUndefined = exports.isDefined = exports.objectType = void 0;
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var objectType = function objectType2(obj) {
      return Object.prototype.toString.call(obj).slice(8, -1);
    };
    exports.objectType = objectType;
    var isDefined = function isDefined2(param) {
      return typeof param != "undefined";
    };
    exports.isDefined = isDefined;
    var isUndefined = function isUndefined2(param) {
      return typeof param == "undefined";
    };
    exports.isUndefined = isUndefined;
    var isFunction = function isFunction2(param) {
      return typeof param == "function";
    };
    exports.isFunction = isFunction;
    var isNumber = function isNumber2(param) {
      return typeof param == "number" && !isNaN(param);
    };
    exports.isNumber = isNumber;
    var isString = function isString2(str) {
      return objectType(str) === "String";
    };
    exports.isString = isString;
    var isArray = function isArray2(arr) {
      return objectType(arr) === "Array";
    };
    exports.isArray = isArray;
    var closest = function closest2(target, selector) {
      while (target) {
        if (target.matches && target.matches(selector))
          return target;
        target = target.parentNode;
      }
      return null;
    };
    exports.closest = closest;
    var getOffsetRect = function getOffsetRect2(elem) {
      var box = elem.getBoundingClientRect();
      var body = document.body;
      var docElem = document.documentElement;
      var scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop;
      var scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft;
      var clientTop = docElem.clientTop || body.clientTop || 0;
      var clientLeft = docElem.clientLeft || body.clientLeft || 0;
      var top = box.top + scrollTop - clientTop;
      var left = box.left + scrollLeft - clientLeft;
      return {
        top: Math.round(top),
        left: Math.round(left)
      };
    };
    exports.getOffsetRect = getOffsetRect;
    var getTotalScroll = function getTotalScroll2(elem) {
      var top = 0;
      var left = 0;
      while (elem = elem.parentNode) {
        top += elem.scrollTop || 0;
        left += elem.scrollLeft || 0;
      }
      return {
        top,
        left
      };
    };
    exports.getTotalScroll = getTotalScroll;
    var getTransformProps = function getTransformProps2(x, y) {
      return {
        transform: "translate(" + x + "px, " + y + "px)"
      };
    };
    exports.getTransformProps = getTransformProps;
    var listWithChildren = function listWithChildren2(list, childrenProp) {
      return list.map(function(item) {
        return _objectSpread(_objectSpread({}, item), {}, _defineProperty({}, childrenProp, item[childrenProp] ? listWithChildren2(item[childrenProp], childrenProp) : []));
      });
    };
    exports.listWithChildren = listWithChildren;
    var getAllNonEmptyNodesIds = function getAllNonEmptyNodesIds2(items, _ref) {
      var idProp = _ref.idProp, childrenProp = _ref.childrenProp;
      var childrenIds = [];
      var ids = items.filter(function(item) {
        return item[childrenProp].length;
      }).map(function(item) {
        childrenIds = childrenIds.concat(getAllNonEmptyNodesIds2(item[childrenProp], {
          idProp,
          childrenProp
        }));
        return item[idProp];
      });
      return ids.concat(childrenIds);
    };
    exports.getAllNonEmptyNodesIds = getAllNonEmptyNodesIds;
  }
});

// node_modules/react-nestable/dist/Icon/Icon.js
var require_Icon = __commonJS({
  "node_modules/react-nestable/dist/Icon/Icon.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _classnames = _interopRequireDefault(require_classnames());
    var _excluded = ["children", "className"];
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _extends() {
      _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var Icon = function(_Component) {
      _inherits(Icon2, _Component);
      var _super = _createSuper(Icon2);
      function Icon2() {
        _classCallCheck(this, Icon2);
        return _super.apply(this, arguments);
      }
      _createClass(Icon2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, children = _this$props.children, className = _this$props.className, props = _objectWithoutProperties(_this$props, _excluded);
          return _react["default"].createElement("i", _extends({
            className: (0, _classnames["default"])("nestable-icon", className)
          }, props));
        }
      }]);
      return Icon2;
    }(_react.Component);
    Icon.propTypes = {
      children: _propTypes["default"].any,
      className: _propTypes["default"].string
    };
    var _default = Icon;
    exports["default"] = _default;
  }
});

// node_modules/react-nestable/dist/Icon/index.js
var require_Icon2 = __commonJS({
  "node_modules/react-nestable/dist/Icon/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _Icon = _interopRequireDefault(require_Icon());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _default = _Icon["default"];
    exports["default"] = _default;
  }
});

// node_modules/react-nestable/dist/Nestable/NestableItem.js
var require_NestableItem = __commonJS({
  "node_modules/react-nestable/dist/Nestable/NestableItem.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _classnames = _interopRequireDefault(require_classnames());
    var _Icon = _interopRequireDefault(require_Icon2());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _extends() {
      _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var NestableItem = function(_Component) {
      _inherits(NestableItem2, _Component);
      var _super = _createSuper(NestableItem2);
      function NestableItem2() {
        var _this;
        _classCallCheck(this, NestableItem2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "renderCollapseIcon", function(_ref) {
          var isCollapsed = _ref.isCollapsed;
          return _react["default"].createElement(_Icon["default"], {
            className: (0, _classnames["default"])("nestable-item-icon", {
              "icon-plus-gray": isCollapsed,
              "icon-minus-gray": !isCollapsed
            })
          });
        });
        return _this;
      }
      _createClass(NestableItem2, [{
        key: "render",
        value: function render() {
          var _cx;
          var _this$props = this.props, item = _this$props.item, isCopy = _this$props.isCopy, options = _this$props.options, index = _this$props.index, depth = _this$props.depth;
          var dragItem = options.dragItem, renderItem = options.renderItem, handler = options.handler, idProp = options.idProp, childrenProp = options.childrenProp, _options$renderCollap = options.renderCollapseIcon, renderCollapseIcon = _options$renderCollap === void 0 ? this.renderCollapseIcon : _options$renderCollap;
          var isCollapsed = options.isCollapsed(item);
          var isDragging = !isCopy && dragItem && dragItem[idProp] === item[idProp];
          var hasChildren = item[childrenProp] && item[childrenProp].length > 0;
          var rowProps = {};
          var handlerProps = {};
          var wrappedHandler;
          if (!isCopy) {
            if (dragItem) {
              rowProps = _objectSpread(_objectSpread({}, rowProps), {}, {
                onMouseEnter: function onMouseEnter(e) {
                  return options.onMouseEnter(e, item);
                }
              });
            } else {
              handlerProps = _objectSpread(_objectSpread({}, handlerProps), {}, {
                draggable: true,
                onDragStart: function onDragStart(e) {
                  return options.onDragStart(e, item);
                }
              });
            }
          }
          if (handler) {
            wrappedHandler = _react["default"].createElement("span", _extends({
              className: "nestable-item-handler"
            }, handlerProps), handler);
          } else {
            rowProps = _objectSpread(_objectSpread({}, rowProps), handlerProps);
          }
          var collapseIcon = hasChildren ? _react["default"].createElement("span", {
            onClick: function onClick() {
              return options.onToggleCollapse(item);
            }
          }, renderCollapseIcon({
            isCollapsed
          })) : null;
          var baseClassName = "nestable-item" + (isCopy ? "-copy" : "");
          var itemProps = {
            className: (0, _classnames["default"])(baseClassName, baseClassName + "-" + item[idProp], (_cx = {
              "is-dragging": isDragging
            }, _defineProperty(_cx, baseClassName + "--with-children", hasChildren), _defineProperty(_cx, baseClassName + "--children-open", hasChildren && !isCollapsed), _defineProperty(_cx, baseClassName + "--children-collapsed", hasChildren && isCollapsed), _cx))
          };
          var content = renderItem({
            collapseIcon,
            depth,
            handler: wrappedHandler,
            index,
            item
          });
          if (!content)
            return null;
          return _react["default"].createElement("li", itemProps, _react["default"].createElement("div", _extends({
            className: "nestable-item-name"
          }, rowProps), content), hasChildren && !isCollapsed && _react["default"].createElement("ol", {
            className: "nestable-list"
          }, item[childrenProp].map(function(item2, i) {
            return _react["default"].createElement(NestableItem2, {
              key: i,
              index: i,
              depth: depth + 1,
              item: item2,
              options,
              isCopy
            });
          })));
        }
      }]);
      return NestableItem2;
    }(_react.Component);
    _defineProperty(NestableItem, "propTypes", {
      item: _propTypes["default"].object,
      isCopy: _propTypes["default"].bool,
      options: _propTypes["default"].object,
      index: _propTypes["default"].number,
      depth: _propTypes["default"].number
    });
    _defineProperty(NestableItem, "defaultProps", {
      depth: 0
    });
    var _default = NestableItem;
    exports["default"] = _default;
  }
});

// node_modules/react-nestable/dist/Nestable/Nestable.js
var require_Nestable = __commonJS({
  "node_modules/react-nestable/dist/Nestable/Nestable.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _reactAddonsShallowCompare = _interopRequireDefault(require_react_addons_shallow_compare());
    var _reactAddonsUpdate = _interopRequireDefault(require_react_addons_update());
    var _classnames = _interopRequireDefault(require_classnames());
    var _utils = require_utils();
    var _NestableItem = _interopRequireDefault(require_NestableItem());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray(arr);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var Nestable = function(_Component) {
      _inherits(Nestable2, _Component);
      var _super = _createSuper(Nestable2);
      function Nestable2(props) {
        var _this;
        _classCallCheck(this, Nestable2);
        _this = _super.call(this, props);
        _defineProperty(_assertThisInitialized(_this), "collapse", function(itemIds) {
          var _this$props = _this.props, idProp = _this$props.idProp, childrenProp = _this$props.childrenProp, collapsed = _this$props.collapsed;
          var items = _this.state.items;
          if (itemIds === "NONE") {
            _this.setState({
              collapsedGroups: collapsed ? (0, _utils.getAllNonEmptyNodesIds)(items, {
                idProp,
                childrenProp
              }) : []
            });
          } else if (itemIds === "ALL") {
            _this.setState({
              collapsedGroups: collapsed ? [] : (0, _utils.getAllNonEmptyNodesIds)(items, {
                idProp,
                childrenProp
              })
            });
          } else if ((0, _utils.isArray)(itemIds)) {
            _this.setState({
              collapsedGroups: (0, _utils.getAllNonEmptyNodesIds)(items, {
                idProp,
                childrenProp
              }).filter(function(id) {
                return itemIds.indexOf(id) > -1 ^ collapsed;
              })
            });
          }
        });
        _defineProperty(_assertThisInitialized(_this), "startTrackMouse", function() {
          document.addEventListener("mousemove", _this.onMouseMove);
          document.addEventListener("mouseup", _this.onDragEnd);
          document.addEventListener("keydown", _this.onKeyDown);
        });
        _defineProperty(_assertThisInitialized(_this), "stopTrackMouse", function() {
          document.removeEventListener("mousemove", _this.onMouseMove);
          document.removeEventListener("mouseup", _this.onDragEnd);
          document.removeEventListener("keydown", _this.onKeyDown);
          _this.elCopyStyles = null;
        });
        _defineProperty(_assertThisInitialized(_this), "getItemDepth", function(item) {
          var childrenProp = _this.props.childrenProp;
          var level = 1;
          if (item[childrenProp].length > 0) {
            var childrenDepths = item[childrenProp].map(_this.getItemDepth);
            level += Math.max.apply(Math, _toConsumableArray(childrenDepths));
          }
          return level;
        });
        _defineProperty(_assertThisInitialized(_this), "isCollapsed", function(item) {
          var _this$props2 = _this.props, collapsed = _this$props2.collapsed, idProp = _this$props2.idProp;
          var collapsedGroups = _this.state.collapsedGroups;
          return !!(collapsedGroups.indexOf(item[idProp]) > -1 ^ collapsed);
        });
        _defineProperty(_assertThisInitialized(_this), "onDragStart", function(e, item) {
          if (e) {
            e.preventDefault();
            e.stopPropagation();
          }
          _this.el = (0, _utils.closest)(e.target, ".nestable-item");
          _this.startTrackMouse();
          _this.onMouseMove(e);
          _this.setState({
            dragItem: item,
            itemsOld: _this.state.items
          });
        });
        _defineProperty(_assertThisInitialized(_this), "onDragEnd", function(e, isCancel) {
          e && e.preventDefault();
          _this.stopTrackMouse();
          _this.el = null;
          isCancel ? _this.dragRevert() : _this.dragApply();
        });
        _defineProperty(_assertThisInitialized(_this), "onMouseMove", function(e) {
          var _this$props3 = _this.props, group = _this$props3.group, threshold = _this$props3.threshold;
          var dragItem = _this.state.dragItem;
          var clientX = e.clientX, clientY = e.clientY;
          var transformProps = (0, _utils.getTransformProps)(clientX, clientY);
          var elCopy = document.querySelector(".nestable-" + group + " .nestable-drag-layer > .nestable-list");
          if (!_this.elCopyStyles) {
            var offset = (0, _utils.getOffsetRect)(_this.el);
            var scroll = (0, _utils.getTotalScroll)(_this.el);
            _this.elCopyStyles = _objectSpread({
              marginTop: offset.top - clientY - scroll.top,
              marginLeft: offset.left - clientX - scroll.left
            }, transformProps);
          } else {
            _this.elCopyStyles = _objectSpread(_objectSpread({}, _this.elCopyStyles), transformProps);
            for (var key in transformProps) {
              if (transformProps.hasOwnProperty(key)) {
                elCopy.style[key] = transformProps[key];
              }
            }
            var diffX = clientX - _this.mouse.last.x;
            if (diffX >= 0 && _this.mouse.shift.x >= 0 || diffX <= 0 && _this.mouse.shift.x <= 0) {
              _this.mouse.shift.x += diffX;
            } else {
              _this.mouse.shift.x = 0;
            }
            _this.mouse.last.x = clientX;
            if (Math.abs(_this.mouse.shift.x) > threshold) {
              if (_this.mouse.shift.x > 0) {
                _this.tryIncreaseDepth(dragItem);
              } else {
                _this.tryDecreaseDepth(dragItem);
              }
              _this.mouse.shift.x = 0;
            }
          }
        });
        _defineProperty(_assertThisInitialized(_this), "onMouseEnter", function(e, item) {
          if (e) {
            e.preventDefault();
            e.stopPropagation();
          }
          var _this$props4 = _this.props, collapsed = _this$props4.collapsed, idProp = _this$props4.idProp, childrenProp = _this$props4.childrenProp;
          var dragItem = _this.state.dragItem;
          if (dragItem[idProp] === item[idProp])
            return;
          var pathFrom = _this.getPathById(dragItem[idProp]);
          var pathTo = _this.getPathById(item[idProp]);
          var collapseProps = {};
          if (collapsed && pathFrom.length > 1) {
            var parent = _this.getItemByPath(pathFrom.slice(0, -1));
            if (parent[childrenProp].length === 1) {
              collapseProps = _this.onToggleCollapse(parent, true);
            }
          }
          _this.moveItem({
            dragItem,
            pathFrom,
            pathTo
          }, collapseProps);
        });
        _defineProperty(_assertThisInitialized(_this), "onToggleCollapse", function(item, isGetter) {
          var _this$props5 = _this.props, collapsed = _this$props5.collapsed, idProp = _this$props5.idProp;
          var collapsedGroups = _this.state.collapsedGroups;
          var isCollapsed = _this.isCollapsed(item);
          var newState = {
            collapsedGroups: isCollapsed ^ collapsed ? collapsedGroups.filter(function(id) {
              return id !== item[idProp];
            }) : collapsedGroups.concat(item[idProp])
          };
          if (isGetter) {
            return newState;
          } else {
            _this.setState(newState);
          }
        });
        _defineProperty(_assertThisInitialized(_this), "onKeyDown", function(e) {
          if (e.which === 27) {
            _this.onDragEnd(null, true);
          }
        });
        _this.state = {
          items: [],
          itemsOld: null,
          // snap copy in case of canceling drag
          dragItem: null,
          isDirty: false,
          collapsedGroups: []
        };
        _this.el = null;
        _this.elCopyStyles = null;
        _this.mouse = {
          last: {
            x: 0
          },
          shift: {
            x: 0
          }
        };
        return _this;
      }
      _createClass(Nestable2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this$props6 = this.props, items = _this$props6.items, childrenProp = _this$props6.childrenProp;
          items = (0, _utils.listWithChildren)(items, childrenProp);
          this.setState({
            items
          });
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          var _this$props7 = this.props, itemsNew = _this$props7.items, childrenProp = _this$props7.childrenProp;
          var isPropsUpdated = (0, _reactAddonsShallowCompare["default"])({
            props: prevProps,
            state: {}
          }, this.props, {});
          if (isPropsUpdated) {
            this.stopTrackMouse();
            var extra = {};
            if (prevProps.collapsed !== this.props.collapsed) {
              extra.collapsedGroups = [];
            }
            this.setState(_objectSpread({
              items: (0, _utils.listWithChildren)(itemsNew, childrenProp),
              dragItem: null,
              isDirty: false
            }, extra));
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.stopTrackMouse();
        }
        // ––––––––––––––––––––––––––––––––––––
        // Public Methods
        // ––––––––––––––––––––––––––––––––––––
      }, {
        key: "moveItem",
        value: function moveItem(_ref) {
          var dragItem = _ref.dragItem, pathFrom = _ref.pathFrom, pathTo = _ref.pathTo;
          var extraProps = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var _this$props8 = this.props, childrenProp = _this$props8.childrenProp, confirmChange = _this$props8.confirmChange;
          var dragItemSize = this.getItemDepth(dragItem);
          var items = this.state.items;
          var realPathTo = this.getRealNextPath(pathFrom, pathTo, dragItemSize);
          if (realPathTo.length === 0)
            return;
          var destinationPath = realPathTo.length > pathTo.length ? pathTo : pathTo.slice(0, -1);
          var destinationParent = this.getItemByPath(destinationPath);
          if (!confirmChange({
            dragItem,
            destinationParent
          }))
            return;
          var removePath = this.getSplicePath(pathFrom, {
            numToRemove: 1,
            childrenProp
          });
          var insertPath = this.getSplicePath(realPathTo, {
            numToRemove: 0,
            itemsToInsert: [dragItem],
            childrenProp
          });
          items = (0, _reactAddonsUpdate["default"])(items, removePath);
          items = (0, _reactAddonsUpdate["default"])(items, insertPath);
          this.setState(_objectSpread({
            items,
            isDirty: true
          }, extraProps));
        }
      }, {
        key: "tryIncreaseDepth",
        value: function tryIncreaseDepth(dragItem) {
          var _this$props9 = this.props, maxDepth = _this$props9.maxDepth, idProp = _this$props9.idProp, childrenProp = _this$props9.childrenProp, collapsed = _this$props9.collapsed;
          var pathFrom = this.getPathById(dragItem[idProp]);
          var itemIndex = pathFrom[pathFrom.length - 1];
          var newDepth = pathFrom.length + this.getItemDepth(dragItem);
          if (itemIndex > 0 && newDepth <= maxDepth) {
            var prevSibling = this.getItemByPath(pathFrom.slice(0, -1).concat(itemIndex - 1));
            if (!prevSibling[childrenProp].length || !this.isCollapsed(prevSibling)) {
              var pathTo = pathFrom.slice(0, -1).concat(itemIndex - 1).concat(prevSibling[childrenProp].length);
              var collapseProps = {};
              if (collapsed && !prevSibling[childrenProp].length) {
                collapseProps = this.onToggleCollapse(prevSibling, true);
              }
              this.moveItem({
                dragItem,
                pathFrom,
                pathTo
              }, collapseProps);
            }
          }
        }
      }, {
        key: "tryDecreaseDepth",
        value: function tryDecreaseDepth(dragItem) {
          var _this$props10 = this.props, idProp = _this$props10.idProp, childrenProp = _this$props10.childrenProp, collapsed = _this$props10.collapsed;
          var pathFrom = this.getPathById(dragItem[idProp]);
          var itemIndex = pathFrom[pathFrom.length - 1];
          if (pathFrom.length > 1) {
            var parent = this.getItemByPath(pathFrom.slice(0, -1));
            if (itemIndex + 1 === parent[childrenProp].length) {
              var pathTo = pathFrom.slice(0, -1);
              pathTo[pathTo.length - 1] += 1;
              var collapseProps = {};
              if (collapsed && parent[childrenProp].length === 1) {
                collapseProps = this.onToggleCollapse(parent, true);
              }
              this.moveItem({
                dragItem,
                pathFrom,
                pathTo
              }, collapseProps);
            }
          }
        }
      }, {
        key: "dragApply",
        value: function dragApply() {
          var _this$props11 = this.props, onChange = _this$props11.onChange, idProp = _this$props11.idProp;
          var _this$state = this.state, items = _this$state.items, isDirty = _this$state.isDirty, dragItem = _this$state.dragItem;
          this.setState({
            itemsOld: null,
            dragItem: null,
            isDirty: false
          });
          if (onChange && isDirty) {
            var targetPath = this.getPathById(dragItem[idProp], items);
            onChange({
              items,
              dragItem,
              targetPath
            });
          }
        }
      }, {
        key: "dragRevert",
        value: function dragRevert() {
          var itemsOld = this.state.itemsOld;
          this.setState({
            items: itemsOld,
            itemsOld: null,
            dragItem: null,
            isDirty: false
          });
        }
        // ––––––––––––––––––––––––––––––––––––
        // Getter methods
        // ––––––––––––––––––––––––––––––––––––
      }, {
        key: "getPathById",
        value: function getPathById(id) {
          var _this2 = this;
          var items = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.state.items;
          var _this$props12 = this.props, idProp = _this$props12.idProp, childrenProp = _this$props12.childrenProp;
          var path = [];
          items.every(function(item, i) {
            if (item[idProp] === id) {
              path.push(i);
            } else if (item[childrenProp]) {
              var childrenPath = _this2.getPathById(id, item[childrenProp]);
              if (childrenPath.length) {
                path = path.concat(i).concat(childrenPath);
              }
            }
            return path.length === 0;
          });
          return path;
        }
      }, {
        key: "getItemByPath",
        value: function getItemByPath(path) {
          var items = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.state.items;
          var childrenProp = this.props.childrenProp;
          var item = null;
          path.forEach(function(index) {
            var list = item ? item[childrenProp] : items;
            item = list[index];
          });
          return item;
        }
      }, {
        key: "getSplicePath",
        value: function getSplicePath(path) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var splicePath = {};
          var numToRemove = options.numToRemove || 0;
          var itemsToInsert = options.itemsToInsert || [];
          var lastIndex = path.length - 1;
          var currentPath = splicePath;
          path.forEach(function(index, i) {
            if (i === lastIndex) {
              currentPath.$splice = [[index, numToRemove].concat(_toConsumableArray(itemsToInsert))];
            } else {
              var nextPath = {};
              currentPath[index] = _defineProperty({}, options.childrenProp, nextPath);
              currentPath = nextPath;
            }
          });
          return splicePath;
        }
      }, {
        key: "getRealNextPath",
        value: function getRealNextPath(prevPath, nextPath, dragItemSize) {
          var _this$props13 = this.props, childrenProp = _this$props13.childrenProp, maxDepth = _this$props13.maxDepth;
          var ppLastIndex = prevPath.length - 1;
          var npLastIndex = nextPath.length - 1;
          var newDepth = nextPath.length + dragItemSize - 1;
          if (prevPath.length < nextPath.length) {
            var wasShifted = false;
            if (newDepth > maxDepth && nextPath.length) {
              return this.getRealNextPath(prevPath, nextPath.slice(0, -1), dragItemSize);
            }
            return nextPath.map(function(nextIndex, i) {
              if (wasShifted) {
                return i === npLastIndex ? nextIndex + 1 : nextIndex;
              }
              if (typeof prevPath[i] !== "number") {
                return nextIndex;
              }
              if (nextPath[i] > prevPath[i] && i === ppLastIndex) {
                wasShifted = true;
                return nextIndex - 1;
              }
              return nextIndex;
            });
          } else if (prevPath.length === nextPath.length) {
            if (nextPath[npLastIndex] > prevPath[npLastIndex]) {
              var target = this.getItemByPath(nextPath);
              if (newDepth < maxDepth && target[childrenProp] && target[childrenProp].length && !this.isCollapsed(target)) {
                return nextPath.slice(0, -1).concat(nextPath[npLastIndex] - 1).concat(0);
              }
            }
          }
          return nextPath;
        }
      }, {
        key: "getItemOptions",
        value: function getItemOptions() {
          var _this$props14 = this.props, renderItem = _this$props14.renderItem, renderCollapseIcon = _this$props14.renderCollapseIcon, handler = _this$props14.handler, idProp = _this$props14.idProp, childrenProp = _this$props14.childrenProp;
          var dragItem = this.state.dragItem;
          return {
            dragItem,
            idProp,
            childrenProp,
            renderItem,
            renderCollapseIcon,
            handler,
            onDragStart: this.onDragStart,
            onMouseEnter: this.onMouseEnter,
            isCollapsed: this.isCollapsed,
            onToggleCollapse: this.onToggleCollapse
          };
        }
      }, {
        key: "renderDragLayer",
        value: (
          // ––––––––––––––––––––––––––––––––––––
          // Render methods
          // ––––––––––––––––––––––––––––––––––––
          function renderDragLayer() {
            var _this$props15 = this.props, group = _this$props15.group, idProp = _this$props15.idProp;
            var dragItem = this.state.dragItem;
            var el = document.querySelector(".nestable-" + group + " .nestable-item-" + dragItem[idProp]);
            var listStyles = {};
            if (el) {
              listStyles.width = el.clientWidth;
            }
            if (this.elCopyStyles) {
              listStyles = _objectSpread(_objectSpread({}, listStyles), this.elCopyStyles);
            }
            var options = this.getItemOptions();
            return _react["default"].createElement("div", {
              className: "nestable-drag-layer"
            }, _react["default"].createElement("ol", {
              className: "nestable-list",
              style: listStyles
            }, _react["default"].createElement(_NestableItem["default"], {
              item: dragItem,
              options,
              isCopy: true
            })));
          }
        )
      }, {
        key: "render",
        value: function render() {
          var _this$props16 = this.props, group = _this$props16.group, className = _this$props16.className;
          var _this$state2 = this.state, items = _this$state2.items, dragItem = _this$state2.dragItem;
          var options = this.getItemOptions();
          return _react["default"].createElement("div", {
            className: (0, _classnames["default"])(className, "nestable", "nestable-" + group, {
              "is-drag-active": dragItem
            })
          }, _react["default"].createElement("ol", {
            className: "nestable-list nestable-group"
          }, items.map(function(item, i) {
            return _react["default"].createElement(_NestableItem["default"], {
              key: i,
              index: i,
              item,
              options
            });
          })), dragItem && this.renderDragLayer());
        }
      }]);
      return Nestable2;
    }(_react.Component);
    _defineProperty(Nestable, "propTypes", {
      childrenProp: _propTypes["default"].string,
      className: _propTypes["default"].string,
      collapsed: _propTypes["default"].bool,
      confirmChange: _propTypes["default"].func,
      group: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),
      handler: _propTypes["default"].node,
      idProp: _propTypes["default"].string,
      items: _propTypes["default"].array,
      maxDepth: _propTypes["default"].number,
      onChange: _propTypes["default"].func,
      renderCollapseIcon: _propTypes["default"].func,
      renderItem: _propTypes["default"].func,
      threshold: _propTypes["default"].number
    });
    _defineProperty(Nestable, "defaultProps", {
      childrenProp: "children",
      collapsed: false,
      confirmChange: function confirmChange() {
        return true;
      },
      group: Math.random().toString(36).slice(2),
      idProp: "id",
      items: [],
      maxDepth: 10,
      onChange: function onChange() {
      },
      renderItem: function renderItem(_ref2) {
        var item = _ref2.item;
        return String(item);
      },
      threshold: 30
    });
    var _default = Nestable;
    exports["default"] = _default;
  }
});

// node_modules/react-nestable/dist/Nestable/index.js
var require_Nestable2 = __commonJS({
  "node_modules/react-nestable/dist/Nestable/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _Nestable = _interopRequireDefault(require_Nestable());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _default = _Nestable["default"];
    exports["default"] = _default;
  }
});

// node_modules/react-nestable/dist/index.js
var require_dist = __commonJS({
  "node_modules/react-nestable/dist/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _Nestable = _interopRequireDefault(require_Nestable2());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _default = _Nestable["default"];
    exports["default"] = _default;
  }
});
export default require_dist();
//# sourceMappingURL=react-nestable.js.map
