{
  "version": 3,
  "sources": ["../../react-jwt/src/jwt/index.ts", "../../react-jwt/src/hooks/index.tsx"],
  "sourcesContent": ["/**\n * Try to decode a JWT. If the token is valid you'll get an object otherwise you'll get null\n * @param token - The JWT that you want to decode\n * @returns Decoded token\n */\nexport function decodeToken<T>(token: string): T | null;\nexport function decodeToken(token: string): Object | null;\nexport function decodeToken<T = Object>(token: string): T | null {\n  try {\n    // if the token has more or less than 3 parts or is not a string\n    // then is not a valid token\n    if (token.split(\".\").length !== 3 || typeof token !== \"string\") {\n      return null;\n    }\n\n    // payload ( index 1 ) has the data stored and\n    // data about the expiration time\n    const payload: string = token.split(\".\")[1];\n    // determine the padding characters required for the base64 string\n    const padding: string = \"=\".repeat((4 - (payload.length % 4)) % 4);\n    // convert the base64url string to a base64 string\n    const base64: string =\n      payload.replace(\"-\", \"+\").replace(\"_\", \"/\") + padding;\n    // parse base64 into json\n    const jsonPayload = decodeURIComponent(\n      window.atob(base64)\n          .split('')\n          .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n          .join('')\n    );\n    // decode json\n    const decoded = JSON.parse(jsonPayload);\n\n    return decoded;\n  } catch (error) {\n    // Return null if something goes wrong\n    return null;\n  }\n}\n\n/**\n * Verify if the token is expired or not\n * @param token - Your JWT\n * @returns boolean\n */\nexport function isTokenExpired(token: string): boolean {\n  const decodedToken: any = decodeToken(token);\n  let result: boolean = true;\n\n  if (decodedToken && decodedToken.exp) {\n    const expirationDate: Date = new Date(0);\n    expirationDate.setUTCSeconds(decodedToken.exp); // sets the expiration seconds\n    // compare the expiration time and the current time\n    result = expirationDate.valueOf() < new Date().valueOf();\n  }\n\n  return result;\n}\n", "import { useState, useEffect } from \"react\";\nimport { decodeToken, isTokenExpired } from \"../jwt\";\n\n/**\n * This function will help you to decode a JWT and know if it's expired or not\n * @param userJwt - Your JWT\n * @returns An object containing the properties isExpired, decodedToken and reEvaluateToken\n */\nexport function useJwt<T>(userJwt: string): IUseJwt<T>;\nexport function useJwt(userJwt: string): IUseJwt;\nexport function useJwt<T>(userJwt: string): IUseJwt<T> {\n  const [isExpired, setIsExpired] = useState<boolean>(false);\n  const [decodedToken, setDecodedToken] = useState<T | null>(null);\n\n  useEffect(() => {\n    evaluateToken(userJwt);\n  }, [userJwt]);\n\n  const evaluateToken = (token: string) => {\n    setDecodedToken(decodeToken<T>(token));\n    setIsExpired(isTokenExpired(token));\n  };\n\n  return { isExpired, decodedToken, reEvaluateToken: evaluateToken };\n}\n\ninterface IUseJwt<T = Object> {\n  isExpired: boolean;\n  decodedToken: T | null;\n  reEvaluateToken: (token: string) => void;\n}\n\n"],
  "mappings": ";;;;;;;;;SAOgBA,YAAwBC,OAAAA;AACtC,MAAI;AAGF,QAAIA,MAAMC,MAAM,GAAZ,EAAiBC,WAAW,KAAK,OAAOF,UAAU,UAAU;AAC9D,aAAO;;AAKT,QAAMG,UAAkBH,MAAMC,MAAM,GAAZ,EAAiB,CAAjB;AAExB,QAAMG,UAAkB,IAAIC,QAAQ,IAAKF,QAAQD,SAAS,KAAM,CAAxC;AAExB,QAAMI,SACJH,QAAQI,QAAQ,KAAK,GAArB,EAA0BA,QAAQ,KAAK,GAAvC,IAA8CH;AAEhD,QAAMI,cAAcC,mBAClBC,OAAOC,KAAKL,MAAZ,EACKL,MAAM,EADX,EAEKW,IAAI,SAAAC,GAAC;AAAA,aAAI,OAAO,OAAOA,EAAEC,WAAW,CAAb,EAAgBC,SAAS,EAAzB,GAA8BC,MAAM,EAA5C;KAFpB,EAGKC,KAAK,EAHV,CADoC;AAOtC,QAAMC,UAAUC,KAAKC,MAAMZ,WAAX;AAEhB,WAAOU;WACAG,OAAP;AAEA,WAAO;;AAEV;SAOeC,eAAetB,OAAAA;AAC7B,MAAMuB,eAAoBxB,YAAYC,KAAD;AACrC,MAAIwB,SAAkB;AAEtB,MAAID,gBAAgBA,aAAaE,KAAK;AACpC,QAAMC,iBAAuB,oBAAIC,KAAK,CAAT;AAC7BD,mBAAeE,cAAcL,aAAaE,GAA1C;AAEAD,aAASE,eAAeG,QAAf,KAA2B,oBAAIF,KAAJ,GAAWE,QAAX;;AAGtC,SAAOL;AACR;SC/CeM,OAAUC,SAAAA;AACxB,MAAA,gBAAkCC,uBAAkB,KAAV,GAAnCC,YAAP,UAAA,CAAA,GAAkBC,eAAlB,UAAA,CAAA;AACA,MAAA,iBAAwCF,uBAAmB,IAAX,GAAzCT,eAAP,WAAA,CAAA,GAAqBY,kBAArB,WAAA,CAAA;AAEAC,8BAAU,WAAA;AACRC,kBAAcN,OAAD;KACZ,CAACA,OAAD,CAFM;AAIT,MAAMM,gBAAgB,SAAhBA,eAAiBrC,OAAD;AACpBmC,oBAAgBpC,YAAeC,KAAJ,CAAZ;AACfkC,iBAAaZ,eAAetB,KAAD,CAAf;;AAGd,SAAO;IAAEiC;IAAWV;IAAce,iBAAiBD;;AACpD;",
  "names": ["decodeToken", "token", "split", "length", "payload", "padding", "repeat", "base64", "replace", "jsonPayload", "decodeURIComponent", "window", "atob", "map", "c", "charCodeAt", "toString", "slice", "join", "decoded", "JSON", "parse", "error", "isTokenExpired", "decodedToken", "result", "exp", "expirationDate", "Date", "setUTCSeconds", "valueOf", "useJwt", "userJwt", "useState", "isExpired", "setIsExpired", "setDecodedToken", "useEffect", "evaluateToken", "reEvaluateToken"]
}
