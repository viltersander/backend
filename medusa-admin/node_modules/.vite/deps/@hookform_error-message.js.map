{
  "version": 3,
  "sources": ["../../@hookform/error-message/src/ErrorMessage.tsx"],
  "sourcesContent": ["import * as React from 'react';\nimport { useFormContext, get, FieldErrors } from 'react-hook-form';\nimport { Props } from './types';\n\nconst ErrorMessage = <\n  TFieldErrors extends FieldErrors,\n  TAs extends\n    | undefined\n    | React.ReactElement\n    | React.ComponentType<any>\n    | keyof JSX.IntrinsicElements = undefined\n>({\n  as,\n  errors,\n  name,\n  message,\n  render,\n  ...rest\n}: Props<TFieldErrors, TAs>) => {\n  const methods = useFormContext();\n  const error = get(errors || methods.formState.errors, name);\n\n  if (!error) {\n    return null;\n  }\n\n  const { message: messageFromRegister, types } = error;\n  const props = Object.assign({}, rest, {\n    children: messageFromRegister || message,\n  });\n\n  return React.isValidElement(as)\n    ? React.cloneElement(as, props)\n    : render\n    ? (render({\n        message: messageFromRegister || message,\n        messages: types,\n      }) as React.ReactElement)\n    : React.createElement((as as string) || React.Fragment, props);\n};\n\nexport { ErrorMessage };\n"],
  "mappings": ";;;;;;;;;;;;;AAIMA,IAAAA,IAAe,SAAAC,IAAA;AAAA,MAQnBC,IAAAA,GAAAA,IACAC,IAAAA,GAAAA,QACAC,IAAAA,GAAAA,MACAC,IAAAA,GAAAA,SACAC,IAAAA,GAAAA,QACGC,IAAAA,SAAAA,IAAAA,GAAAA;AAAAA,QAAAA,QAAAA;AAAAA,aAAAA,CAAAA;AAAAA,QAAAA,GAAAA,IAAAA,KAAAA,CAAAA,GAAAA,KAAAA,OAAAA,KAAAA,EAAAA;AAAAA,SAAAA,KAAAA,GAAAA,KAAAA,GAAAA,QAAAA;AAAAA,QAAAA,QAAAA,IAAAA,GAAAA,EAAAA,CAAAA,KAAAA,MAAAA,GAAAA,CAAAA,IAAAA,GAAAA,CAAAA;AAAAA,WAAAA;EAAAA,EAAAA,IAAAA,CAAAA,MAAAA,UAAAA,QAAAA,WAAAA,QAAAA,CAAAA,GAEGC,IAAUC,eAAAA,GACVC,IAAQC,IAAIR,KAAUK,EAAQI,UAAUT,QAAQC,CAAAA;AAEtD,MAAA,CAAKM;AACH,WAAA;AAGF,MAAiBG,IAA+BH,EAAxCL,SAA8BS,IAAUJ,EAAVI,OAChCC,IAAQC,OAAOC,OAAO,CAAA,GAAIV,GAAM,EACpCW,UAAUL,KAAuBR,EAAAA,CAAAA;AAGnC,SAAac,iBAAejB,CAAAA,IAClBkB,eAAalB,GAAIa,CAAAA,IACvBT,IACCA,EAAO,EACND,SAASQ,KAAuBR,GAChCgB,UAAUP,EAAAA,CAAAA,IAENQ,gBAAepB,KAAuBqB,YAAUR,CAAAA;AAAAA;",
  "names": ["ErrorMessage", "s", "as", "errors", "name", "message", "render", "rest", "methods", "useFormContext", "error", "get", "formState", "messageFromRegister", "types", "props", "Object", "assign", "children", "isValidElement", "cloneElement", "messages", "createElement", "Fragment"]
}
