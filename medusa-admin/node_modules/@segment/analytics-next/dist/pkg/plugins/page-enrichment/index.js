import { __assign } from "tslib";
import { pick } from '../../lib/pick';
/**
 * Get the current page's canonical URL.
 */
function canonical() {
    var canon = document.querySelector("link[rel='canonical']");
    if (canon) {
        return canon.getAttribute('href') || undefined;
    }
}
/**
 * Return the canonical path for the page.
 */
function canonicalPath() {
    var canon = canonical();
    if (!canon) {
        return window.location.pathname;
    }
    var a = document.createElement('a');
    a.href = canon;
    var pathname = !a.pathname.startsWith('/') ? '/' + a.pathname : a.pathname;
    return pathname;
}
/**
 * Return the canonical URL for the page concat the given `search`
 * and strip the hash.
 */
export function canonicalUrl(search) {
    if (search === void 0) { search = ''; }
    var canon = canonical();
    if (canon) {
        return canon.includes('?') ? canon : "".concat(canon).concat(search);
    }
    var url = window.location.href;
    var i = url.indexOf('#');
    return i === -1 ? url : url.slice(0, i);
}
/**
 * Return a default `options.context.page` object.
 *
 * https://segment.com/docs/spec/page/#properties
 */
export function pageDefaults() {
    return {
        path: canonicalPath(),
        referrer: document.referrer,
        search: location.search,
        title: document.title,
        url: canonicalUrl(location.search),
    };
}
function enrichPageContext(ctx) {
    var event = ctx.event;
    event.context = event.context || {};
    var defaultPageContext = pageDefaults();
    var pageContextFromEventProps = event.properties && pick(event.properties, Object.keys(defaultPageContext));
    event.context.page = __assign(__assign(__assign({}, defaultPageContext), pageContextFromEventProps), event.context.page);
    if (event.type === 'page') {
        event.properties = __assign(__assign(__assign({}, defaultPageContext), event.properties), (event.name ? { name: event.name } : {}));
    }
    return ctx;
}
export var pageEnrichment = {
    name: 'Page Enrichment',
    version: '0.1.0',
    isLoaded: function () { return true; },
    load: function () { return Promise.resolve(); },
    type: 'before',
    page: enrichPageContext,
    alias: enrichPageContext,
    track: enrichPageContext,
    identify: enrichPageContext,
    group: enrichPageContext,
};
//# sourceMappingURL=index.js.map